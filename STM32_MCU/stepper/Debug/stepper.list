
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008314  08008314  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800831c  0800831c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000060  08008384  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008384  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a79  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000457e  00000000  00000000  00038b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fde  00000000  00000000  0003e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a3a  00000000  00000000  0003f53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001577e  00000000  00000000  00057f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c542  00000000  00000000  0006d6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f40  00000000  00000000  00109c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000144  00000000  00000000  0010eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00001221  00000000  00000000  0010ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_drsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800019c:	e002      	b.n	80001a4 <__adddf3>
 800019e:	bf00      	nop

080001a0 <__aeabi_dsub>:
 80001a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a4 <__adddf3>:
 80001a4:	b530      	push	{r4, r5, lr}
 80001a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ae:	ea94 0f05 	teq	r4, r5
 80001b2:	bf08      	it	eq
 80001b4:	ea90 0f02 	teqeq	r0, r2
 80001b8:	bf1f      	itttt	ne
 80001ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ca:	f000 80e2 	beq.w	8000392 <__adddf3+0x1ee>
 80001ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d6:	bfb8      	it	lt
 80001d8:	426d      	neglt	r5, r5
 80001da:	dd0c      	ble.n	80001f6 <__adddf3+0x52>
 80001dc:	442c      	add	r4, r5
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	ea82 0000 	eor.w	r0, r2, r0
 80001ea:	ea83 0101 	eor.w	r1, r3, r1
 80001ee:	ea80 0202 	eor.w	r2, r0, r2
 80001f2:	ea81 0303 	eor.w	r3, r1, r3
 80001f6:	2d36      	cmp	r5, #54	; 0x36
 80001f8:	bf88      	it	hi
 80001fa:	bd30      	pophi	{r4, r5, pc}
 80001fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000200:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000204:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x70>
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000218:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800021c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000220:	d002      	beq.n	8000228 <__adddf3+0x84>
 8000222:	4252      	negs	r2, r2
 8000224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000228:	ea94 0f05 	teq	r4, r5
 800022c:	f000 80a7 	beq.w	800037e <__adddf3+0x1da>
 8000230:	f1a4 0401 	sub.w	r4, r4, #1
 8000234:	f1d5 0e20 	rsbs	lr, r5, #32
 8000238:	db0d      	blt.n	8000256 <__adddf3+0xb2>
 800023a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023e:	fa22 f205 	lsr.w	r2, r2, r5
 8000242:	1880      	adds	r0, r0, r2
 8000244:	f141 0100 	adc.w	r1, r1, #0
 8000248:	fa03 f20e 	lsl.w	r2, r3, lr
 800024c:	1880      	adds	r0, r0, r2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	4159      	adcs	r1, r3
 8000254:	e00e      	b.n	8000274 <__adddf3+0xd0>
 8000256:	f1a5 0520 	sub.w	r5, r5, #32
 800025a:	f10e 0e20 	add.w	lr, lr, #32
 800025e:	2a01      	cmp	r2, #1
 8000260:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000264:	bf28      	it	cs
 8000266:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026a:	fa43 f305 	asr.w	r3, r3, r5
 800026e:	18c0      	adds	r0, r0, r3
 8000270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000278:	d507      	bpl.n	800028a <__adddf3+0xe6>
 800027a:	f04f 0e00 	mov.w	lr, #0
 800027e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000282:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000286:	eb6e 0101 	sbc.w	r1, lr, r1
 800028a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028e:	d31b      	bcc.n	80002c8 <__adddf3+0x124>
 8000290:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000294:	d30c      	bcc.n	80002b0 <__adddf3+0x10c>
 8000296:	0849      	lsrs	r1, r1, #1
 8000298:	ea5f 0030 	movs.w	r0, r0, rrx
 800029c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a0:	f104 0401 	add.w	r4, r4, #1
 80002a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ac:	f080 809a 	bcs.w	80003e4 <__adddf3+0x240>
 80002b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	ea41 0105 	orr.w	r1, r1, r5
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002cc:	4140      	adcs	r0, r0
 80002ce:	eb41 0101 	adc.w	r1, r1, r1
 80002d2:	3c01      	subs	r4, #1
 80002d4:	bf28      	it	cs
 80002d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002da:	d2e9      	bcs.n	80002b0 <__adddf3+0x10c>
 80002dc:	f091 0f00 	teq	r1, #0
 80002e0:	bf04      	itt	eq
 80002e2:	4601      	moveq	r1, r0
 80002e4:	2000      	moveq	r0, #0
 80002e6:	fab1 f381 	clz	r3, r1
 80002ea:	bf08      	it	eq
 80002ec:	3320      	addeq	r3, #32
 80002ee:	f1a3 030b 	sub.w	r3, r3, #11
 80002f2:	f1b3 0220 	subs.w	r2, r3, #32
 80002f6:	da0c      	bge.n	8000312 <__adddf3+0x16e>
 80002f8:	320c      	adds	r2, #12
 80002fa:	dd08      	ble.n	800030e <__adddf3+0x16a>
 80002fc:	f102 0c14 	add.w	ip, r2, #20
 8000300:	f1c2 020c 	rsb	r2, r2, #12
 8000304:	fa01 f00c 	lsl.w	r0, r1, ip
 8000308:	fa21 f102 	lsr.w	r1, r1, r2
 800030c:	e00c      	b.n	8000328 <__adddf3+0x184>
 800030e:	f102 0214 	add.w	r2, r2, #20
 8000312:	bfd8      	it	le
 8000314:	f1c2 0c20 	rsble	ip, r2, #32
 8000318:	fa01 f102 	lsl.w	r1, r1, r2
 800031c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000320:	bfdc      	itt	le
 8000322:	ea41 010c 	orrle.w	r1, r1, ip
 8000326:	4090      	lslle	r0, r2
 8000328:	1ae4      	subs	r4, r4, r3
 800032a:	bfa2      	ittt	ge
 800032c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000330:	4329      	orrge	r1, r5
 8000332:	bd30      	popge	{r4, r5, pc}
 8000334:	ea6f 0404 	mvn.w	r4, r4
 8000338:	3c1f      	subs	r4, #31
 800033a:	da1c      	bge.n	8000376 <__adddf3+0x1d2>
 800033c:	340c      	adds	r4, #12
 800033e:	dc0e      	bgt.n	800035e <__adddf3+0x1ba>
 8000340:	f104 0414 	add.w	r4, r4, #20
 8000344:	f1c4 0220 	rsb	r2, r4, #32
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f302 	lsl.w	r3, r1, r2
 8000350:	ea40 0003 	orr.w	r0, r0, r3
 8000354:	fa21 f304 	lsr.w	r3, r1, r4
 8000358:	ea45 0103 	orr.w	r1, r5, r3
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f1c4 040c 	rsb	r4, r4, #12
 8000362:	f1c4 0220 	rsb	r2, r4, #32
 8000366:	fa20 f002 	lsr.w	r0, r0, r2
 800036a:	fa01 f304 	lsl.w	r3, r1, r4
 800036e:	ea40 0003 	orr.w	r0, r0, r3
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	fa21 f004 	lsr.w	r0, r1, r4
 800037a:	4629      	mov	r1, r5
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	f094 0f00 	teq	r4, #0
 8000382:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000386:	bf06      	itte	eq
 8000388:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800038c:	3401      	addeq	r4, #1
 800038e:	3d01      	subne	r5, #1
 8000390:	e74e      	b.n	8000230 <__adddf3+0x8c>
 8000392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000396:	bf18      	it	ne
 8000398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800039c:	d029      	beq.n	80003f2 <__adddf3+0x24e>
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	d005      	beq.n	80003b6 <__adddf3+0x212>
 80003aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ae:	bf04      	itt	eq
 80003b0:	4619      	moveq	r1, r3
 80003b2:	4610      	moveq	r0, r2
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea91 0f03 	teq	r1, r3
 80003ba:	bf1e      	ittt	ne
 80003bc:	2100      	movne	r1, #0
 80003be:	2000      	movne	r0, #0
 80003c0:	bd30      	popne	{r4, r5, pc}
 80003c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c6:	d105      	bne.n	80003d4 <__adddf3+0x230>
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	4149      	adcs	r1, r1
 80003cc:	bf28      	it	cs
 80003ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d8:	bf3c      	itt	cc
 80003da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003de:	bd30      	popcc	{r4, r5, pc}
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf1a      	itte	ne
 80003f8:	4619      	movne	r1, r3
 80003fa:	4610      	movne	r0, r2
 80003fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000400:	bf1c      	itt	ne
 8000402:	460b      	movne	r3, r1
 8000404:	4602      	movne	r2, r0
 8000406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040a:	bf06      	itte	eq
 800040c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000410:	ea91 0f03 	teqeq	r1, r3
 8000414:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	bf00      	nop

0800041c <__aeabi_ui2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f04f 0500 	mov.w	r5, #0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e750      	b.n	80002dc <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_i2d>:
 800043c:	f090 0f00 	teq	r0, #0
 8000440:	bf04      	itt	eq
 8000442:	2100      	moveq	r1, #0
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800044c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000450:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000454:	bf48      	it	mi
 8000456:	4240      	negmi	r0, r0
 8000458:	f04f 0100 	mov.w	r1, #0
 800045c:	e73e      	b.n	80002dc <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_f2d>:
 8000460:	0042      	lsls	r2, r0, #1
 8000462:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000466:	ea4f 0131 	mov.w	r1, r1, rrx
 800046a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046e:	bf1f      	itttt	ne
 8000470:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000478:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800047c:	4770      	bxne	lr
 800047e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000482:	bf08      	it	eq
 8000484:	4770      	bxeq	lr
 8000486:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800048a:	bf04      	itt	eq
 800048c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	e71c      	b.n	80002dc <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_ul2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f04f 0500 	mov.w	r5, #0
 80004b2:	e00a      	b.n	80004ca <__aeabi_l2d+0x16>

080004b4 <__aeabi_l2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004c2:	d502      	bpl.n	80004ca <__aeabi_l2d+0x16>
 80004c4:	4240      	negs	r0, r0
 80004c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d6:	f43f aed8 	beq.w	800028a <__adddf3+0xe6>
 80004da:	f04f 0203 	mov.w	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ea:	bf18      	it	ne
 80004ec:	3203      	addne	r2, #3
 80004ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f2:	f1c2 0320 	rsb	r3, r2, #32
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	fa20 f002 	lsr.w	r0, r0, r2
 80004fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000502:	ea40 000e 	orr.w	r0, r0, lr
 8000506:	fa21 f102 	lsr.w	r1, r1, r2
 800050a:	4414      	add	r4, r2
 800050c:	e6bd      	b.n	800028a <__adddf3+0xe6>
 800050e:	bf00      	nop

08000510 <__aeabi_dmul>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800051a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051e:	bf1d      	ittte	ne
 8000520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000524:	ea94 0f0c 	teqne	r4, ip
 8000528:	ea95 0f0c 	teqne	r5, ip
 800052c:	f000 f8de 	bleq	80006ec <__aeabi_dmul+0x1dc>
 8000530:	442c      	add	r4, r5
 8000532:	ea81 0603 	eor.w	r6, r1, r3
 8000536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800053a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000542:	bf18      	it	ne
 8000544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800054c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000550:	d038      	beq.n	80005c4 <__aeabi_dmul+0xb4>
 8000552:	fba0 ce02 	umull	ip, lr, r0, r2
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000562:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000566:	f04f 0600 	mov.w	r6, #0
 800056a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056e:	f09c 0f00 	teq	ip, #0
 8000572:	bf18      	it	ne
 8000574:	f04e 0e01 	orrne.w	lr, lr, #1
 8000578:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800057c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000580:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000584:	d204      	bcs.n	8000590 <__aeabi_dmul+0x80>
 8000586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800058a:	416d      	adcs	r5, r5
 800058c:	eb46 0606 	adc.w	r6, r6, r6
 8000590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800059c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a8:	bf88      	it	hi
 80005aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ae:	d81e      	bhi.n	80005ee <__aeabi_dmul+0xde>
 80005b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ba:	f150 0000 	adcs.w	r0, r0, #0
 80005be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c8:	ea46 0101 	orr.w	r1, r6, r1
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	ea81 0103 	eor.w	r1, r1, r3
 80005d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d8:	bfc2      	ittt	gt
 80005da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005e2:	bd70      	popgt	{r4, r5, r6, pc}
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f04f 0e00 	mov.w	lr, #0
 80005ec:	3c01      	subs	r4, #1
 80005ee:	f300 80ab 	bgt.w	8000748 <__aeabi_dmul+0x238>
 80005f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f6:	bfde      	ittt	le
 80005f8:	2000      	movle	r0, #0
 80005fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd70      	pople	{r4, r5, r6, pc}
 8000600:	f1c4 0400 	rsb	r4, r4, #0
 8000604:	3c20      	subs	r4, #32
 8000606:	da35      	bge.n	8000674 <__aeabi_dmul+0x164>
 8000608:	340c      	adds	r4, #12
 800060a:	dc1b      	bgt.n	8000644 <__aeabi_dmul+0x134>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f305 	lsl.w	r3, r0, r5
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f205 	lsl.w	r2, r1, r5
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	fa21 f604 	lsr.w	r6, r1, r4
 8000634:	eb42 0106 	adc.w	r1, r2, r6
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 040c 	rsb	r4, r4, #12
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f304 	lsl.w	r3, r0, r4
 8000650:	fa20 f005 	lsr.w	r0, r0, r5
 8000654:	fa01 f204 	lsl.w	r2, r1, r4
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	f141 0100 	adc.w	r1, r1, #0
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f205 	lsl.w	r2, r0, r5
 800067c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000680:	fa20 f304 	lsr.w	r3, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea43 0302 	orr.w	r3, r3, r2
 800068c:	fa21 f004 	lsr.w	r0, r1, r4
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	fa21 f204 	lsr.w	r2, r1, r4
 8000698:	ea20 0002 	bic.w	r0, r0, r2
 800069c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f094 0f00 	teq	r4, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dmul+0x1c2>
 80006b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b6:	0040      	lsls	r0, r0, #1
 80006b8:	eb41 0101 	adc.w	r1, r1, r1
 80006bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3c01      	subeq	r4, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1a6>
 80006c6:	ea41 0106 	orr.w	r1, r1, r6
 80006ca:	f095 0f00 	teq	r5, #0
 80006ce:	bf18      	it	ne
 80006d0:	4770      	bxne	lr
 80006d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	eb43 0303 	adc.w	r3, r3, r3
 80006dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006e0:	bf08      	it	eq
 80006e2:	3d01      	subeq	r5, #1
 80006e4:	d0f7      	beq.n	80006d6 <__aeabi_dmul+0x1c6>
 80006e6:	ea43 0306 	orr.w	r3, r3, r6
 80006ea:	4770      	bx	lr
 80006ec:	ea94 0f0c 	teq	r4, ip
 80006f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f4:	bf18      	it	ne
 80006f6:	ea95 0f0c 	teqne	r5, ip
 80006fa:	d00c      	beq.n	8000716 <__aeabi_dmul+0x206>
 80006fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000700:	bf18      	it	ne
 8000702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000706:	d1d1      	bne.n	80006ac <__aeabi_dmul+0x19c>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800071a:	bf06      	itte	eq
 800071c:	4610      	moveq	r0, r2
 800071e:	4619      	moveq	r1, r3
 8000720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000724:	d019      	beq.n	800075a <__aeabi_dmul+0x24a>
 8000726:	ea94 0f0c 	teq	r4, ip
 800072a:	d102      	bne.n	8000732 <__aeabi_dmul+0x222>
 800072c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000730:	d113      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000732:	ea95 0f0c 	teq	r5, ip
 8000736:	d105      	bne.n	8000744 <__aeabi_dmul+0x234>
 8000738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800073c:	bf1c      	itt	ne
 800073e:	4610      	movne	r0, r2
 8000740:	4619      	movne	r1, r3
 8000742:	d10a      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000762:	bd70      	pop	{r4, r5, r6, pc}

08000764 <__aeabi_ddiv>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800076a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000772:	bf1d      	ittte	ne
 8000774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000778:	ea94 0f0c 	teqne	r4, ip
 800077c:	ea95 0f0c 	teqne	r5, ip
 8000780:	f000 f8a7 	bleq	80008d2 <__aeabi_ddiv+0x16e>
 8000784:	eba4 0405 	sub.w	r4, r4, r5
 8000788:	ea81 0e03 	eor.w	lr, r1, r3
 800078c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000790:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000794:	f000 8088 	beq.w	80008a8 <__aeabi_ddiv+0x144>
 8000798:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800079c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007bc:	429d      	cmp	r5, r3
 80007be:	bf08      	it	eq
 80007c0:	4296      	cmpeq	r6, r2
 80007c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ca:	d202      	bcs.n	80007d2 <__aeabi_ddiv+0x6e>
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	1ab6      	subs	r6, r6, r2
 80007d4:	eb65 0503 	sbc.w	r5, r5, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000840:	ea55 0e06 	orrs.w	lr, r5, r6
 8000844:	d018      	beq.n	8000878 <__aeabi_ddiv+0x114>
 8000846:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800084a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800085a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000862:	d1c0      	bne.n	80007e6 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	d10b      	bne.n	8000882 <__aeabi_ddiv+0x11e>
 800086a:	ea41 0100 	orr.w	r1, r1, r0
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000876:	e7b6      	b.n	80007e6 <__aeabi_ddiv+0x82>
 8000878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800087c:	bf04      	itt	eq
 800087e:	4301      	orreq	r1, r0
 8000880:	2000      	moveq	r0, #0
 8000882:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000886:	bf88      	it	hi
 8000888:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088c:	f63f aeaf 	bhi.w	80005ee <__aeabi_dmul+0xde>
 8000890:	ebb5 0c03 	subs.w	ip, r5, r3
 8000894:	bf04      	itt	eq
 8000896:	ebb6 0c02 	subseq.w	ip, r6, r2
 800089a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089e:	f150 0000 	adcs.w	r0, r0, #0
 80008a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	e690      	b.n	80005ee <__aeabi_dmul+0xde>
 80008cc:	ea45 0e06 	orr.w	lr, r5, r6
 80008d0:	e68d      	b.n	80005ee <__aeabi_dmul+0xde>
 80008d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d6:	ea94 0f0c 	teq	r4, ip
 80008da:	bf08      	it	eq
 80008dc:	ea95 0f0c 	teqeq	r5, ip
 80008e0:	f43f af3b 	beq.w	800075a <__aeabi_dmul+0x24a>
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	d10a      	bne.n	8000900 <__aeabi_ddiv+0x19c>
 80008ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ee:	f47f af34 	bne.w	800075a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	f47f af25 	bne.w	8000744 <__aeabi_dmul+0x234>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e72c      	b.n	800075a <__aeabi_dmul+0x24a>
 8000900:	ea95 0f0c 	teq	r5, ip
 8000904:	d106      	bne.n	8000914 <__aeabi_ddiv+0x1b0>
 8000906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800090a:	f43f aefd 	beq.w	8000708 <__aeabi_dmul+0x1f8>
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	e722      	b.n	800075a <__aeabi_dmul+0x24a>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	f47f aec5 	bne.w	80006ac <__aeabi_dmul+0x19c>
 8000922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000926:	f47f af0d 	bne.w	8000744 <__aeabi_dmul+0x234>
 800092a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092e:	f47f aeeb 	bne.w	8000708 <__aeabi_dmul+0x1f8>
 8000932:	e712      	b.n	800075a <__aeabi_dmul+0x24a>

08000934 <__gedf2>:
 8000934:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000938:	e006      	b.n	8000948 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__ledf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	e002      	b.n	8000948 <__cmpdf2+0x4>
 8000942:	bf00      	nop

08000944 <__cmpdf2>:
 8000944:	f04f 0c01 	mov.w	ip, #1
 8000948:	f84d cd04 	str.w	ip, [sp, #-4]!
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095e:	d01b      	beq.n	8000998 <__cmpdf2+0x54>
 8000960:	b001      	add	sp, #4
 8000962:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000966:	bf0c      	ite	eq
 8000968:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800096c:	ea91 0f03 	teqne	r1, r3
 8000970:	bf02      	ittt	eq
 8000972:	ea90 0f02 	teqeq	r0, r2
 8000976:	2000      	moveq	r0, #0
 8000978:	4770      	bxeq	lr
 800097a:	f110 0f00 	cmn.w	r0, #0
 800097e:	ea91 0f03 	teq	r1, r3
 8000982:	bf58      	it	pl
 8000984:	4299      	cmppl	r1, r3
 8000986:	bf08      	it	eq
 8000988:	4290      	cmpeq	r0, r2
 800098a:	bf2c      	ite	cs
 800098c:	17d8      	asrcs	r0, r3, #31
 800098e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000992:	f040 0001 	orr.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d102      	bne.n	80009a8 <__cmpdf2+0x64>
 80009a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a6:	d107      	bne.n	80009b8 <__cmpdf2+0x74>
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	d1d6      	bne.n	8000960 <__cmpdf2+0x1c>
 80009b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b6:	d0d3      	beq.n	8000960 <__cmpdf2+0x1c>
 80009b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_cdrcmple>:
 80009c0:	4684      	mov	ip, r0
 80009c2:	4610      	mov	r0, r2
 80009c4:	4662      	mov	r2, ip
 80009c6:	468c      	mov	ip, r1
 80009c8:	4619      	mov	r1, r3
 80009ca:	4663      	mov	r3, ip
 80009cc:	e000      	b.n	80009d0 <__aeabi_cdcmpeq>
 80009ce:	bf00      	nop

080009d0 <__aeabi_cdcmpeq>:
 80009d0:	b501      	push	{r0, lr}
 80009d2:	f7ff ffb7 	bl	8000944 <__cmpdf2>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	bf48      	it	mi
 80009da:	f110 0f00 	cmnmi.w	r0, #0
 80009de:	bd01      	pop	{r0, pc}

080009e0 <__aeabi_dcmpeq>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff fff4 	bl	80009d0 <__aeabi_cdcmpeq>
 80009e8:	bf0c      	ite	eq
 80009ea:	2001      	moveq	r0, #1
 80009ec:	2000      	movne	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmplt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffea 	bl	80009d0 <__aeabi_cdcmpeq>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmple>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffe0 	bl	80009d0 <__aeabi_cdcmpeq>
 8000a10:	bf94      	ite	ls
 8000a12:	2001      	movls	r0, #1
 8000a14:	2000      	movhi	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpge>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffce 	bl	80009c0 <__aeabi_cdrcmple>
 8000a24:	bf94      	ite	ls
 8000a26:	2001      	movls	r0, #1
 8000a28:	2000      	movhi	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmpgt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffc4 	bl	80009c0 <__aeabi_cdrcmple>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a98:	f000 b80c 	b.w	8000ab4 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f007 fab6 	bl	8008014 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <deregister_tm_clones>:
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <deregister_tm_clones+0x10>)
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <deregister_tm_clones+0x14>)
 8000abc:	4283      	cmp	r3, r0
 8000abe:	d002      	beq.n	8000ac6 <deregister_tm_clones+0xe>
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <deregister_tm_clones+0x18>)
 8000ac2:	b103      	cbz	r3, 8000ac6 <deregister_tm_clones+0xe>
 8000ac4:	4718      	bx	r3
 8000ac6:	4770      	bx	lr
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	20000060 	.word	0x20000060
 8000ad0:	00000000 	.word	0x00000000

08000ad4 <register_tm_clones>:
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <register_tm_clones+0x18>)
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <register_tm_clones+0x1c>)
 8000ad8:	1a1b      	subs	r3, r3, r0
 8000ada:	0fd9      	lsrs	r1, r3, #31
 8000adc:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000ae0:	1049      	asrs	r1, r1, #1
 8000ae2:	d002      	beq.n	8000aea <register_tm_clones+0x16>
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <register_tm_clones+0x20>)
 8000ae6:	b103      	cbz	r3, 8000aea <register_tm_clones+0x16>
 8000ae8:	4718      	bx	r3
 8000aea:	4770      	bx	lr
 8000aec:	20000060 	.word	0x20000060
 8000af0:	20000060 	.word	0x20000060
 8000af4:	00000000 	.word	0x00000000

08000af8 <__do_global_dtors_aux>:
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4c06      	ldr	r4, [pc, #24]	; (8000b14 <__do_global_dtors_aux+0x1c>)
 8000afc:	7823      	ldrb	r3, [r4, #0]
 8000afe:	b943      	cbnz	r3, 8000b12 <__do_global_dtors_aux+0x1a>
 8000b00:	f7ff ffda 	bl	8000ab8 <deregister_tm_clones>
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__do_global_dtors_aux+0x20>)
 8000b06:	b113      	cbz	r3, 8000b0e <__do_global_dtors_aux+0x16>
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <__do_global_dtors_aux+0x24>)
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	2301      	movs	r3, #1
 8000b10:	7023      	strb	r3, [r4, #0]
 8000b12:	bd10      	pop	{r4, pc}
 8000b14:	20000060 	.word	0x20000060
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	080082dc 	.word	0x080082dc

08000b20 <frame_dummy>:
 8000b20:	b508      	push	{r3, lr}
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <frame_dummy+0x18>)
 8000b24:	b11b      	cbz	r3, 8000b2e <frame_dummy+0xe>
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <frame_dummy+0x1c>)
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <frame_dummy+0x20>)
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b32:	f7ff bfcf 	b.w	8000ad4 <register_tm_clones>
 8000b36:	bf00      	nop
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	20000064 	.word	0x20000064
 8000b40:	080082dc 	.word	0x080082dc

08000b44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <MX_ADC1_Init+0x9c>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <MX_ADC1_Init+0xa0>)
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba6:	f001 fec9 	bl	800293c <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f001 fb34 	bl	800221c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000bc6:	f002 f925 	bl	8002e14 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f001 fb24 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000007c 	.word	0x2000007c
 8000be0:	40012000 	.word	0x40012000
 8000be4:	0f000001 	.word	0x0f000001

08000be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_ADC_MspInit+0xfc>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d168      	bne.n	8000cdc <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_ADC_MspInit+0x104>)
 8000c56:	f003 f849 	bl	8003cec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_ADC_MspInit+0x10c>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cb2:	f002 fc7b 	bl	80035ac <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000cbc:	f001 faae 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f002 fc34 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f002 fc4d 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200000c4 	.word	0x200000c4
 8000cf4:	40026470 	.word	0x40026470

08000cf8 <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	2118      	movs	r1, #24
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f007 f8a8 	bl	8007e54 <calloc>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <AS5600_init+0x16>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7b9b      	ldrb	r3, [r3, #14]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <AS5600_init+0x24>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7bdb      	ldrb	r3, [r3, #15]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <AS5600_init+0x32>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7c1b      	ldrb	r3, [r3, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <AS5600_init+0x40>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7c5b      	ldrb	r3, [r3, #17]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <AS5600_init+0x4e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7c9b      	ldrb	r3, [r3, #18]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <AS5600_init+0x5c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7cdb      	ldrb	r3, [r3, #19]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <AS5600_init+0x6a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7d1b      	ldrb	r3, [r3, #20]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <AS5600_init+0x78>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7d5b      	ldrb	r3, [r3, #21]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <AS5600_init+0x86>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7bdb      	ldrb	r3, [r3, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f86a 	bl	8000e70 <AS5600_set_low_power_mode>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <AS5600_init+0x9c>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e05f      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7c1b      	ldrb	r3, [r3, #16]
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8b3 	bl	8000f18 <AS5600_set_hysteresis>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <AS5600_init+0xb2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e054      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7c59      	ldrb	r1, [r3, #17]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c9b      	ldrb	r3, [r3, #18]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f8fa 	bl	8000fc0 <AS5600_set_output_mode>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <AS5600_init+0xcc>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e047      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7cdb      	ldrb	r3, [r3, #19]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 f983 	bl	80010e8 <AS5600_set_slow_filter>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <AS5600_init+0xe2>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e03c      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f9cc 	bl	8001190 <AS5600_set_fast_filter_threshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <AS5600_init+0xf8>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e031      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7d5b      	ldrb	r3, [r3, #21]
 8000e06:	4619      	mov	r1, r3
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fa61 	bl	80012d0 <AS5600_set_watchdog_timer>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <AS5600_init+0x10e>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e026      	b.n	8000e66 <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fa80 	bl	800131e <AS5600_write_config_register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <AS5600_init+0x11e>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e01e      	b.n	8000e66 <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000e2c:	f107 030f 	add.w	r3, r7, #15
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fab2 	bl	800139c <AS5600_get_magnet_status>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <AS5600_init+0x138>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e011      	b.n	8000e66 <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d009      	beq.n	8000e60 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <AS5600_init+0x15a>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <AS5600_init+0x15c>
	return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d83f      	bhi.n	8000f04 <AS5600_set_low_power_mode+0x94>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <AS5600_set_low_power_mode+0x1c>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000eaf 	.word	0x08000eaf
 8000e94:	08000ed1 	.word	0x08000ed1
 8000e98:	08000ef3 	.word	0x08000ef3
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7ddb      	ldrb	r3, [r3, #23]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	75da      	strb	r2, [r3, #23]
		break;
 8000eac:	e02c      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7ddb      	ldrb	r3, [r3, #23]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7ddb      	ldrb	r3, [r3, #23]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	75da      	strb	r2, [r3, #23]
	break;
 8000ece:	e01b      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7ddb      	ldrb	r3, [r3, #23]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7ddb      	ldrb	r3, [r3, #23]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	75da      	strb	r2, [r3, #23]
		break;
 8000ef0:	e00a      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7ddb      	ldrb	r3, [r3, #23]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f043 0303 	orr.w	r3, r3, #3
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	75da      	strb	r2, [r3, #23]
		break;
 8000f02:	e001      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d83f      	bhi.n	8000fac <AS5600_set_hysteresis+0x94>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <AS5600_set_hysteresis+0x1c>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f57 	.word	0x08000f57
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000f9b 	.word	0x08000f9b
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7ddb      	ldrb	r3, [r3, #23]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f023 030c 	bic.w	r3, r3, #12
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	75da      	strb	r2, [r3, #23]
		break;
 8000f54:	e02c      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7ddb      	ldrb	r3, [r3, #23]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7ddb      	ldrb	r3, [r3, #23]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f023 0308 	bic.w	r3, r3, #8
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	75da      	strb	r2, [r3, #23]
		break;
 8000f76:	e01b      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7ddb      	ldrb	r3, [r3, #23]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7ddb      	ldrb	r3, [r3, #23]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	75da      	strb	r2, [r3, #23]
		break;
 8000f98:	e00a      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7ddb      	ldrb	r3, [r3, #23]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f043 030c 	orr.w	r3, r3, #12
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	75da      	strb	r2, [r3, #23]
		break;
 8000faa:	e001      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d020      	beq.n	800101c <AS5600_set_output_mode+0x5c>
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	dc31      	bgt.n	8001042 <AS5600_set_output_mode+0x82>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d002      	beq.n	8000fe8 <AS5600_set_output_mode+0x28>
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d009      	beq.n	8000ffa <AS5600_set_output_mode+0x3a>
 8000fe6:	e02c      	b.n	8001042 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7ddb      	ldrb	r3, [r3, #23]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	75da      	strb	r2, [r3, #23]
		break;
 8000ff8:	e025      	b.n	8001046 <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7ddb      	ldrb	r3, [r3, #23]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7ddb      	ldrb	r3, [r3, #23]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f023 0320 	bic.w	r3, r3, #32
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	75da      	strb	r2, [r3, #23]
		break;
 800101a:	e014      	b.n	8001046 <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7ddb      	ldrb	r3, [r3, #23]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7ddb      	ldrb	r3, [r3, #23]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8001042:	2301      	movs	r3, #1
 8001044:	e049      	b.n	80010da <AS5600_set_output_mode+0x11a>
	}
	if (pwm) {
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d045      	beq.n	80010d8 <AS5600_set_output_mode+0x118>
		switch (frequency) {
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	3b01      	subs	r3, #1
 8001050:	2b03      	cmp	r3, #3
 8001052:	d83f      	bhi.n	80010d4 <AS5600_set_output_mode+0x114>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <AS5600_set_output_mode+0x9c>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800106d 	.word	0x0800106d
 8001060:	0800107f 	.word	0x0800107f
 8001064:	080010a1 	.word	0x080010a1
 8001068:	080010c3 	.word	0x080010c3
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7ddb      	ldrb	r3, [r3, #23]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	75da      	strb	r2, [r3, #23]
			break;
 800107c:	e02c      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7ddb      	ldrb	r3, [r3, #23]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7ddb      	ldrb	r3, [r3, #23]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	75da      	strb	r2, [r3, #23]
			break;
 800109e:	e01b      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7ddb      	ldrb	r3, [r3, #23]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	75da      	strb	r2, [r3, #23]
			break;
 80010c0:	e00a      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7ddb      	ldrb	r3, [r3, #23]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	75da      	strb	r2, [r3, #23]
			break;
 80010d2:	e001      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		default: return HAL_ERROR;	// invalid PWM frequency
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <AS5600_set_output_mode+0x11a>
		}
	}
	return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d83f      	bhi.n	800117c <AS5600_set_slow_filter+0x94>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <AS5600_set_slow_filter+0x1c>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	08001127 	.word	0x08001127
 800110c:	08001149 	.word	0x08001149
 8001110:	0800116b 	.word	0x0800116b
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7d9b      	ldrb	r3, [r3, #22]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	b2da      	uxtb	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	759a      	strb	r2, [r3, #22]
		break;
 8001124:	e02c      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7d9b      	ldrb	r3, [r3, #22]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7d9b      	ldrb	r3, [r3, #22]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f023 0302 	bic.w	r3, r3, #2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	759a      	strb	r2, [r3, #22]
		break;
 8001146:	e01b      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d9b      	ldrb	r3, [r3, #22]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7d9b      	ldrb	r3, [r3, #22]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	759a      	strb	r2, [r3, #22]
		break;
 8001168:	e00a      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7d9b      	ldrb	r3, [r3, #22]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f043 0303 	orr.w	r3, r3, #3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	759a      	strb	r2, [r3, #22]
		break;
 800117a:	e001      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	3b01      	subs	r3, #1
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	f200 808b 	bhi.w	80012bc <AS5600_set_fast_filter_threshold+0x12c>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <AS5600_set_fast_filter_threshold+0x1c>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011cd 	.word	0x080011cd
 80011b0:	080011df 	.word	0x080011df
 80011b4:	08001201 	.word	0x08001201
 80011b8:	08001223 	.word	0x08001223
 80011bc:	08001245 	.word	0x08001245
 80011c0:	08001267 	.word	0x08001267
 80011c4:	08001289 	.word	0x08001289
 80011c8:	080012ab 	.word	0x080012ab
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7d9b      	ldrb	r3, [r3, #22]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f023 031c 	bic.w	r3, r3, #28
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	759a      	strb	r2, [r3, #22]
		break;
 80011dc:	e070      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7d9b      	ldrb	r3, [r3, #22]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f023 0318 	bic.w	r3, r3, #24
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7d9b      	ldrb	r3, [r3, #22]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	759a      	strb	r2, [r3, #22]
		break;
 80011fe:	e05f      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7d9b      	ldrb	r3, [r3, #22]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f023 0314 	bic.w	r3, r3, #20
 800120a:	b2da      	uxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7d9b      	ldrb	r3, [r3, #22]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	759a      	strb	r2, [r3, #22]
		break;
 8001220:	e04e      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7d9b      	ldrb	r3, [r3, #22]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f023 0310 	bic.w	r3, r3, #16
 800122c:	b2da      	uxtb	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d9b      	ldrb	r3, [r3, #22]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 030c 	orr.w	r3, r3, #12
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	759a      	strb	r2, [r3, #22]
		break;
 8001242:	e03d      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7d9b      	ldrb	r3, [r3, #22]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f023 030c 	bic.w	r3, r3, #12
 800124e:	b2da      	uxtb	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7d9b      	ldrb	r3, [r3, #22]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	759a      	strb	r2, [r3, #22]
		break;
 8001264:	e02c      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7d9b      	ldrb	r3, [r3, #22]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f023 0308 	bic.w	r3, r3, #8
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7d9b      	ldrb	r3, [r3, #22]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0314 	orr.w	r3, r3, #20
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	759a      	strb	r2, [r3, #22]
		break;
 8001286:	e01b      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7d9b      	ldrb	r3, [r3, #22]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7d9b      	ldrb	r3, [r3, #22]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f043 0318 	orr.w	r3, r3, #24
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	759a      	strb	r2, [r3, #22]
		break;
 80012a8:	e00a      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 031c 	orr.w	r3, r3, #28
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	759a      	strb	r2, [r3, #22]
		break;
 80012ba:	e001      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d002      	beq.n	80012e8 <AS5600_set_watchdog_timer+0x18>
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d009      	beq.n	80012fa <AS5600_set_watchdog_timer+0x2a>
 80012e6:	e011      	b.n	800130c <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7d9b      	ldrb	r3, [r3, #22]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	759a      	strb	r2, [r3, #22]
		break;
 80012f8:	e00a      	b.n	8001310 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7d9b      	ldrb	r3, [r3, #22]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	759a      	strb	r2, [r3, #22]
		break;
 800130a:	e001      	b.n	8001310 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af04      	add	r7, sp, #16
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3316      	adds	r3, #22
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	9202      	str	r2, [sp, #8]
 8001334:	2202      	movs	r2, #2
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2207      	movs	r2, #7
 800133e:	216c      	movs	r1, #108	; 0x6c
 8001340:	f002 ffb6 	bl	80042b0 <HAL_I2C_Mem_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b088      	sub	sp, #32
 8001352:	af04      	add	r7, sp, #16
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 8001358:	2300      	movs	r3, #0
 800135a:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2302      	movs	r3, #2
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	220e      	movs	r2, #14
 8001374:	216c      	movs	r1, #108	; 0x6c
 8001376:	f003 f895 	bl	80044a4 <HAL_I2C_Mem_Read>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	801a      	strh	r2, [r3, #0]
	return status;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	220b      	movs	r2, #11
 80013bc:	216c      	movs	r1, #108	; 0x6c
 80013be:	f003 f871 	bl	80044a4 <HAL_I2C_Mem_Read>
 80013c2:	4603      	mov	r3, r0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_DMA_Init+0x5c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_DMA_Init+0x5c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_DMA_Init+0x5c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2038      	movs	r0, #56	; 0x38
 80013f4:	f002 f8a3 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f8:	2038      	movs	r0, #56	; 0x38
 80013fa:	f002 f8bc 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	203b      	movs	r0, #59	; 0x3b
 8001404:	f002 f89b 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001408:	203b      	movs	r0, #59	; 0x3b
 800140a:	f002 f8b4 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	203c      	movs	r0, #60	; 0x3c
 8001414:	f002 f893 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001418:	203c      	movs	r0, #60	; 0x3c
 800141a:	f002 f8ac 	bl	8003576 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <MX_GPIO_Init+0x160>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a50      	ldr	r2, [pc, #320]	; (800158c <MX_GPIO_Init+0x160>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <MX_GPIO_Init+0x160>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <MX_GPIO_Init+0x160>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a49      	ldr	r2, [pc, #292]	; (800158c <MX_GPIO_Init+0x160>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <MX_GPIO_Init+0x160>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <MX_GPIO_Init+0x160>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a42      	ldr	r2, [pc, #264]	; (800158c <MX_GPIO_Init+0x160>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <MX_GPIO_Init+0x160>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_PIN_Pin|STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7141 	mov.w	r1, #772	; 0x304
 800149c:	483c      	ldr	r0, [pc, #240]	; (8001590 <MX_GPIO_Init+0x164>)
 800149e:	f002 fda9 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	483a      	ldr	r0, [pc, #232]	; (8001594 <MX_GPIO_Init+0x168>)
 80014aa:	f002 fda3 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f24e 0120 	movw	r1, #57376	; 0xe020
 80014b4:	4837      	ldr	r0, [pc, #220]	; (8001594 <MX_GPIO_Init+0x168>)
 80014b6:	f002 fd9d 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_PIN_Pin;
 80014ba:	2304      	movs	r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_PIN_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	482f      	ldr	r0, [pc, #188]	; (8001590 <MX_GPIO_Init+0x164>)
 80014d2:	f002 fc0b 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 80014d6:	2308      	movs	r3, #8
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4829      	ldr	r0, [pc, #164]	; (8001590 <MX_GPIO_Init+0x164>)
 80014ec:	f002 fbfe 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 80014f0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014f6:	2311      	movs	r3, #17
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4822      	ldr	r0, [pc, #136]	; (8001594 <MX_GPIO_Init+0x168>)
 800150a:	f002 fbef 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001514:	2311      	movs	r3, #17
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	481b      	ldr	r0, [pc, #108]	; (8001594 <MX_GPIO_Init+0x168>)
 8001528:	f002 fbe0 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 800152c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001532:	2311      	movs	r3, #17
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_GPIO_Init+0x168>)
 8001546:	f002 fbd1 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001550:	2311      	movs	r3, #17
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <MX_GPIO_Init+0x164>)
 8001564:	f002 fbc2 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8001568:	2320      	movs	r3, #32
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800156c:	2311      	movs	r3, #17
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_GPIO_Init+0x168>)
 8001580:	f002 fbb4 	bl	8003cec <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400

08001598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C1_Init+0x50>)
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <MX_I2C1_Init+0x54>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_I2C1_Init+0x58>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015d6:	f002 fd27 	bl	8004028 <HAL_I2C_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 fe1c 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000124 	.word	0x20000124
 80015ec:	40005400 	.word	0x40005400
 80015f0:	000186a0 	.word	0x000186a0

080015f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_I2C_MspInit+0xa4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d13b      	bne.n	800168e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_I2C_MspInit+0xa8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4814      	ldr	r0, [pc, #80]	; (80016a0 <HAL_I2C_MspInit+0xac>)
 800164e:	f002 fb4d 	bl	8003cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_I2C_MspInit+0xa8>)
 800165c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201f      	movs	r0, #31
 8001674:	f001 ff63 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001678:	201f      	movs	r0, #31
 800167a:	f001 ff7c 	bl	8003576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2020      	movs	r0, #32
 8001684:	f001 ff5b 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001688:	2020      	movs	r0, #32
 800168a:	f001 ff74 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40005400 	.word	0x40005400
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020400 	.word	0x40020400

080016a4 <delay_us>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t n) { TIM2->CNT = 0; while(TIM2->CNT < n); }
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
 80016b4:	bf00      	nop
 80016b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8f9      	bhi.n	80016b6 <delay_us+0x12>
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <set_motor_setting+0x84>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	491d      	ldr	r1, [pc, #116]	; (8001754 <set_motor_setting+0x84>)
 80016de:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 80016e2:	4013      	ands	r3, r2
 80016e4:	614b      	str	r3, [r1, #20]
	switch(instruction->settings.micro_step) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d018      	beq.n	8001726 <set_motor_setting+0x56>
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	dc03      	bgt.n	8001700 <set_motor_setting+0x30>
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d008      	beq.n	800170e <set_motor_setting+0x3e>
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d00d      	beq.n	800171c <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <set_motor_setting+0x84>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4a13      	ldr	r2, [pc, #76]	; (8001754 <set_motor_setting+0x84>)
 8001706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170a:	6153      	str	r3, [r2, #20]
 800170c:	e012      	b.n	8001734 <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <set_motor_setting+0x84>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <set_motor_setting+0x84>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	e00b      	b.n	8001734 <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <set_motor_setting+0x84>)
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <set_motor_setting+0x84>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	6153      	str	r3, [r2, #20]
 8001724:	e006      	b.n	8001734 <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <set_motor_setting+0x84>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <set_motor_setting+0x84>)
 800172c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->settings.spread_mode);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7b1b      	ldrb	r3, [r3, #12]
 8001738:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <set_motor_setting+0x88>)
 8001746:	f002 fc55 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	00000000 	.word	0x00000000

08001760 <euler_method>:
void euler_method() {  // typical execution time ~45 us
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	af00      	add	r7, sp, #0
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 8001766:	4b38      	ldr	r3, [pc, #224]	; (8001848 <euler_method+0xe8>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe56 	bl	800041c <__aeabi_ui2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	a132      	add	r1, pc, #200	; (adr r1, 8001840 <euler_method+0xe0>)
 8001776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800177a:	f7fe fff3 	bl	8000764 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <euler_method+0xec>)
 800178c:	f7fe fd0a 	bl	80001a4 <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	492c      	ldr	r1, [pc, #176]	; (800184c <euler_method+0xec>)
 800179a:	f7fe ffe3 	bl	8000764 <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4614      	mov	r4, r2
 80017a4:	461d      	mov	r5, r3
	AS5600_pos_f64 = (AS5600_analog * alpha) + ((1 - alpha) * AS5600_pos_f64);
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <euler_method+0xf0>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe45 	bl	800043c <__aeabi_i2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fea9 	bl	8000510 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4690      	mov	r8, r2
 80017c4:	4699      	mov	r9, r3
 80017c6:	4622      	mov	r2, r4
 80017c8:	462b      	mov	r3, r5
 80017ca:	f04f 0000 	mov.w	r0, #0
 80017ce:	491f      	ldr	r1, [pc, #124]	; (800184c <euler_method+0xec>)
 80017d0:	f7fe fce6 	bl	80001a0 <__aeabi_dsub>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <euler_method+0xf4>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fe95 	bl	8000510 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4640      	mov	r0, r8
 80017ec:	4649      	mov	r1, r9
 80017ee:	f7fe fcd9 	bl	80001a4 <__adddf3>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4917      	ldr	r1, [pc, #92]	; (8001854 <euler_method+0xf4>)
 80017f8:	e9c1 2300 	strd	r2, r3, [r1]
	AS5600_delta_pos = (uint16_t)AS5600_pos_f64 - AS5600_pos;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <euler_method+0xf4>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f91d 	bl	8000a44 <__aeabi_d2uiz>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <euler_method+0xf8>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	b21a      	sxth	r2, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <euler_method+0xfc>)
 800181a:	801a      	strh	r2, [r3, #0]
	AS5600_pos = (uint16_t)AS5600_pos_f64;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <euler_method+0xf4>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff f90d 	bl	8000a44 <__aeabi_d2uiz>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <euler_method+0xf8>)
 8001830:	801a      	strh	r2, [r3, #0]
	TIM5->CNT = 0;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <euler_method+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001838:	bf00      	nop
 800183a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800183e:	bf00      	nop
 8001840:	66666666 	.word	0x66666666
 8001844:	40026666 	.word	0x40026666
 8001848:	40000c00 	.word	0x40000c00
 800184c:	3ff00000 	.word	0x3ff00000
 8001850:	2000018c 	.word	0x2000018c
 8001854:	20000190 	.word	0x20000190
 8001858:	20000198 	.word	0x20000198
 800185c:	2000019a 	.word	0x2000019a

08001860 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001864:	b08a      	sub	sp, #40	; 0x28
 8001866:	af00      	add	r7, sp, #0
 8001868:	6278      	str	r0, [r7, #36]	; 0x24
	if (htim != &htim10) { return; }
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	4bc9      	ldr	r3, [pc, #804]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800186e:	429a      	cmp	r2, r3
 8001870:	f040 8399 	bne.w	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x746>
	//if (pre_euler_func) { (*pre_euler_func)(); }
	euler_method();  // update AS5600_pos, AS5600_delta_pos using the selected mode
 8001874:	f7ff ff74 	bl	8001760 <euler_method>
	target_delta = target - AS5600_pos;
 8001878:	4bc7      	ldr	r3, [pc, #796]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	4bc7      	ldr	r3, [pc, #796]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	b21b      	sxth	r3, r3
 8001886:	4ac6      	ldr	r2, [pc, #792]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001888:	8013      	strh	r3, [r2, #0]
	target_delta = ABS(target_delta) < ABS(target_delta - 4096) ? target_delta : target_delta - 4096;
 800188a:	4bc5      	ldr	r3, [pc, #788]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	dc2a      	bgt.n	80018ea <HAL_TIM_PeriodElapsedCallback+0x8a>
 8001894:	4bc2      	ldr	r3, [pc, #776]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	425a      	negs	r2, r3
 800189c:	4bc0      	ldr	r3, [pc, #768]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800189e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a6:	bfcc      	ite	gt
 80018a8:	2301      	movgt	r3, #1
 80018aa:	2300      	movle	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	429a      	cmp	r2, r3
 80018b0:	da08      	bge.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x64>
 80018b2:	4bbb      	ldr	r3, [pc, #748]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	e015      	b.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x90>
 80018c4:	4bb6      	ldr	r3, [pc, #728]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ce:	d108      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x82>
 80018d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b21b      	sxth	r3, r3
 80018e0:	e006      	b.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x90>
 80018e2:	4baf      	ldr	r3, [pc, #700]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e8:	e002      	b.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x90>
 80018ea:	4bad      	ldr	r3, [pc, #692]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	4aab      	ldr	r2, [pc, #684]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018f2:	8013      	strh	r3, [r2, #0]
	// TODO: add defining rotation dir with SPI (this is obviously implicated with the previous TODO)
	// TODO: re-do: ease-in ease-out function
	// TODO: delete / re-do: pathfinding code
	// TODO: tune interrupt timing

	if (target_delta != 0) {
 80018f4:	4baa      	ldr	r3, [pc, #680]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 834b 	beq.w	8001f96 <HAL_TIM_PeriodElapsedCallback+0x736>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001900:	4ba7      	ldr	r3, [pc, #668]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	b29b      	uxth	r3, r3
 8001908:	0bdb      	lsrs	r3, r3, #15
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	48a4      	ldr	r0, [pc, #656]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001914:	f002 fb6e 	bl	8003ff4 <HAL_GPIO_WritePin>
		step_gain = MIN(ABS((double)target_delta / 1024), MIN(ABS(((double)target_delta + 1024) / 1024), ABS(((double)target_delta - 1024) / 1024)));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001918:	4ba1      	ldr	r3, [pc, #644]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd8c 	bl	800043c <__aeabi_i2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b9f      	ldr	r3, [pc, #636]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800192a:	f7fe ff1b 	bl	8000764 <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	f7ff f877 	bl	8000a30 <__aeabi_dcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00f      	beq.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x108>
 8001948:	4b95      	ldr	r3, [pc, #596]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fd74 	bl	800043c <__aeabi_i2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b93      	ldr	r3, [pc, #588]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800195a:	f7fe ff03 	bl	8000764 <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001966:	e010      	b.n	800198a <HAL_TIM_PeriodElapsedCallback+0x12a>
 8001968:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800196a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd64 	bl	800043c <__aeabi_i2d>
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800197a:	f7fe fef3 	bl	8000764 <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	61ba      	str	r2, [r7, #24]
 8001984:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fd53 	bl	800043c <__aeabi_i2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b83      	ldr	r3, [pc, #524]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800199c:	f7fe fc02 	bl	80001a4 <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b7e      	ldr	r3, [pc, #504]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80019ae:	f7fe fed9 	bl	8000764 <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f7ff f835 	bl	8000a30 <__aeabi_dcmpgt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d018      	beq.n	80019fe <HAL_TIM_PeriodElapsedCallback+0x19e>
 80019cc:	4b74      	ldr	r3, [pc, #464]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd32 	bl	800043c <__aeabi_i2d>
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80019de:	f7fe fbe1 	bl	80001a4 <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b6e      	ldr	r3, [pc, #440]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80019f0:	f7fe feb8 	bl	8000764 <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80019fc:	e019      	b.n	8001a32 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 80019fe:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd19 	bl	800043c <__aeabi_i2d>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a10:	f7fe fbc8 	bl	80001a4 <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a22:	f7fe fe9f 	bl	8000764 <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	613a      	str	r2, [r7, #16]
 8001a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fcff 	bl	800043c <__aeabi_i2d>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b59      	ldr	r3, [pc, #356]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a44:	f7fe fbac 	bl	80001a0 <__aeabi_dsub>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a56:	f7fe fe85 	bl	8000764 <__aeabi_ddiv>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f7fe ffe1 	bl	8000a30 <__aeabi_dcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x246>
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fcde 	bl	800043c <__aeabi_i2d>
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a86:	f7fe fb8b 	bl	80001a0 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a98:	f7fe fe64 	bl	8000764 <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4692      	mov	sl, r2
 8001aa2:	469b      	mov	fp, r3
 8001aa4:	e018      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x278>
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fcc5 	bl	800043c <__aeabi_i2d>
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001ab8:	f7fe fb72 	bl	80001a0 <__aeabi_dsub>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001aca:	f7fe fe4b 	bl	8000764 <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001ad8:	4652      	mov	r2, sl
 8001ada:	465b      	mov	r3, fp
 8001adc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae0:	f7fe ff88 	bl	80009f4 <__aeabi_dcmplt>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d060      	beq.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x34c>
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fca3 	bl	800043c <__aeabi_i2d>
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001afc:	f7fe fb52 	bl	80001a4 <__adddf3>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b0e:	f7fe fe29 	bl	8000764 <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f7fe ff85 	bl	8000a30 <__aeabi_dcmpgt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d018      	beq.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x2fe>
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fc82 	bl	800043c <__aeabi_i2d>
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b3e:	f7fe fb31 	bl	80001a4 <__adddf3>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b50:	f7fe fe08 	bl	8000764 <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4690      	mov	r8, r2
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	e079      	b.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc69 	bl	800043c <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b70:	f7fe fb18 	bl	80001a4 <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b82:	f7fe fdef 	bl	8000764 <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001b90:	e05f      	b.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8001b92:	bf00      	nop
 8001b94:	20000358 	.word	0x20000358
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000198 	.word	0x20000198
 8001ba0:	200001a8 	.word	0x200001a8
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40900000 	.word	0x40900000
 8001bac:	4bcc      	ldr	r3, [pc, #816]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc42 	bl	800043c <__aeabi_i2d>
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4bc9      	ldr	r3, [pc, #804]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001bbe:	f7fe faef 	bl	80001a0 <__aeabi_dsub>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4bc5      	ldr	r3, [pc, #788]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001bd0:	f7fe fdc8 	bl	8000764 <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f7fe ff24 	bl	8000a30 <__aeabi_dcmpgt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d018      	beq.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8001bee:	4bbc      	ldr	r3, [pc, #752]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc21 	bl	800043c <__aeabi_i2d>
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4bb9      	ldr	r3, [pc, #740]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c00:	f7fe face 	bl	80001a0 <__aeabi_dsub>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4bb4      	ldr	r3, [pc, #720]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c12:	f7fe fda7 	bl	8000764 <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4690      	mov	r8, r2
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	e018      	b.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8001c20:	4baf      	ldr	r3, [pc, #700]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc08 	bl	800043c <__aeabi_i2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4bac      	ldr	r3, [pc, #688]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c32:	f7fe fab5 	bl	80001a0 <__aeabi_dsub>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4ba8      	ldr	r3, [pc, #672]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c44:	f7fe fd8e 	bl	8000764 <__aeabi_ddiv>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4690      	mov	r8, r2
 8001c4e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001c52:	4642      	mov	r2, r8
 8001c54:	464b      	mov	r3, r9
 8001c56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5a:	f7fe fecb 	bl	80009f4 <__aeabi_dcmplt>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d038      	beq.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x476>
 8001c64:	4b9e      	ldr	r3, [pc, #632]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fbe6 	bl	800043c <__aeabi_i2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b9b      	ldr	r3, [pc, #620]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c76:	f7fe fd75 	bl	8000764 <__aeabi_ddiv>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	f7fe fed1 	bl	8000a30 <__aeabi_dcmpgt>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00f      	beq.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x454>
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbce 	bl	800043c <__aeabi_i2d>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ca6:	f7fe fd5d 	bl	8000764 <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	e16c      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001cb4:	4b8a      	ldr	r3, [pc, #552]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fbbe 	bl	800043c <__aeabi_i2d>
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b87      	ldr	r3, [pc, #540]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001cc6:	f7fe fd4d 	bl	8000764 <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001cd4:	e15b      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fbad 	bl	800043c <__aeabi_i2d>
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ce8:	f7fe fa5c 	bl	80001a4 <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b7a      	ldr	r3, [pc, #488]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001cfa:	f7fe fd33 	bl	8000764 <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	f7fe fe8f 	bl	8000a30 <__aeabi_dcmpgt>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d018      	beq.n	8001d4a <HAL_TIM_PeriodElapsedCallback+0x4ea>
 8001d18:	4b71      	ldr	r3, [pc, #452]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb8c 	bl	800043c <__aeabi_i2d>
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001d2a:	f7fe fa3b 	bl	80001a4 <__adddf3>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001d3c:	f7fe fd12 	bl	8000764 <__aeabi_ddiv>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001d48:	e019      	b.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x51e>
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb73 	bl	800043c <__aeabi_i2d>
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001d5c:	f7fe fa22 	bl	80001a4 <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001d6e:	f7fe fcf9 	bl	8000764 <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	60ba      	str	r2, [r7, #8]
 8001d78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb59 	bl	800043c <__aeabi_i2d>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001d90:	f7fe fa06 	bl	80001a0 <__aeabi_dsub>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001da2:	f7fe fcdf 	bl	8000764 <__aeabi_ddiv>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f7fe fe3b 	bl	8000a30 <__aeabi_dcmpgt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d018      	beq.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x592>
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb38 	bl	800043c <__aeabi_i2d>
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001dd2:	f7fe f9e5 	bl	80001a0 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001de4:	f7fe fcbe 	bl	8000764 <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	e9c7 2300 	strd	r2, r3, [r7]
 8001df0:	e019      	b.n	8001e26 <HAL_TIM_PeriodElapsedCallback+0x5c6>
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb1f 	bl	800043c <__aeabi_i2d>
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e04:	f7fe f9cc 	bl	80001a0 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e16:	f7fe fca5 	bl	8000764 <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	603a      	str	r2, [r7, #0]
 8001e20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e2e:	f7fe fde1 	bl	80009f4 <__aeabi_dcmplt>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d057      	beq.n	8001ee8 <HAL_TIM_PeriodElapsedCallback+0x688>
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fafc 	bl	800043c <__aeabi_i2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e4a:	f7fe f9ab 	bl	80001a4 <__adddf3>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e5c:	f7fe fc82 	bl	8000764 <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe fdde 	bl	8000a30 <__aeabi_dcmpgt>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d018      	beq.n	8001eac <HAL_TIM_PeriodElapsedCallback+0x64c>
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fadb 	bl	800043c <__aeabi_i2d>
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e8c:	f7fe f98a 	bl	80001a4 <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e9e:	f7fe fc61 	bl	8000764 <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	e070      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fac2 	bl	800043c <__aeabi_i2d>
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ebe:	f7fe f971 	bl	80001a4 <__adddf3>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ed0:	f7fe fc48 	bl	8000764 <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ede:	e056      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001ee0:	200001a8 	.word	0x200001a8
 8001ee4:	40900000 	.word	0x40900000
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe faa4 	bl	800043c <__aeabi_i2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001efa:	f7fe f951 	bl	80001a0 <__aeabi_dsub>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001f0c:	f7fe fc2a 	bl	8000764 <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	f7fe fd86 	bl	8000a30 <__aeabi_dcmpgt>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d018      	beq.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x6fc>
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fa83 	bl	800043c <__aeabi_i2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001f3c:	f7fe f930 	bl	80001a0 <__aeabi_dsub>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001f4e:	f7fe fc09 	bl	8000764 <__aeabi_ddiv>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4614      	mov	r4, r2
 8001f58:	461d      	mov	r5, r3
 8001f5a:	e018      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa6a 	bl	800043c <__aeabi_i2d>
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001f6e:	f7fe f917 	bl	80001a0 <__aeabi_dsub>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001f80:	f7fe fbf0 	bl	8000764 <__aeabi_ddiv>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4614      	mov	r4, r2
 8001f8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8001f90:	e9c3 4500 	strd	r4, r5, [r3]
		// optimize this or change the function
	} else { step_gain = 0; }
	return;
 8001f94:	e008      	b.n	8001fa8 <HAL_TIM_PeriodElapsedCallback+0x748>
	} else { step_gain = 0; }
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c1 2300 	strd	r2, r3, [r1]
	return;
 8001fa4:	e000      	b.n	8001fa8 <HAL_TIM_PeriodElapsedCallback+0x748>
	if (htim != &htim10) { return; }
 8001fa6:	bf00      	nop
}
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb0:	200001a8 	.word	0x200001a8
 8001fb4:	40900000 	.word	0x40900000
 8001fb8:	200001a0 	.word	0x200001a0
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b598      	push	{r3, r4, r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 8001fc4:	f7fe fe98 	bl	8000cf8 <AS5600_new>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a53      	ldr	r2, [pc, #332]	; (8002118 <main+0x158>)
 8001fcc:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <main+0x158>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a52      	ldr	r2, [pc, #328]	; (800211c <main+0x15c>)
 8001fd4:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <main+0x158>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a51      	ldr	r2, [pc, #324]	; (8002120 <main+0x160>)
 8001fdc:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <main+0x158>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 8001fe6:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <main+0x158>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fee:	f000 fc33 	bl	8002858 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff2:	f000 f8ab 	bl	800214c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff6:	f7ff fa19 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffa:	f7ff f9e7 	bl	80013cc <MX_DMA_Init>
  MX_SPI1_Init();
 8001ffe:	f000 f915 	bl	800222c <MX_SPI1_Init>
  MX_I2C1_Init();
 8002002:	f7ff fac9 	bl	8001598 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002006:	f7fe fd9d 	bl	8000b44 <MX_ADC1_Init>
  MX_TIM2_Init();
 800200a:	f000 faed 	bl	80025e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800200e:	f000 fb37 	bl	8002680 <MX_TIM5_Init>
  MX_TIM10_Init();
 8002012:	f000 fb83 	bl	800271c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);  // start timer_2
 8002016:	4843      	ldr	r0, [pc, #268]	; (8002124 <main+0x164>)
 8002018:	f005 faa8 	bl	800756c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5
 800201c:	4842      	ldr	r0, [pc, #264]	; (8002128 <main+0x168>)
 800201e:	f005 faa5 	bl	800756c <HAL_TIM_Base_Start>
	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 8002022:	bf00      	nop
 8002024:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <main+0x158>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fe6e 	bl	8000d0a <AS5600_init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f7      	bne.n	8002024 <main+0x64>

	// initialize the AS5600 position variable
	AS5600_get_angle(sensor, &AS5600_pos);
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <main+0x158>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	493c      	ldr	r1, [pc, #240]	; (800212c <main+0x16c>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f987 	bl	800134e <AS5600_get_angle>
	AS5600_pos_f64 =	AS5600_pos;  // set the current angle to the most accurate value for the euler method
 8002040:	4b3a      	ldr	r3, [pc, #232]	; (800212c <main+0x16c>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f9e9 	bl	800041c <__aeabi_ui2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4938      	ldr	r1, [pc, #224]	; (8002130 <main+0x170>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]
	AS5600_analog =		AS5600_pos;
 8002054:	4b35      	ldr	r3, [pc, #212]	; (800212c <main+0x16c>)
 8002056:	881a      	ldrh	r2, [r3, #0]
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <main+0x174>)
 800205a:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)&instruction, 16);  // start data receiving loop
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&AS5600_analog, 1);
 800205c:	2201      	movs	r2, #1
 800205e:	4935      	ldr	r1, [pc, #212]	; (8002134 <main+0x174>)
 8002060:	4835      	ldr	r0, [pc, #212]	; (8002138 <main+0x178>)
 8002062:	f000 fdbf 	bl	8002be4 <HAL_ADC_Start_DMA>

	instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up
 8002066:	4b35      	ldr	r3, [pc, #212]	; (800213c <main+0x17c>)
 8002068:	224a      	movs	r2, #74	; 0x4a
 800206a:	609a      	str	r2, [r3, #8]
	instruction.settings.micro_step = 3;
 800206c:	4a33      	ldr	r2, [pc, #204]	; (800213c <main+0x17c>)
 800206e:	7b13      	ldrb	r3, [r2, #12]
 8002070:	f043 0303 	orr.w	r3, r3, #3
 8002074:	7313      	strb	r3, [r2, #12]
	instruction.settings.spread_mode = 0;
 8002076:	4a31      	ldr	r2, [pc, #196]	; (800213c <main+0x17c>)
 8002078:	7b13      	ldrb	r3, [r2, #12]
 800207a:	f36f 0382 	bfc	r3, #2, #1
 800207e:	7313      	strb	r3, [r2, #12]

	// TODO: Add function to the INSTRUCT_GO interrupt pin that will start the stepping function

	set_motor_setting(&instruction);  // TODO: place correctly
 8002080:	482e      	ldr	r0, [pc, #184]	; (800213c <main+0x17c>)
 8002082:	f7ff fb25 	bl	80016d0 <set_motor_setting>

	TIM5->CNT = 0;
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <main+0x180>)
 8002088:	2200      	movs	r2, #0
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt)
 800208c:	482d      	ldr	r0, [pc, #180]	; (8002144 <main+0x184>)
 800208e:	f005 fac7 	bl	8007620 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 0);  // enable stepper (this is never undone)
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	4821      	ldr	r0, [pc, #132]	; (8002120 <main+0x160>)
 800209a:	f001 ffab 	bl	8003ff4 <HAL_GPIO_WritePin>
	while (1) {
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <main+0x188>)
 80020a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a4:	a318      	add	r3, pc, #96	; (adr r3, 8002108 <main+0x148>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe fca3 	bl	80009f4 <__aeabi_dcmplt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d124      	bne.n	80020fe <main+0x13e>
		// dir is set in interrupt
		register uint16_t pulse_delay = MIN_STEPPER_DELAY / step_gain;
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <main+0x188>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	a115      	add	r1, pc, #84	; (adr r1, 8002110 <main+0x150>)
 80020bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020c0:	f7fe fb50 	bl	8000764 <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fcba 	bl	8000a44 <__aeabi_d2uiz>
 80020d0:	4603      	mov	r3, r0
 80020d2:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020da:	4811      	ldr	r0, [pc, #68]	; (8002120 <main+0x160>)
 80020dc:	f001 ff8a 	bl	8003ff4 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 80020e0:	4623      	mov	r3, r4
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fade 	bl	80016a4 <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <main+0x160>)
 80020f0:	f001 ff80 	bl	8003ff4 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 80020f4:	4623      	mov	r3, r4
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fad4 	bl	80016a4 <delay_us>
 80020fc:	e7cf      	b.n	800209e <main+0xde>
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 80020fe:	bf00      	nop
	while (1) {
 8002100:	e7cd      	b.n	800209e <main+0xde>
 8002102:	bf00      	nop
 8002104:	f3af 8000 	nop.w
 8002108:	eb1c432d 	.word	0xeb1c432d
 800210c:	3f1a36e2 	.word	0x3f1a36e2
 8002110:	00000000 	.word	0x00000000
 8002114:	4052c000 	.word	0x4052c000
 8002118:	20000188 	.word	0x20000188
 800211c:	20000124 	.word	0x20000124
 8002120:	40020400 	.word	0x40020400
 8002124:	200002c8 	.word	0x200002c8
 8002128:	20000310 	.word	0x20000310
 800212c:	20000198 	.word	0x20000198
 8002130:	20000190 	.word	0x20000190
 8002134:	2000018c 	.word	0x2000018c
 8002138:	2000007c 	.word	0x2000007c
 800213c:	20000178 	.word	0x20000178
 8002140:	40000c00 	.word	0x40000c00
 8002144:	20000358 	.word	0x20000358
 8002148:	200001a0 	.word	0x200001a0

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b094      	sub	sp, #80	; 0x50
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	2230      	movs	r2, #48	; 0x30
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f005 fe9e 	bl	8007e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <SystemClock_Config+0xc8>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <SystemClock_Config+0xc8>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <SystemClock_Config+0xc8>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <SystemClock_Config+0xcc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a20      	ldr	r2, [pc, #128]	; (8002218 <SystemClock_Config+0xcc>)
 8002196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <SystemClock_Config+0xcc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ac:	2301      	movs	r3, #1
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021b0:	2310      	movs	r3, #16
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b4:	2302      	movs	r3, #2
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021bc:	2310      	movs	r3, #16
 80021be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021c8:	2304      	movs	r3, #4
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021cc:	f107 0320 	add.w	r3, r7, #32
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 fb9b 	bl	800690c <HAL_RCC_OscConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021dc:	f000 f81e 	bl	800221c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e0:	230f      	movs	r3, #15
 80021e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	2103      	movs	r1, #3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 fdfd 	bl	8006dfc <HAL_RCC_ClockConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002208:	f000 f808 	bl	800221c <Error_Handler>
  }
}
 800220c:	bf00      	nop
 800220e:	3750      	adds	r7, #80	; 0x50
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40007000 	.word	0x40007000

0800221c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <MX_SPI1_Init+0x60>)
 8002234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_SPI1_Init+0x5c>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_SPI1_Init+0x5c>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_SPI1_Init+0x5c>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI1_Init+0x5c>)
 800226e:	220a      	movs	r2, #10
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_SPI1_Init+0x5c>)
 8002274:	f004 ff8e 	bl	8007194 <HAL_SPI_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800227e:	f7ff ffcd 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200001ac 	.word	0x200001ac
 800228c:	40013000 	.word	0x40013000

08002290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_SPI_MspInit+0x168>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 809d 	bne.w	80023ee <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	4b50      	ldr	r3, [pc, #320]	; (80023fc <HAL_SPI_MspInit+0x16c>)
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_SPI_MspInit+0x16c>)
 80022be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c2:	6453      	str	r3, [r2, #68]	; 0x44
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <HAL_SPI_MspInit+0x16c>)
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	4b49      	ldr	r3, [pc, #292]	; (80023fc <HAL_SPI_MspInit+0x16c>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4a48      	ldr	r2, [pc, #288]	; (80023fc <HAL_SPI_MspInit+0x16c>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6313      	str	r3, [r2, #48]	; 0x30
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_SPI_MspInit+0x16c>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 80022ec:	23f0      	movs	r3, #240	; 0xf0
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fc:	2305      	movs	r3, #5
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	483e      	ldr	r0, [pc, #248]	; (8002400 <HAL_SPI_MspInit+0x170>)
 8002308:	f001 fcf0 	bl	8003cec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800230c:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_SPI_MspInit+0x174>)
 800230e:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <HAL_SPI_MspInit+0x178>)
 8002310:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002312:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002314:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002318:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <HAL_SPI_MspInit+0x174>)
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002334:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_SPI_MspInit+0x174>)
 800233c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002340:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002348:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_SPI_MspInit+0x174>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002350:	482c      	ldr	r0, [pc, #176]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002352:	f001 f92b 	bl	80035ac <HAL_DMA_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 800235c:	f7ff ff5e 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002364:	649a      	str	r2, [r3, #72]	; 0x48
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_SPI_MspInit+0x174>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_SPI_MspInit+0x17c>)
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_SPI_MspInit+0x180>)
 8002370:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_SPI_MspInit+0x17c>)
 8002374:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002378:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_SPI_MspInit+0x17c>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_SPI_MspInit+0x17c>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_SPI_MspInit+0x17c>)
 8002388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800238c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_SPI_MspInit+0x17c>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_SPI_MspInit+0x17c>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_SPI_MspInit+0x17c>)
 800239c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023ac:	2204      	movs	r2, #4
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023b2:	2203      	movs	r2, #3
 80023b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80023c2:	4812      	ldr	r0, [pc, #72]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023c4:	f001 f8f2 	bl	80035ac <HAL_DMA_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 80023ce:	f7ff ff25 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80023d8:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_SPI_MspInit+0x17c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2023      	movs	r0, #35	; 0x23
 80023e4:	f001 f8ab 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023e8:	2023      	movs	r0, #35	; 0x23
 80023ea:	f001 f8c4 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40013000 	.word	0x40013000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000
 8002404:	20000204 	.word	0x20000204
 8002408:	40026458 	.word	0x40026458
 800240c:	20000264 	.word	0x20000264
 8002410:	40026410 	.word	0x40026410

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_MspInit+0x4c>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <HAL_MspInit+0x4c>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_MspInit+0x4c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_MspInit+0x4c>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_MspInit+0x4c>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_MspInit+0x4c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <NMI_Handler+0x4>

0800246a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <HardFault_Handler+0x4>

08002470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <MemManage_Handler+0x4>

08002476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <BusFault_Handler+0x4>

0800247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <UsageFault_Handler+0x4>

08002482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b0:	f000 fa24 	bl	80028fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <ADC_IRQHandler+0x10>)
 80024be:	f000 fa80 	bl	80029c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000007c 	.word	0x2000007c

080024cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024d2:	f005 f907 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000358 	.word	0x20000358

080024e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <I2C1_EV_IRQHandler+0x10>)
 80024e6:	f002 fa03 	bl	80048f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000124 	.word	0x20000124

080024f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <I2C1_ER_IRQHandler+0x10>)
 80024fa:	f002 fb4c 	bl	8004b96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000124 	.word	0x20000124

08002508 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <SPI1_IRQHandler+0x10>)
 800250e:	f004 fecb 	bl	80072a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200001ac 	.word	0x200001ac

0800251c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA2_Stream0_IRQHandler+0x10>)
 8002522:	f001 f96b 	bl	80037fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000264 	.word	0x20000264

08002530 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <DMA2_Stream3_IRQHandler+0x10>)
 8002536:	f001 f961 	bl	80037fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000204 	.word	0x20000204

08002544 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA2_Stream4_IRQHandler+0x10>)
 800254a:	f001 f957 	bl	80037fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200000c4 	.word	0x200000c4

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f005 fc82 	bl	8007e90 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	200002c4 	.word	0x200002c4
 80025c0:	200004f0 	.word	0x200004f0

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	463b      	mov	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <MX_TIM2_Init+0x94>)
 8002606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800260a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <MX_TIM2_Init+0x94>)
 800260e:	225f      	movs	r2, #95	; 0x5f
 8002610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <MX_TIM2_Init+0x94>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <MX_TIM2_Init+0x94>)
 800261a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800261e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <MX_TIM2_Init+0x94>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <MX_TIM2_Init+0x94>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800262c:	4813      	ldr	r0, [pc, #76]	; (800267c <MX_TIM2_Init+0x94>)
 800262e:	f004 ff4d 	bl	80074cc <HAL_TIM_Base_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002638:	f7ff fdf0 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4619      	mov	r1, r3
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <MX_TIM2_Init+0x94>)
 800264a:	f005 f953 	bl	80078f4 <HAL_TIM_ConfigClockSource>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002654:	f7ff fde2 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002660:	463b      	mov	r3, r7
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_TIM2_Init+0x94>)
 8002666:	f005 fb4f 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002670:	f7ff fdd4 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200002c8 	.word	0x200002c8

08002680 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	463b      	mov	r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_TIM5_Init+0x94>)
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <MX_TIM5_Init+0x98>)
 80026a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <MX_TIM5_Init+0x94>)
 80026a4:	225f      	movs	r2, #95	; 0x5f
 80026a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_TIM5_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_TIM5_Init+0x94>)
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_TIM5_Init+0x94>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_TIM5_Init+0x94>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <MX_TIM5_Init+0x94>)
 80026c4:	f004 ff02 	bl	80074cc <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80026ce:	f7ff fda5 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <MX_TIM5_Init+0x94>)
 80026e0:	f005 f908 	bl	80078f4 <HAL_TIM_ConfigClockSource>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80026ea:	f7ff fd97 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026f6:	463b      	mov	r3, r7
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <MX_TIM5_Init+0x94>)
 80026fc:	f005 fb04 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002706:	f7ff fd89 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000310 	.word	0x20000310
 8002718:	40000c00 	.word	0x40000c00

0800271c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <MX_TIM10_Init+0x3c>)
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <MX_TIM10_Init+0x40>)
 8002724:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_TIM10_Init+0x3c>)
 8002728:	225f      	movs	r2, #95	; 0x5f
 800272a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <MX_TIM10_Init+0x3c>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_TIM10_Init+0x3c>)
 8002734:	2264      	movs	r2, #100	; 0x64
 8002736:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <MX_TIM10_Init+0x3c>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_TIM10_Init+0x3c>)
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <MX_TIM10_Init+0x3c>)
 8002746:	f004 fec1 	bl	80074cc <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002750:	f7ff fd64 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000358 	.word	0x20000358
 800275c:	40014400 	.word	0x40014400

08002760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800278e:	e02e      	b.n	80027ee <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_TIM_Base_MspInit+0x9c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	e01a      	b.n	80027ee <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_TIM_Base_MspInit+0xa0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d115      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_TIM_Base_MspInit+0x98>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2019      	movs	r0, #25
 80027e4:	f000 feab 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027e8:	2019      	movs	r0, #25
 80027ea:	f000 fec4 	bl	8003576 <HAL_NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40000c00 	.word	0x40000c00
 8002800:	40014400 	.word	0x40014400

08002804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800280a:	490e      	ldr	r1, [pc, #56]	; (8002844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002820:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282e:	f7ff fec9 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002832:	f005 faeb 	bl	8007e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002836:	f7ff fbc3 	bl	8001fc0 <main>
  bx  lr    
 800283a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800283c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002848:	08008324 	.word	0x08008324
  ldr r2, =_sbss
 800284c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002850:	200004ec 	.word	0x200004ec

08002854 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <DMA1_Stream0_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_Init+0x40>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_Init+0x40>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_Init+0x40>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_Init+0x40>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 fe51 	bl	8003528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	200f      	movs	r0, #15
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fdc2 	bl	8002414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fe69 	bl	8003592 <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	f000 fe31 	bl	800353e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000004 	.word	0x20000004
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	20000008 	.word	0x20000008

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000000c 	.word	0x2000000c
 8002920:	200003a0 	.word	0x200003a0

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200003a0 	.word	0x200003a0

0800293c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e033      	b.n	80029ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe f944 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002982:	f023 0302 	bic.w	r3, r3, #2
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fb72 	bl	8003078 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
 80029aa:	e001      	b.n	80029b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d049      	beq.n	8002a8c <HAL_ADC_IRQHandler+0xca>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d046      	beq.n	8002a8c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d12b      	bne.n	8002a7c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d127      	bne.n	8002a7c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d119      	bne.n	8002a7c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0220 	bic.w	r2, r2, #32
 8002a56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9a1 	bl	8002dc4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0212 	mvn.w	r2, #18
 8002a8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d057      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x190>
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d054      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d139      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12b      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d124      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11d      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d119      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fc16 	bl	8003374 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 020c 	mvn.w	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x1d6>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10d      	bne.n	8002b98 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f92f 	bl	8002dec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0201 	mvn.w	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_ADC_IRQHandler+0x218>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0220 	mvn.w	r2, #32
 8002bc8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f918 	bl	8002e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0220 	mvn.w	r2, #32
 8002bd8:	601a      	str	r2, [r3, #0]
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_Start_DMA+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0ce      	b.n	8002da0 <HAL_ADC_Start_DMA+0x1bc>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d018      	beq.n	8002c4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c28:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <HAL_ADC_Start_DMA+0x1c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5f      	ldr	r2, [pc, #380]	; (8002dac <HAL_ADC_Start_DMA+0x1c8>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0c9a      	lsrs	r2, r3, #18
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c3c:	e002      	b.n	8002c44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f9      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c58:	d107      	bne.n	8002c6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 8086 	bne.w	8002d86 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	d106      	bne.n	8002cc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f023 0206 	bic.w	r2, r3, #6
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_ADC_Start_DMA+0x1cc>)
 8002cd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4a35      	ldr	r2, [pc, #212]	; (8002db4 <HAL_ADC_Start_DMA+0x1d0>)
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_ADC_Start_DMA+0x1d4>)
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_ADC_Start_DMA+0x1d8>)
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	334c      	adds	r3, #76	; 0x4c
 8002d26:	4619      	mov	r1, r3
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f000 fcec 	bl	8003708 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d129      	bne.n	8002d9e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e020      	b.n	8002d9e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_ADC_Start_DMA+0x1dc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d11b      	bne.n	8002d9e <HAL_ADC_Start_DMA+0x1ba>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d114      	bne.n	8002d9e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	e00b      	b.n	8002d9e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f043 0210 	orr.w	r2, r3, #16
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000004 	.word	0x20000004
 8002dac:	431bde83 	.word	0x431bde83
 8002db0:	40012300 	.word	0x40012300
 8002db4:	08003271 	.word	0x08003271
 8002db8:	0800332b 	.word	0x0800332b
 8002dbc:	08003347 	.word	0x08003347
 8002dc0:	40012000 	.word	0x40012000

08002dc4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1c>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e113      	b.n	8003058 <HAL_ADC_ConfigChannel+0x244>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	d925      	bls.n	8002e8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	3b1e      	subs	r3, #30
 8002e56:	2207      	movs	r2, #7
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	400a      	ands	r2, r1
 8002e64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68d9      	ldr	r1, [r3, #12]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	4603      	mov	r3, r0
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4403      	add	r3, r0
 8002e7e:	3b1e      	subs	r3, #30
 8002e80:	409a      	lsls	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	e022      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6919      	ldr	r1, [r3, #16]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	400a      	ands	r2, r1
 8002eae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6919      	ldr	r1, [r3, #16]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4403      	add	r3, r0
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d824      	bhi.n	8002f24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b05      	subs	r3, #5
 8002eec:	221f      	movs	r2, #31
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	400a      	ands	r2, r1
 8002efa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	3b05      	subs	r3, #5
 8002f16:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34
 8002f22:	e04c      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d824      	bhi.n	8002f76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b23      	subs	r3, #35	; 0x23
 8002f3e:	221f      	movs	r2, #31
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43da      	mvns	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	3b23      	subs	r3, #35	; 0x23
 8002f68:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
 8002f74:	e023      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b41      	subs	r3, #65	; 0x41
 8002f88:	221f      	movs	r2, #31
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	400a      	ands	r2, r1
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b41      	subs	r3, #65	; 0x41
 8002fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_ADC_ConfigChannel+0x250>)
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a28      	ldr	r2, [pc, #160]	; (8003068 <HAL_ADC_ConfigChannel+0x254>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10f      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1d8>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b12      	cmp	r3, #18
 8002fd2:	d10b      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <HAL_ADC_ConfigChannel+0x254>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d12b      	bne.n	800304e <HAL_ADC_ConfigChannel+0x23a>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_ADC_ConfigChannel+0x258>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <HAL_ADC_ConfigChannel+0x1f4>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b11      	cmp	r3, #17
 8003006:	d122      	bne.n	800304e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <HAL_ADC_ConfigChannel+0x258>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d111      	bne.n	800304e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_ADC_ConfigChannel+0x25c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a11      	ldr	r2, [pc, #68]	; (8003074 <HAL_ADC_ConfigChannel+0x260>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	0c9a      	lsrs	r2, r3, #18
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003040:	e002      	b.n	8003048 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3b01      	subs	r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40012300 	.word	0x40012300
 8003068:	40012000 	.word	0x40012000
 800306c:	10000012 	.word	0x10000012
 8003070:	20000004 	.word	0x20000004
 8003074:	431bde83 	.word	0x431bde83

08003078 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003080:	4b79      	ldr	r3, [pc, #484]	; (8003268 <ADC_Init+0x1f0>)
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	021a      	lsls	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	4a58      	ldr	r2, [pc, #352]	; (800326c <ADC_Init+0x1f4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800311e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	e00f      	b.n	8003176 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003174:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0202 	bic.w	r2, r2, #2
 8003184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e1b      	ldrb	r3, [r3, #24]
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01b      	beq.n	80031dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	3b01      	subs	r3, #1
 80031d0:	035a      	lsls	r2, r3, #13
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	e007      	b.n	80031ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	3b01      	subs	r3, #1
 8003208:	051a      	lsls	r2, r3, #20
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800322e:	025a      	lsls	r2, r3, #9
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6899      	ldr	r1, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	029a      	lsls	r2, r3, #10
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40012300 	.word	0x40012300
 800326c:	0f000001 	.word	0x0f000001

08003270 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003286:	2b00      	cmp	r3, #0
 8003288:	d13c      	bne.n	8003304 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d12b      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d127      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d119      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0220 	bic.w	r2, r2, #32
 80032d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff fd61 	bl	8002dc4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003302:	e00e      	b.n	8003322 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fd75 	bl	8002e00 <HAL_ADC_ErrorCallback>
}
 8003316:	e004      	b.n	8003322 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fd4d 	bl	8002dd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff fd4a 	bl	8002e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ba:	4a04      	ldr	r2, [pc, #16]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0b      	blt.n	8003416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4907      	ldr	r1, [pc, #28]	; (8003424 <__NVIC_EnableIRQ+0x38>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	2b00      	cmp	r3, #0
 800343a:	db0a      	blt.n	8003452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	490c      	ldr	r1, [pc, #48]	; (8003474 <__NVIC_SetPriority+0x4c>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	440b      	add	r3, r1
 800344c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003450:	e00a      	b.n	8003468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4908      	ldr	r1, [pc, #32]	; (8003478 <__NVIC_SetPriority+0x50>)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3b04      	subs	r3, #4
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	440b      	add	r3, r1
 8003466:	761a      	strb	r2, [r3, #24]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000e100 	.word	0xe000e100
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f1c3 0307 	rsb	r3, r3, #7
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf28      	it	cs
 800349a:	2304      	movcs	r3, #4
 800349c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d902      	bls.n	80034ac <NVIC_EncodePriority+0x30>
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3b03      	subs	r3, #3
 80034aa:	e000      	b.n	80034ae <NVIC_EncodePriority+0x32>
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	401a      	ands	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	43d9      	mvns	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	4313      	orrs	r3, r2
         );
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f4:	d301      	bcc.n	80034fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00f      	b.n	800351a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <SysTick_Config+0x40>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003502:	210f      	movs	r1, #15
 8003504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003508:	f7ff ff8e 	bl	8003428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <SysTick_Config+0x40>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SysTick_Config+0x40>)
 8003514:	2207      	movs	r2, #7
 8003516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ff29 	bl	8003388 <__NVIC_SetPriorityGrouping>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003550:	f7ff ff3e 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 8003554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7ff ff8e 	bl	800347c <NVIC_EncodePriority>
 8003560:	4602      	mov	r2, r0
 8003562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff5d 	bl	8003428 <__NVIC_SetPriority>
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff31 	bl	80033ec <__NVIC_EnableIRQ>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ffa2 	bl	80034e4 <SysTick_Config>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7ff f9b4 	bl	8002924 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e099      	b.n	80036fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e8:	e00f      	b.n	800360a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ea:	f7ff f99b 	bl	8002924 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d908      	bls.n	800360a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e078      	b.n	80036fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e8      	bne.n	80035ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_DMA_Init+0x158>)
 8003624:	4013      	ands	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b04      	cmp	r3, #4
 8003662:	d107      	bne.n	8003674 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	4313      	orrs	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0307 	bic.w	r3, r3, #7
 800368a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b04      	cmp	r3, #4
 800369c:	d117      	bne.n	80036ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa9f 	bl	8003bf4 <DMA_CheckFifoParam>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ca:	2301      	movs	r3, #1
 80036cc:	e016      	b.n	80036fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa56 	bl	8003b88 <DMA_CalcBaseAndBitshift>
 80036dc:	4603      	mov	r3, r0
 80036de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	223f      	movs	r2, #63	; 0x3f
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	f010803f 	.word	0xf010803f

08003708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_DMA_Start_IT+0x26>
 800372a:	2302      	movs	r3, #2
 800372c:	e040      	b.n	80037b0 <HAL_DMA_Start_IT+0xa8>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d12f      	bne.n	80037a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f9e8 	bl	8003b2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	223f      	movs	r2, #63	; 0x3f
 8003762:	409a      	lsls	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0216 	orr.w	r2, r2, #22
 8003776:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e005      	b.n	80037ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
 80037ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00c      	b.n	80037f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2205      	movs	r2, #5
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003808:	4b8e      	ldr	r3, [pc, #568]	; (8003a44 <HAL_DMA_IRQHandler+0x248>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a8e      	ldr	r2, [pc, #568]	; (8003a48 <HAL_DMA_IRQHandler+0x24c>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2208      	movs	r2, #8
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	2208      	movs	r2, #8
 8003856:	409a      	lsls	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	2201      	movs	r2, #1
 800388c:	409a      	lsls	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f043 0202 	orr.w	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2204      	movs	r2, #4
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	2204      	movs	r2, #4
 80038c2:	409a      	lsls	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	f043 0204 	orr.w	r2, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	2210      	movs	r2, #16
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d043      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03c      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2210      	movs	r2, #16
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d018      	beq.n	800393e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d024      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
 800392a:	e01f      	b.n	800396c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
 800393c:	e016      	b.n	800396c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0208 	bic.w	r2, r2, #8
 800395a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	2220      	movs	r2, #32
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 808f 	beq.w	8003a9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8087 	beq.w	8003a9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2220      	movs	r2, #32
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d136      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0216 	bic.w	r2, r2, #22
 80039b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x1da>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0208 	bic.w	r2, r2, #8
 80039e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	223f      	movs	r2, #63	; 0x3f
 80039ec:	409a      	lsls	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d07e      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
        }
        return;
 8003a12:	e079      	b.n	8003b08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01d      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10d      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d031      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
 8003a40:	e02c      	b.n	8003a9c <HAL_DMA_IRQHandler+0x2a0>
 8003a42:	bf00      	nop
 8003a44:	20000004 	.word	0x20000004
 8003a48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d023      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
 8003a5c:	e01e      	b.n	8003a9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10f      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0210 	bic.w	r2, r2, #16
 8003a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d032      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d307      	bcc.n	8003ae4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f2      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x2cc>
 8003ae2:	e000      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ae4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
 8003b06:	e000      	b.n	8003b0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b08:	bf00      	nop
    }
  }
}
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b1e:	b2db      	uxtb	r3, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d108      	bne.n	8003b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b6a:	e007      	b.n	8003b7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3b10      	subs	r3, #16
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <DMA_CalcBaseAndBitshift+0x64>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d909      	bls.n	8003bca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	1d1a      	adds	r2, r3, #4
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc8:	e007      	b.n	8003bda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	aaaaaaab 	.word	0xaaaaaaab
 8003bf0:	0800830c 	.word	0x0800830c

08003bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d11f      	bne.n	8003c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d856      	bhi.n	8003cc2 <DMA_CheckFifoParam+0xce>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <DMA_CheckFifoParam+0x28>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c2d 	.word	0x08003c2d
 8003c20:	08003c3f 	.word	0x08003c3f
 8003c24:	08003c2d 	.word	0x08003c2d
 8003c28:	08003cc3 	.word	0x08003cc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d046      	beq.n	8003cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3c:	e043      	b.n	8003cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c46:	d140      	bne.n	8003cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4c:	e03d      	b.n	8003cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	d121      	bne.n	8003c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d837      	bhi.n	8003cce <DMA_CheckFifoParam+0xda>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <DMA_CheckFifoParam+0x70>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c7b 	.word	0x08003c7b
 8003c6c:	08003c75 	.word	0x08003c75
 8003c70:	08003c8d 	.word	0x08003c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e030      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d025      	beq.n	8003cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8a:	e022      	b.n	8003cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c94:	d11f      	bne.n	8003cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c9a:	e01c      	b.n	8003cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d903      	bls.n	8003caa <DMA_CheckFifoParam+0xb6>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d003      	beq.n	8003cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ca8:	e018      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
      break;
 8003cae:	e015      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e00b      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e00a      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e008      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e006      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e004      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
      break;
 8003cda:	bf00      	nop
    }
  } 
  
  return status; 
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e159      	b.n	8003fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d08:	2201      	movs	r2, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	f040 8148 	bne.w	8003fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d005      	beq.n	8003d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d130      	bne.n	8003da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d74:	2201      	movs	r2, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 0201 	and.w	r2, r3, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d017      	beq.n	8003ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d123      	bne.n	8003e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	220f      	movs	r2, #15
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0203 	and.w	r2, r3, #3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a2 	beq.w	8003fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <HAL_GPIO_Init+0x2e8>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	4a56      	ldr	r2, [pc, #344]	; (8003fd4 <HAL_GPIO_Init+0x2e8>)
 8003e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	4b54      	ldr	r3, [pc, #336]	; (8003fd4 <HAL_GPIO_Init+0x2e8>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e8e:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_GPIO_Init+0x2ec>)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	3302      	adds	r3, #2
 8003e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a49      	ldr	r2, [pc, #292]	; (8003fdc <HAL_GPIO_Init+0x2f0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d019      	beq.n	8003eee <HAL_GPIO_Init+0x202>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a48      	ldr	r2, [pc, #288]	; (8003fe0 <HAL_GPIO_Init+0x2f4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_GPIO_Init+0x1fe>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a47      	ldr	r2, [pc, #284]	; (8003fe4 <HAL_GPIO_Init+0x2f8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_GPIO_Init+0x1fa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a46      	ldr	r2, [pc, #280]	; (8003fe8 <HAL_GPIO_Init+0x2fc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x1f6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a45      	ldr	r2, [pc, #276]	; (8003fec <HAL_GPIO_Init+0x300>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_GPIO_Init+0x1f2>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e008      	b.n	8003ef0 <HAL_GPIO_Init+0x204>
 8003ede:	2307      	movs	r3, #7
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x204>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e004      	b.n	8003ef0 <HAL_GPIO_Init+0x204>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e002      	b.n	8003ef0 <HAL_GPIO_Init+0x204>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_GPIO_Init+0x204>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	f002 0203 	and.w	r2, r2, #3
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	4093      	lsls	r3, r2
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f00:	4935      	ldr	r1, [pc, #212]	; (8003fd8 <HAL_GPIO_Init+0x2ec>)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	3302      	adds	r3, #2
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0e:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f32:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f5c:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f86:	4a1a      	ldr	r2, [pc, #104]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	f67f aea2 	bls.w	8003d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40020400 	.word	0x40020400
 8003fe4:	40020800 	.word	0x40020800
 8003fe8:	40020c00 	.word	0x40020c00
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004010:	e003      	b.n	800401a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e12b      	b.n	8004292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fad0 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800408a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800408c:	f003 f86e 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a81      	ldr	r2, [pc, #516]	; (800429c <HAL_I2C_Init+0x274>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d807      	bhi.n	80040ac <HAL_I2C_Init+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a80      	ldr	r2, [pc, #512]	; (80042a0 <HAL_I2C_Init+0x278>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e006      	b.n	80040ba <HAL_I2C_Init+0x92>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a7d      	ldr	r2, [pc, #500]	; (80042a4 <HAL_I2C_Init+0x27c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf94      	ite	ls
 80040b4:	2301      	movls	r3, #1
 80040b6:	2300      	movhi	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0e7      	b.n	8004292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a78      	ldr	r2, [pc, #480]	; (80042a8 <HAL_I2C_Init+0x280>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0c9b      	lsrs	r3, r3, #18
 80040cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a6a      	ldr	r2, [pc, #424]	; (800429c <HAL_I2C_Init+0x274>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d802      	bhi.n	80040fc <HAL_I2C_Init+0xd4>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3301      	adds	r3, #1
 80040fa:	e009      	b.n	8004110 <HAL_I2C_Init+0xe8>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	4a69      	ldr	r2, [pc, #420]	; (80042ac <HAL_I2C_Init+0x284>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	3301      	adds	r3, #1
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	430b      	orrs	r3, r1
 8004116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	495c      	ldr	r1, [pc, #368]	; (800429c <HAL_I2C_Init+0x274>)
 800412c:	428b      	cmp	r3, r1
 800412e:	d819      	bhi.n	8004164 <HAL_I2C_Init+0x13c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e59      	subs	r1, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fbb1 f3f3 	udiv	r3, r1, r3
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004144:	400b      	ands	r3, r1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_I2C_Init+0x138>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e59      	subs	r1, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fbb1 f3f3 	udiv	r3, r1, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415e:	e051      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004160:	2304      	movs	r3, #4
 8004162:	e04f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <HAL_I2C_Init+0x168>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e58      	subs	r0, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e012      	b.n	80041b6 <HAL_I2C_Init+0x18e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e58      	subs	r0, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	0099      	lsls	r1, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Init+0x196>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e022      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <HAL_I2C_Init+0x1bc>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1e58      	subs	r0, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	440b      	add	r3, r1
 80041d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	0099      	lsls	r1, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6911      	ldr	r1, [r2, #16]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	000186a0 	.word	0x000186a0
 80042a0:	001e847f 	.word	0x001e847f
 80042a4:	003d08ff 	.word	0x003d08ff
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	10624dd3 	.word	0x10624dd3

080042b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7fe fb2b 	bl	8002924 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	f040 80d9 	bne.w	8004490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	496d      	ldr	r1, [pc, #436]	; (800449c <HAL_I2C_Mem_Write+0x1ec>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f002 f8e5 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0cc      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_I2C_Mem_Write+0x56>
 8004302:	2302      	movs	r3, #2
 8004304:	e0c5      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d007      	beq.n	800432c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2221      	movs	r2, #33	; 0x21
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a4d      	ldr	r2, [pc, #308]	; (80044a0 <HAL_I2C_Mem_Write+0x1f0>)
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436e:	88f8      	ldrh	r0, [r7, #6]
 8004370:	893a      	ldrh	r2, [r7, #8]
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f001 fe74 	bl	800606c <I2C_RequestMemoryWrite>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d052      	beq.n	8004430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e081      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f002 f966 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06b      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d11b      	bne.n	8004430 <HAL_I2C_Mem_Write+0x180>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1aa      	bne.n	800438e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f002 f952 	bl	80066e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	2b04      	cmp	r3, #4
 800444e:	d107      	bne.n	8004460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e016      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044be:	f7fe fa31 	bl	8002924 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	f040 8208 	bne.w	80048e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2319      	movs	r3, #25
 80044d8:	2201      	movs	r2, #1
 80044da:	497b      	ldr	r1, [pc, #492]	; (80046c8 <HAL_I2C_Mem_Read+0x224>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f001 ffeb 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	e1fb      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Mem_Read+0x56>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e1f4      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d007      	beq.n	8004520 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800452e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	; 0x22
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <HAL_I2C_Mem_Read+0x228>)
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004562:	88f8      	ldrh	r0, [r7, #6]
 8004564:	893a      	ldrh	r2, [r7, #8]
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4603      	mov	r3, r0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f001 fe10 	bl	8006198 <I2C_RequestMemoryRead>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1b0      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e184      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d11b      	bne.n	80045f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e164      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d11b      	bne.n	8004632 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	e144      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004648:	e138      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	2b03      	cmp	r3, #3
 8004650:	f200 80f1 	bhi.w	8004836 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	2b01      	cmp	r3, #1
 800465a:	d123      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f002 f8b3 	bl	80067cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e139      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a2:	e10b      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d14e      	bne.n	800474a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	2200      	movs	r2, #0
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <HAL_I2C_Mem_Read+0x22c>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f001 fefe 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e10e      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
 80046c6:	bf00      	nop
 80046c8:	00100002 	.word	0x00100002
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004748:	e0b8      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2200      	movs	r2, #0
 8004752:	4966      	ldr	r1, [pc, #408]	; (80048ec <HAL_I2C_Mem_Read+0x448>)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f001 feaf 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0bf      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2200      	movs	r2, #0
 80047ae:	494f      	ldr	r1, [pc, #316]	; (80048ec <HAL_I2C_Mem_Read+0x448>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f001 fe81 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e091      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004834:	e042      	b.n	80048bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f001 ffc6 	bl	80067cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e04c      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d118      	bne.n	80048bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f aec2 	bne.w	800464a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3728      	adds	r7, #40	; 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	00010004 	.word	0x00010004

080048f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004910:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b10      	cmp	r3, #16
 800491e:	d003      	beq.n	8004928 <HAL_I2C_EV_IRQHandler+0x38>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	f040 80b1 	bne.w	8004a8a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10d      	bne.n	800495e <HAL_I2C_EV_IRQHandler+0x6e>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004948:	d003      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x62>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004950:	d101      	bne.n	8004956 <HAL_I2C_EV_IRQHandler+0x66>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_I2C_EV_IRQHandler+0x68>
 8004956:	2300      	movs	r3, #0
 8004958:	2b01      	cmp	r3, #1
 800495a:	f000 8114 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <HAL_I2C_EV_IRQHandler+0x90>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f001 ffaf 	bl	80068d6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fd5e 	bl	800543a <I2C_Master_SB>
 800497e:	e083      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0xac>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fdd6 	bl	8005546 <I2C_Master_ADD10>
 800499a:	e075      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_I2C_EV_IRQHandler+0xc8>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fdf2 	bl	800559a <I2C_Master_ADDR>
 80049b6:	e067      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d036      	beq.n	8004a30 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d0:	f000 80db 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_I2C_EV_IRQHandler+0x10a>
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_I2C_EV_IRQHandler+0x10a>
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9d6 	bl	8004da4 <I2C_MasterTransmit_TXE>
 80049f8:	e046      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80c2 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80bc 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a12:	7bbb      	ldrb	r3, [r7, #14]
 8004a14:	2b21      	cmp	r3, #33	; 0x21
 8004a16:	d103      	bne.n	8004a20 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa5f 	bl	8004edc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a1e:	e0b4      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	f040 80b1 	bne.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 facd 	bl	8004fc8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2e:	e0ac      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	f000 80a4 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <HAL_I2C_EV_IRQHandler+0x178>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_I2C_EV_IRQHandler+0x178>
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb45 	bl	80050f0 <I2C_MasterReceive_RXNE>
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 808b 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8085 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fbf0 	bl	8005266 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a86:	e080      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
 8004a88:	e07f      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e007      	b.n	8004aac <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d011      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x1ea>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00c      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ad0:	69b9      	ldr	r1, [r7, #24]
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ffb0 	bl	8005a38 <I2C_Slave_ADDR>
 8004ad8:	e05a      	b.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x206>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 ffea 	bl	8005ac8 <I2C_Slave_STOPF>
 8004af4:	e04c      	b.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	2b21      	cmp	r3, #33	; 0x21
 8004afa:	d002      	beq.n	8004b02 <HAL_I2C_EV_IRQHandler+0x212>
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	2b29      	cmp	r3, #41	; 0x29
 8004b00:	d120      	bne.n	8004b44 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_I2C_EV_IRQHandler+0x238>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_I2C_EV_IRQHandler+0x238>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fecb 	bl	80058bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b26:	e032      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d02d      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x29e>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d028      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fefa 	bl	8005936 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b42:	e024      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <HAL_I2C_EV_IRQHandler+0x27a>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_I2C_EV_IRQHandler+0x27a>
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 ff08 	bl	8005978 <I2C_SlaveReceive_RXNE>
 8004b68:	e012      	b.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 ff38 	bl	80059f4 <I2C_SlaveReceive_BTF>
 8004b84:	e004      	b.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b08a      	sub	sp, #40	; 0x28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00d      	beq.n	8004be0 <HAL_I2C_ER_IRQHandler+0x4a>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bde:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <HAL_I2C_ER_IRQHandler+0x70>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004c04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03e      	beq.n	8004c8e <HAL_I2C_ER_IRQHandler+0xf8>
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d039      	beq.n	8004c8e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004c1a:	7efb      	ldrb	r3, [r7, #27]
 8004c1c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c34:	7ebb      	ldrb	r3, [r7, #26]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d112      	bne.n	8004c60 <HAL_I2C_ER_IRQHandler+0xca>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10f      	bne.n	8004c60 <HAL_I2C_ER_IRQHandler+0xca>
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b21      	cmp	r3, #33	; 0x21
 8004c44:	d008      	beq.n	8004c58 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b29      	cmp	r3, #41	; 0x29
 8004c4a:	d005      	beq.n	8004c58 <HAL_I2C_ER_IRQHandler+0xc2>
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	2b28      	cmp	r3, #40	; 0x28
 8004c50:	d106      	bne.n	8004c60 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b21      	cmp	r3, #33	; 0x21
 8004c56:	d103      	bne.n	8004c60 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 f865 	bl	8005d28 <I2C_Slave_AF>
 8004c5e:	e016      	b.n	8004c8e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c68:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c72:	7efb      	ldrb	r3, [r7, #27]
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d002      	beq.n	8004c7e <HAL_I2C_ER_IRQHandler+0xe8>
 8004c78:	7efb      	ldrb	r3, [r7, #27]
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d107      	bne.n	8004c8e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <HAL_I2C_ER_IRQHandler+0x11e>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	f043 0308 	orr.w	r3, r3, #8
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004cb2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 f89e 	bl	8005e08 <I2C_ITError>
  }
}
 8004ccc:	bf00      	nop
 8004cce:	3728      	adds	r7, #40	; 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
 8004d30:	4613      	mov	r3, r2
 8004d32:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d150      	bne.n	8004e6c <I2C_MasterTransmit_TXE+0xc8>
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b21      	cmp	r3, #33	; 0x21
 8004dce:	d14d      	bne.n	8004e6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d01d      	beq.n	8004e12 <I2C_MasterTransmit_TXE+0x6e>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d01a      	beq.n	8004e12 <I2C_MasterTransmit_TXE+0x6e>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004de2:	d016      	beq.n	8004e12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004df2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2211      	movs	r2, #17
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ff62 	bl	8004cd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e10:	e060      	b.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d107      	bne.n	8004e5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ff7d 	bl	8004d54 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e5a:	e03b      	b.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff35 	bl	8004cd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e6a:	e033      	b.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b21      	cmp	r3, #33	; 0x21
 8004e70:	d005      	beq.n	8004e7e <I2C_MasterTransmit_TXE+0xda>
 8004e72:	7bbb      	ldrb	r3, [r7, #14]
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d12d      	bne.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b22      	cmp	r3, #34	; 0x22
 8004e7c:	d12a      	bne.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d108      	bne.n	8004e9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e98:	e01c      	b.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d103      	bne.n	8004eae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f88e 	bl	8004fc8 <I2C_MemoryTransmit_TXE_BTF>
}
 8004eac:	e012      	b.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	781a      	ldrb	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ed2:	e7ff      	b.n	8004ed4 <I2C_MasterTransmit_TXE+0x130>
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b21      	cmp	r3, #33	; 0x21
 8004ef4:	d164      	bne.n	8004fc0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d012      	beq.n	8004f26 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f24:	e04c      	b.n	8004fc0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d01d      	beq.n	8004f68 <I2C_MasterTransmit_BTF+0x8c>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d01a      	beq.n	8004f68 <I2C_MasterTransmit_BTF+0x8c>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f38:	d016      	beq.n	8004f68 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f48:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2211      	movs	r2, #17
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff feb7 	bl	8004cd4 <HAL_I2C_MasterTxCpltCallback>
}
 8004f66:	e02b      	b.n	8004fc0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d107      	bne.n	8004fb2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff fed2 	bl	8004d54 <HAL_I2C_MemTxCpltCallback>
}
 8004fb0:	e006      	b.n	8004fc0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fe8a 	bl	8004cd4 <HAL_I2C_MasterTxCpltCallback>
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11d      	bne.n	800501c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10b      	bne.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	1c9a      	adds	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ffe:	e073      	b.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005004:	b29b      	uxth	r3, r3
 8005006:	121b      	asrs	r3, r3, #8
 8005008:	b2da      	uxtb	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	651a      	str	r2, [r3, #80]	; 0x50
}
 800501a:	e065      	b.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10b      	bne.n	800503c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005028:	b2da      	uxtb	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	651a      	str	r2, [r3, #80]	; 0x50
}
 800503a:	e055      	b.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005040:	2b02      	cmp	r3, #2
 8005042:	d151      	bne.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b22      	cmp	r3, #34	; 0x22
 8005048:	d10d      	bne.n	8005066 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005058:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005064:	e040      	b.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d015      	beq.n	800509c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b21      	cmp	r3, #33	; 0x21
 8005074:	d112      	bne.n	800509c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800509a:	e025      	b.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d120      	bne.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b21      	cmp	r3, #33	; 0x21
 80050aa:	d11d      	bne.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fe36 	bl	8004d54 <HAL_I2C_MemTxCpltCallback>
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b22      	cmp	r3, #34	; 0x22
 8005102:	f040 80ac 	bne.w	800525e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d921      	bls.n	8005158 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b03      	cmp	r3, #3
 8005142:	f040 808c 	bne.w	800525e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005156:	e082      	b.n	800525e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	2b02      	cmp	r3, #2
 800515e:	d075      	beq.n	800524c <I2C_MasterReceive_RXNE+0x15c>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d002      	beq.n	800516c <I2C_MasterReceive_RXNE+0x7c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d16f      	bne.n	800524c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fafb 	bl	8006768 <I2C_WaitOnSTOPRequestThroughIT>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d142      	bne.n	80051fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005186:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005196:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d10a      	bne.n	80051e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fdc1 	bl	8004d68 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051e6:	e03a      	b.n	800525e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2212      	movs	r2, #18
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fd76 	bl	8004ce8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051fc:	e02f      	b.n	800525e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800520c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fd99 	bl	8004d7c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800524a:	e008      	b.n	800525e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	605a      	str	r2, [r3, #4]
}
 800525c:	e7ff      	b.n	800525e <I2C_MasterReceive_RXNE+0x16e>
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b04      	cmp	r3, #4
 800527c:	d11b      	bne.n	80052b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052b4:	e0bd      	b.n	8005432 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d129      	bne.n	8005314 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d00a      	beq.n	80052ec <I2C_MasterReceive_BTF+0x86>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d007      	beq.n	80052ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005312:	e08e      	b.n	8005432 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d176      	bne.n	800540c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d002      	beq.n	800532a <I2C_MasterReceive_BTF+0xc4>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b10      	cmp	r3, #16
 8005328:	d108      	bne.n	800533c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e019      	b.n	8005370 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d002      	beq.n	8005348 <I2C_MasterReceive_BTF+0xe2>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d108      	bne.n	800535a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e00a      	b.n	8005370 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b10      	cmp	r3, #16
 800535e:	d007      	beq.n	8005370 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d10a      	bne.n	80053f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff fcba 	bl	8004d68 <HAL_I2C_MemRxCpltCallback>
}
 80053f4:	e01d      	b.n	8005432 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2212      	movs	r2, #18
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fc6f 	bl	8004ce8 <HAL_I2C_MasterRxCpltCallback>
}
 800540a:	e012      	b.n	8005432 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d117      	bne.n	800547e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005466:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005468:	e067      	b.n	800553a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	b2da      	uxtb	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]
}
 800547c:	e05d      	b.n	800553a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005486:	d133      	bne.n	80054f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b21      	cmp	r3, #33	; 0x21
 8005492:	d109      	bne.n	80054a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	e008      	b.n	80054ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <I2C_Master_SB+0x92>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d108      	bne.n	80054de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d032      	beq.n	800553a <I2C_Master_SB+0x100>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02d      	beq.n	800553a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ec:	605a      	str	r2, [r3, #4]
}
 80054ee:	e024      	b.n	800553a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10e      	bne.n	8005516 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	11db      	asrs	r3, r3, #7
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0306 	and.w	r3, r3, #6
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f063 030f 	orn	r3, r3, #15
 800550c:	b2da      	uxtb	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	611a      	str	r2, [r3, #16]
}
 8005514:	e011      	b.n	800553a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	2b01      	cmp	r3, #1
 800551c:	d10d      	bne.n	800553a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	b29b      	uxth	r3, r3
 8005524:	11db      	asrs	r3, r3, #7
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0306 	and.w	r3, r3, #6
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f063 030e 	orn	r3, r3, #14
 8005532:	b2da      	uxtb	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	b2da      	uxtb	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <I2C_Master_ADD10+0x26>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00c      	beq.n	800558e <I2C_Master_ADD10+0x48>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558c:	605a      	str	r2, [r3, #4]
  }
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800559a:	b480      	push	{r7}
 800559c:	b091      	sub	sp, #68	; 0x44
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b22      	cmp	r3, #34	; 0x22
 80055c2:	f040 8169 	bne.w	8005898 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <I2C_Master_ADDR+0x54>
 80055ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d10b      	bne.n	80055ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d6:	2300      	movs	r3, #0
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	633b      	str	r3, [r7, #48]	; 0x30
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	e160      	b.n	80058b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11d      	bne.n	8005632 <I2C_Master_ADDR+0x98>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055fe:	d118      	bne.n	8005632 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005624:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	651a      	str	r2, [r3, #80]	; 0x50
 8005630:	e13e      	b.n	80058b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d113      	bne.n	8005664 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e115      	b.n	8005890 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	f040 808a 	bne.w	8005784 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005676:	d137      	bne.n	80056e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005696:	d113      	bne.n	80056c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a8:	2300      	movs	r3, #0
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	e0e7      	b.n	8005890 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	623b      	str	r3, [r7, #32]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e0d3      	b.n	8005890 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d02e      	beq.n	800574c <I2C_Master_ADDR+0x1b2>
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d02b      	beq.n	800574c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	2b12      	cmp	r3, #18
 80056f8:	d102      	bne.n	8005700 <I2C_Master_ADDR+0x166>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d125      	bne.n	800574c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b04      	cmp	r3, #4
 8005704:	d00e      	beq.n	8005724 <I2C_Master_ADDR+0x18a>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b02      	cmp	r3, #2
 800570a:	d00b      	beq.n	8005724 <I2C_Master_ADDR+0x18a>
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	2b10      	cmp	r3, #16
 8005710:	d008      	beq.n	8005724 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e007      	b.n	8005734 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005732:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	e0a1      	b.n	8005890 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e085      	b.n	8005890 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d14d      	bne.n	800582a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2b04      	cmp	r3, #4
 8005792:	d016      	beq.n	80057c2 <I2C_Master_ADDR+0x228>
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	2b02      	cmp	r3, #2
 8005798:	d013      	beq.n	80057c2 <I2C_Master_ADDR+0x228>
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	2b10      	cmp	r3, #16
 800579e:	d010      	beq.n	80057c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e007      	b.n	80057d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e0:	d117      	bne.n	8005812 <I2C_Master_ADDR+0x278>
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057e8:	d00b      	beq.n	8005802 <I2C_Master_ADDR+0x268>
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d008      	beq.n	8005802 <I2C_Master_ADDR+0x268>
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d005      	beq.n	8005802 <I2C_Master_ADDR+0x268>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d002      	beq.n	8005802 <I2C_Master_ADDR+0x268>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d107      	bne.n	8005812 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005810:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	e032      	b.n	8005890 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005848:	d117      	bne.n	800587a <I2C_Master_ADDR+0x2e0>
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005850:	d00b      	beq.n	800586a <I2C_Master_ADDR+0x2d0>
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b01      	cmp	r3, #1
 8005856:	d008      	beq.n	800586a <I2C_Master_ADDR+0x2d0>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b08      	cmp	r3, #8
 800585c:	d005      	beq.n	800586a <I2C_Master_ADDR+0x2d0>
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b10      	cmp	r3, #16
 8005862:	d002      	beq.n	800586a <I2C_Master_ADDR+0x2d0>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b20      	cmp	r3, #32
 8005868:	d107      	bne.n	800587a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005878:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005896:	e00b      	b.n	80058b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
}
 80058ae:	e7ff      	b.n	80058b0 <I2C_Master_ADDR+0x316>
 80058b0:	bf00      	nop
 80058b2:	3744      	adds	r7, #68	; 0x44
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02b      	beq.n	800592e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d114      	bne.n	800592e <I2C_SlaveTransmit_TXE+0x72>
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b29      	cmp	r3, #41	; 0x29
 8005908:	d111      	bne.n	800592e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005918:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2221      	movs	r2, #33	; 0x21
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2228      	movs	r2, #40	; 0x28
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff f9e7 	bl	8004cfc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d011      	beq.n	800596c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02c      	beq.n	80059ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d114      	bne.n	80059ec <I2C_SlaveReceive_RXNE+0x74>
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b2a      	cmp	r3, #42	; 0x2a
 80059c6:	d111      	bne.n	80059ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2222      	movs	r2, #34	; 0x22
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2228      	movs	r2, #40	; 0x28
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff f992 	bl	8004d10 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d012      	beq.n	8005a2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a52:	2b28      	cmp	r3, #40	; 0x28
 8005a54:	d125      	bne.n	8005aa2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	81bb      	strh	r3, [r7, #12]
 8005a84:	e002      	b.n	8005a8c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a94:	89ba      	ldrh	r2, [r7, #12]
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff f942 	bl	8004d24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005aa0:	e00e      	b.n	8005ac0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b24:	d172      	bne.n	8005c0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b22      	cmp	r3, #34	; 0x22
 8005b2a:	d002      	beq.n	8005b32 <I2C_Slave_STOPF+0x6a>
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b30:	d135      	bne.n	8005b9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f043 0204 	orr.w	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd ffd0 	bl	8003b10 <HAL_DMA_GetState>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d049      	beq.n	8005c0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	4a69      	ldr	r2, [pc, #420]	; (8005d20 <I2C_Slave_STOPF+0x258>)
 8005b7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fd fe18 	bl	80037b8 <HAL_DMA_Abort_IT>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03d      	beq.n	8005c0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b9c:	e035      	b.n	8005c0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0204 	orr.w	r2, r3, #4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fd ff9a 	bl	8003b10 <HAL_DMA_GetState>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d014      	beq.n	8005c0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be6:	4a4e      	ldr	r2, [pc, #312]	; (8005d20 <I2C_Slave_STOPF+0x258>)
 8005be8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd fde2 	bl	80037b8 <HAL_DMA_Abort_IT>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c04:	4610      	mov	r0, r2
 8005c06:	4798      	blx	r3
 8005c08:	e000      	b.n	8005c0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03e      	beq.n	8005c94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d112      	bne.n	8005c4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d112      	bne.n	8005c7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	f043 0204 	orr.w	r2, r3, #4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f8b3 	bl	8005e08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005ca2:	e039      	b.n	8005d18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca8:	d109      	bne.n	8005cbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2228      	movs	r2, #40	; 0x28
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff f829 	bl	8004d10 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b28      	cmp	r3, #40	; 0x28
 8005cc8:	d111      	bne.n	8005cee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <I2C_Slave_STOPF+0x25c>)
 8005cce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff f82a 	bl	8004d40 <HAL_I2C_ListenCpltCallback>
}
 8005cec:	e014      	b.n	8005d18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	2b22      	cmp	r3, #34	; 0x22
 8005cf4:	d002      	beq.n	8005cfc <I2C_Slave_STOPF+0x234>
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b22      	cmp	r3, #34	; 0x22
 8005cfa:	d10d      	bne.n	8005d18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fe fffc 	bl	8004d10 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	08006369 	.word	0x08006369
 8005d24:	ffff0000 	.word	0xffff0000

08005d28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d002      	beq.n	8005d4a <I2C_Slave_AF+0x22>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d129      	bne.n	8005d9e <I2C_Slave_AF+0x76>
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b28      	cmp	r3, #40	; 0x28
 8005d4e:	d126      	bne.n	8005d9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a2c      	ldr	r2, [pc, #176]	; (8005e04 <I2C_Slave_AF+0xdc>)
 8005d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fe ffd2 	bl	8004d40 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005d9c:	e02e      	b.n	8005dfc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b21      	cmp	r3, #33	; 0x21
 8005da2:	d126      	bne.n	8005df2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <I2C_Slave_AF+0xdc>)
 8005da8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2221      	movs	r2, #33	; 0x21
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fe ff86 	bl	8004cfc <HAL_I2C_SlaveTxCpltCallback>
}
 8005df0:	e004      	b.n	8005dfc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dfa:	615a      	str	r2, [r3, #20]
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	ffff0000 	.word	0xffff0000

08005e08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b10      	cmp	r3, #16
 8005e24:	d002      	beq.n	8005e2c <I2C_ITError+0x24>
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d10a      	bne.n	8005e42 <I2C_ITError+0x3a>
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b22      	cmp	r3, #34	; 0x22
 8005e30:	d107      	bne.n	8005e42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e48:	2b28      	cmp	r3, #40	; 0x28
 8005e4a:	d107      	bne.n	8005e5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2228      	movs	r2, #40	; 0x28
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e5a:	e015      	b.n	8005e88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6a:	d00a      	beq.n	8005e82 <I2C_ITError+0x7a>
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b60      	cmp	r3, #96	; 0x60
 8005e70:	d007      	beq.n	8005e82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e96:	d162      	bne.n	8005f5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ea6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d020      	beq.n	8005ef8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	4a6a      	ldr	r2, [pc, #424]	; (8006064 <I2C_ITError+0x25c>)
 8005ebc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fc78 	bl	80037b8 <HAL_DMA_Abort_IT>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8089 	beq.w	8005fe2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4798      	blx	r3
 8005ef6:	e074      	b.n	8005fe2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	4a59      	ldr	r2, [pc, #356]	; (8006064 <I2C_ITError+0x25c>)
 8005efe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fd fc57 	bl	80037b8 <HAL_DMA_Abort_IT>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d068      	beq.n	8005fe2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d10b      	bne.n	8005f36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
 8005f5c:	e041      	b.n	8005fe2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b60      	cmp	r3, #96	; 0x60
 8005f68:	d125      	bne.n	8005fb6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d10b      	bne.n	8005f9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fe feee 	bl	8004d90 <HAL_I2C_AbortCpltCallback>
 8005fb4:	e015      	b.n	8005fe2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d10b      	bne.n	8005fdc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fe fecd 	bl	8004d7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10e      	bne.n	8006010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d113      	bne.n	800605c <I2C_ITError+0x254>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b28      	cmp	r3, #40	; 0x28
 8006038:	d110      	bne.n	800605c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a0a      	ldr	r2, [pc, #40]	; (8006068 <I2C_ITError+0x260>)
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fe fe72 	bl	8004d40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	08006369 	.word	0x08006369
 8006068:	ffff0000 	.word	0xffff0000

0800606c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4603      	mov	r3, r0
 800607c:	817b      	strh	r3, [r7, #10]
 800607e:	460b      	mov	r3, r1
 8006080:	813b      	strh	r3, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	2200      	movs	r2, #0
 800609e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fa08 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	d103      	bne.n	80060c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e05f      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ca:	897b      	ldrh	r3, [r7, #10]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	6a3a      	ldr	r2, [r7, #32]
 80060de:	492d      	ldr	r1, [pc, #180]	; (8006194 <I2C_RequestMemoryWrite+0x128>)
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fa40 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e04c      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006108:	6a39      	ldr	r1, [r7, #32]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 faaa 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	2b04      	cmp	r3, #4
 800611c:	d107      	bne.n	800612e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e02b      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d105      	bne.n	8006144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006138:	893b      	ldrh	r3, [r7, #8]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	611a      	str	r2, [r3, #16]
 8006142:	e021      	b.n	8006188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	b29b      	uxth	r3, r3
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006154:	6a39      	ldr	r1, [r7, #32]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fa84 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	2b04      	cmp	r3, #4
 8006168:	d107      	bne.n	800617a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e005      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617e:	893b      	ldrh	r3, [r7, #8]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	00010002 	.word	0x00010002

08006198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	2200      	movs	r2, #0
 80061da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f96a 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f8:	d103      	bne.n	8006202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e0aa      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006206:	897b      	ldrh	r3, [r7, #10]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	6a3a      	ldr	r2, [r7, #32]
 800621a:	4952      	ldr	r1, [pc, #328]	; (8006364 <I2C_RequestMemoryRead+0x1cc>)
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f9a2 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e097      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006244:	6a39      	ldr	r1, [r7, #32]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fa0c 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00d      	beq.n	800626e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	2b04      	cmp	r3, #4
 8006258:	d107      	bne.n	800626a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e076      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d105      	bne.n	8006280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006274:	893b      	ldrh	r3, [r7, #8]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	611a      	str	r2, [r3, #16]
 800627e:	e021      	b.n	80062c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006280:	893b      	ldrh	r3, [r7, #8]
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	b29b      	uxth	r3, r3
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800628e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006290:	6a39      	ldr	r1, [r7, #32]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f9e6 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d107      	bne.n	80062b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e050      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ba:	893b      	ldrh	r3, [r7, #8]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	6a39      	ldr	r1, [r7, #32]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f9cb 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d107      	bne.n	80062ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e035      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2200      	movs	r2, #0
 8006308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f8d3 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00d      	beq.n	8006334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d103      	bne.n	8006330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e013      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	4906      	ldr	r1, [pc, #24]	; (8006364 <I2C_RequestMemoryRead+0x1cc>)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f90b 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	00010002 	.word	0x00010002

08006368 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006382:	4b4b      	ldr	r3, [pc, #300]	; (80064b0 <I2C_DMAAbort+0x148>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	08db      	lsrs	r3, r3, #3
 8006388:	4a4a      	ldr	r2, [pc, #296]	; (80064b4 <I2C_DMAAbort+0x14c>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	0a1a      	lsrs	r2, r3, #8
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	00da      	lsls	r2, r3, #3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80063ae:	e00a      	b.n	80063c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c4:	d0ea      	beq.n	800639c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	2200      	movs	r2, #0
 80063d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	2200      	movs	r2, #0
 80063e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006408:	2200      	movs	r2, #0
 800640a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	2200      	movs	r2, #0
 800641a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b60      	cmp	r3, #96	; 0x60
 8006436:	d10e      	bne.n	8006456 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800644e:	6978      	ldr	r0, [r7, #20]
 8006450:	f7fe fc9e 	bl	8004d90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006454:	e027      	b.n	80064a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800645c:	2b28      	cmp	r3, #40	; 0x28
 800645e:	d117      	bne.n	8006490 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800647e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2228      	movs	r2, #40	; 0x28
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800648e:	e007      	b.n	80064a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80064a0:	6978      	ldr	r0, [r7, #20]
 80064a2:	f7fe fc6b 	bl	8004d7c <HAL_I2C_ErrorCallback>
}
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000004 	.word	0x20000004
 80064b4:	14f8b589 	.word	0x14f8b589

080064b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c8:	e025      	b.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d0:	d021      	beq.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d2:	f7fc fa27 	bl	8002924 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d116      	bne.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e023      	b.n	800655e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10d      	bne.n	800653c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	43da      	mvns	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	e00c      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	43da      	mvns	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d0b6      	beq.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006574:	e051      	b.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d123      	bne.n	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006594:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800659e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0204 	orr.w	r2, r3, #4
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e046      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d4:	d021      	beq.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fc f9a5 	bl	8002924 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e020      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	0c1b      	lsrs	r3, r3, #16
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10c      	bne.n	800663e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	43da      	mvns	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4013      	ands	r3, r2
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e00b      	b.n	8006656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	43da      	mvns	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d18d      	bne.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006670:	e02d      	b.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f900 	bl	8006878 <I2C_IsAcknowledgeFailed>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e02d      	b.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006688:	d021      	beq.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fc f94b 	bl	8002924 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f043 0220 	orr.w	r2, r3, #32
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e007      	b.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d1ca      	bne.n	8006672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066f2:	e02d      	b.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f8bf 	bl	8006878 <I2C_IsAcknowledgeFailed>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e02d      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670a:	d021      	beq.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fc f90a 	bl	8002924 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d116      	bne.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e007      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d1ca      	bne.n	80066f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006774:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	08db      	lsrs	r3, r3, #3
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	0a1a      	lsrs	r2, r3, #8
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3b01      	subs	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d107      	bne.n	80067a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0220 	orr.w	r2, r3, #32
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e008      	b.n	80067b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d0e9      	beq.n	800678a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	20000004 	.word	0x20000004
 80067c8:	14f8b589 	.word	0x14f8b589

080067cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067d8:	e042      	b.n	8006860 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d119      	bne.n	800681c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0210 	mvn.w	r2, #16
 80067f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e029      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681c:	f7fc f882 	bl	8002924 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d302      	bcc.n	8006832 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d116      	bne.n	8006860 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e007      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d1b5      	bne.n	80067da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688e:	d11b      	bne.n	80068c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f043 0204 	orr.w	r2, r3, #4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068e6:	d103      	bne.n	80068f0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068ee:	e007      	b.n	8006900 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068f8:	d102      	bne.n	8006900 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2208      	movs	r2, #8
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e267      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d075      	beq.n	8006a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800692a:	4b88      	ldr	r3, [pc, #544]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b04      	cmp	r3, #4
 8006934:	d00c      	beq.n	8006950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006936:	4b85      	ldr	r3, [pc, #532]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800693e:	2b08      	cmp	r3, #8
 8006940:	d112      	bne.n	8006968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006942:	4b82      	ldr	r3, [pc, #520]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800694e:	d10b      	bne.n	8006968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006950:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d05b      	beq.n	8006a14 <HAL_RCC_OscConfig+0x108>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d157      	bne.n	8006a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e242      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d106      	bne.n	8006980 <HAL_RCC_OscConfig+0x74>
 8006972:	4b76      	ldr	r3, [pc, #472]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a75      	ldr	r2, [pc, #468]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	e01d      	b.n	80069bc <HAL_RCC_OscConfig+0xb0>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x98>
 800698a:	4b70      	ldr	r3, [pc, #448]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a6f      	ldr	r2, [pc, #444]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4b6d      	ldr	r3, [pc, #436]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6c      	ldr	r2, [pc, #432]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 800699c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	e00b      	b.n	80069bc <HAL_RCC_OscConfig+0xb0>
 80069a4:	4b69      	ldr	r3, [pc, #420]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a68      	ldr	r2, [pc, #416]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 80069aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	4b66      	ldr	r3, [pc, #408]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a65      	ldr	r2, [pc, #404]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 80069b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c4:	f7fb ffae 	bl	8002924 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069cc:	f7fb ffaa 	bl	8002924 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e207      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069de:	4b5b      	ldr	r3, [pc, #364]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0xc0>
 80069ea:	e014      	b.n	8006a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fb ff9a 	bl	8002924 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f4:	f7fb ff96 	bl	8002924 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	; 0x64
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e1f3      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a06:	4b51      	ldr	r3, [pc, #324]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0xe8>
 8006a12:	e000      	b.n	8006a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d063      	beq.n	8006aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a22:	4b4a      	ldr	r3, [pc, #296]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 030c 	and.w	r3, r3, #12
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00b      	beq.n	8006a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a2e:	4b47      	ldr	r3, [pc, #284]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d11c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a3a:	4b44      	ldr	r3, [pc, #272]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d116      	bne.n	8006a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a46:	4b41      	ldr	r3, [pc, #260]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_RCC_OscConfig+0x152>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e1c7      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5e:	4b3b      	ldr	r3, [pc, #236]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4937      	ldr	r1, [pc, #220]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a72:	e03a      	b.n	8006aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d020      	beq.n	8006abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a7c:	4b34      	ldr	r3, [pc, #208]	; (8006b50 <HAL_RCC_OscConfig+0x244>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a82:	f7fb ff4f 	bl	8002924 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8a:	f7fb ff4b 	bl	8002924 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e1a8      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa8:	4b28      	ldr	r3, [pc, #160]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4925      	ldr	r1, [pc, #148]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]
 8006abc:	e015      	b.n	8006aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006abe:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <HAL_RCC_OscConfig+0x244>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fb ff2e 	bl	8002924 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006acc:	f7fb ff2a 	bl	8002924 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e187      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ade:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d036      	beq.n	8006b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d016      	beq.n	8006b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <HAL_RCC_OscConfig+0x248>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fb ff0e 	bl	8002924 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0c:	f7fb ff0a 	bl	8002924 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e167      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <HAL_RCC_OscConfig+0x240>)
 8006b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x200>
 8006b2a:	e01b      	b.n	8006b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <HAL_RCC_OscConfig+0x248>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b32:	f7fb fef7 	bl	8002924 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b38:	e00e      	b.n	8006b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b3a:	f7fb fef3 	bl	8002924 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d907      	bls.n	8006b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e150      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	42470000 	.word	0x42470000
 8006b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b58:	4b88      	ldr	r3, [pc, #544]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1ea      	bne.n	8006b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8097 	beq.w	8006ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b76:	4b81      	ldr	r3, [pc, #516]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	4b7d      	ldr	r3, [pc, #500]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	4a7c      	ldr	r2, [pc, #496]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b90:	6413      	str	r3, [r2, #64]	; 0x40
 8006b92:	4b7a      	ldr	r3, [pc, #488]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba2:	4b77      	ldr	r3, [pc, #476]	; (8006d80 <HAL_RCC_OscConfig+0x474>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d118      	bne.n	8006be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bae:	4b74      	ldr	r3, [pc, #464]	; (8006d80 <HAL_RCC_OscConfig+0x474>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a73      	ldr	r2, [pc, #460]	; (8006d80 <HAL_RCC_OscConfig+0x474>)
 8006bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bba:	f7fb feb3 	bl	8002924 <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc2:	f7fb feaf 	bl	8002924 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e10c      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd4:	4b6a      	ldr	r3, [pc, #424]	; (8006d80 <HAL_RCC_OscConfig+0x474>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0f0      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x2ea>
 8006be8:	4b64      	ldr	r3, [pc, #400]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	4a63      	ldr	r2, [pc, #396]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf4:	e01c      	b.n	8006c30 <HAL_RCC_OscConfig+0x324>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCC_OscConfig+0x30c>
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	4a5e      	ldr	r2, [pc, #376]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c04:	f043 0304 	orr.w	r3, r3, #4
 8006c08:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	4a5b      	ldr	r2, [pc, #364]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	6713      	str	r3, [r2, #112]	; 0x70
 8006c16:	e00b      	b.n	8006c30 <HAL_RCC_OscConfig+0x324>
 8006c18:	4b58      	ldr	r3, [pc, #352]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1c:	4a57      	ldr	r2, [pc, #348]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6713      	str	r3, [r2, #112]	; 0x70
 8006c24:	4b55      	ldr	r3, [pc, #340]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	4a54      	ldr	r2, [pc, #336]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c2a:	f023 0304 	bic.w	r3, r3, #4
 8006c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d015      	beq.n	8006c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c38:	f7fb fe74 	bl	8002924 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fb fe70 	bl	8002924 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0cb      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c56:	4b49      	ldr	r3, [pc, #292]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0ee      	beq.n	8006c40 <HAL_RCC_OscConfig+0x334>
 8006c62:	e014      	b.n	8006c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c64:	f7fb fe5e 	bl	8002924 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7fb fe5a 	bl	8002924 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e0b5      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c82:	4b3e      	ldr	r3, [pc, #248]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1ee      	bne.n	8006c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c94:	4b39      	ldr	r3, [pc, #228]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	4a38      	ldr	r2, [pc, #224]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80a1 	beq.w	8006dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006caa:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 030c 	and.w	r3, r3, #12
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d05c      	beq.n	8006d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d141      	bne.n	8006d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbe:	4b31      	ldr	r3, [pc, #196]	; (8006d84 <HAL_RCC_OscConfig+0x478>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc4:	f7fb fe2e 	bl	8002924 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ccc:	f7fb fe2a 	bl	8002924 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e087      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cde:	4b27      	ldr	r3, [pc, #156]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	019b      	lsls	r3, r3, #6
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	3b01      	subs	r3, #1
 8006d04:	041b      	lsls	r3, r3, #16
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	491b      	ldr	r1, [pc, #108]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d14:	4b1b      	ldr	r3, [pc, #108]	; (8006d84 <HAL_RCC_OscConfig+0x478>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1a:	f7fb fe03 	bl	8002924 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d22:	f7fb fdff 	bl	8002924 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e05c      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d34:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x416>
 8006d40:	e054      	b.n	8006dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d42:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <HAL_RCC_OscConfig+0x478>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d48:	f7fb fdec 	bl	8002924 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d50:	f7fb fde8 	bl	8002924 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e045      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_RCC_OscConfig+0x470>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f0      	bne.n	8006d50 <HAL_RCC_OscConfig+0x444>
 8006d6e:	e03d      	b.n	8006dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e038      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	40007000 	.word	0x40007000
 8006d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <HAL_RCC_OscConfig+0x4ec>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d028      	beq.n	8006de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d121      	bne.n	8006de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d11a      	bne.n	8006de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006db8:	4013      	ands	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d111      	bne.n	8006de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d001      	beq.n	8006dec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40023800 	.word	0x40023800

08006dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e0cc      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e10:	4b68      	ldr	r3, [pc, #416]	; (8006fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d90c      	bls.n	8006e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1e:	4b65      	ldr	r3, [pc, #404]	; (8006fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e26:	4b63      	ldr	r3, [pc, #396]	; (8006fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d001      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0b8      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d020      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e50:	4b59      	ldr	r3, [pc, #356]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	4a58      	ldr	r2, [pc, #352]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e68:	4b53      	ldr	r3, [pc, #332]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4a52      	ldr	r2, [pc, #328]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e74:	4b50      	ldr	r3, [pc, #320]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	494d      	ldr	r1, [pc, #308]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d044      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d107      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9a:	4b47      	ldr	r3, [pc, #284]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d119      	bne.n	8006eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e07f      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d003      	beq.n	8006eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d107      	bne.n	8006eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eba:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e06f      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eca:	4b3b      	ldr	r3, [pc, #236]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e067      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eda:	4b37      	ldr	r3, [pc, #220]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f023 0203 	bic.w	r2, r3, #3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4934      	ldr	r1, [pc, #208]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006eec:	f7fb fd1a 	bl	8002924 <HAL_GetTick>
 8006ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef4:	f7fb fd16 	bl	8002924 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e04f      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0a:	4b2b      	ldr	r3, [pc, #172]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 020c 	and.w	r2, r3, #12
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d1eb      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f1c:	4b25      	ldr	r3, [pc, #148]	; (8006fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d20c      	bcs.n	8006f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e032      	b.n	8006faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f50:	4b19      	ldr	r3, [pc, #100]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4916      	ldr	r1, [pc, #88]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	490e      	ldr	r1, [pc, #56]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f82:	f000 f821 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 8006f86:	4602      	mov	r2, r0
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	490a      	ldr	r1, [pc, #40]	; (8006fbc <HAL_RCC_ClockConfig+0x1c0>)
 8006f94:	5ccb      	ldrb	r3, [r1, r3]
 8006f96:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9a:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fb fc7a 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40023c00 	.word	0x40023c00
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	080082f4 	.word	0x080082f4
 8006fc0:	20000004 	.word	0x20000004
 8006fc4:	20000008 	.word	0x20000008

08006fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fcc:	b090      	sub	sp, #64	; 0x40
 8006fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd8:	2300      	movs	r3, #0
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fe0:	4b59      	ldr	r3, [pc, #356]	; (8007148 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d00d      	beq.n	8007008 <HAL_RCC_GetSysClockFreq+0x40>
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	f200 80a1 	bhi.w	8007134 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_RCC_GetSysClockFreq+0x34>
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d003      	beq.n	8007002 <HAL_RCC_GetSysClockFreq+0x3a>
 8006ffa:	e09b      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ffc:	4b53      	ldr	r3, [pc, #332]	; (800714c <HAL_RCC_GetSysClockFreq+0x184>)
 8006ffe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007000:	e09b      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007002:	4b53      	ldr	r3, [pc, #332]	; (8007150 <HAL_RCC_GetSysClockFreq+0x188>)
 8007004:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007006:	e098      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007008:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <HAL_RCC_GetSysClockFreq+0x180>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007012:	4b4d      	ldr	r3, [pc, #308]	; (8007148 <HAL_RCC_GetSysClockFreq+0x180>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d028      	beq.n	8007070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800701e:	4b4a      	ldr	r3, [pc, #296]	; (8007148 <HAL_RCC_GetSysClockFreq+0x180>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	099b      	lsrs	r3, r3, #6
 8007024:	2200      	movs	r2, #0
 8007026:	623b      	str	r3, [r7, #32]
 8007028:	627a      	str	r2, [r7, #36]	; 0x24
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007030:	2100      	movs	r1, #0
 8007032:	4b47      	ldr	r3, [pc, #284]	; (8007150 <HAL_RCC_GetSysClockFreq+0x188>)
 8007034:	fb03 f201 	mul.w	r2, r3, r1
 8007038:	2300      	movs	r3, #0
 800703a:	fb00 f303 	mul.w	r3, r0, r3
 800703e:	4413      	add	r3, r2
 8007040:	4a43      	ldr	r2, [pc, #268]	; (8007150 <HAL_RCC_GetSysClockFreq+0x188>)
 8007042:	fba0 1202 	umull	r1, r2, r0, r2
 8007046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007048:	460a      	mov	r2, r1
 800704a:	62ba      	str	r2, [r7, #40]	; 0x28
 800704c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704e:	4413      	add	r3, r2
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	2200      	movs	r2, #0
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	61fa      	str	r2, [r7, #28]
 800705a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800705e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007062:	f7f9 fd0f 	bl	8000a84 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4613      	mov	r3, r2
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706e:	e053      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007070:	4b35      	ldr	r3, [pc, #212]	; (8007148 <HAL_RCC_GetSysClockFreq+0x180>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	099b      	lsrs	r3, r3, #6
 8007076:	2200      	movs	r2, #0
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	617a      	str	r2, [r7, #20]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007082:	f04f 0b00 	mov.w	fp, #0
 8007086:	4652      	mov	r2, sl
 8007088:	465b      	mov	r3, fp
 800708a:	f04f 0000 	mov.w	r0, #0
 800708e:	f04f 0100 	mov.w	r1, #0
 8007092:	0159      	lsls	r1, r3, #5
 8007094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007098:	0150      	lsls	r0, r2, #5
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	ebb2 080a 	subs.w	r8, r2, sl
 80070a2:	eb63 090b 	sbc.w	r9, r3, fp
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80070b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80070b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80070ba:	ebb2 0408 	subs.w	r4, r2, r8
 80070be:	eb63 0509 	sbc.w	r5, r3, r9
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	00eb      	lsls	r3, r5, #3
 80070cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070d0:	00e2      	lsls	r2, r4, #3
 80070d2:	4614      	mov	r4, r2
 80070d4:	461d      	mov	r5, r3
 80070d6:	eb14 030a 	adds.w	r3, r4, sl
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	eb45 030b 	adc.w	r3, r5, fp
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070ee:	4629      	mov	r1, r5
 80070f0:	028b      	lsls	r3, r1, #10
 80070f2:	4621      	mov	r1, r4
 80070f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070f8:	4621      	mov	r1, r4
 80070fa:	028a      	lsls	r2, r1, #10
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007102:	2200      	movs	r2, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	60fa      	str	r2, [r7, #12]
 8007108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800710c:	f7f9 fcba 	bl	8000a84 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4613      	mov	r3, r2
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_GetSysClockFreq+0x180>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	3301      	adds	r3, #1
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007130:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007132:	e002      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCC_GetSysClockFreq+0x184>)
 8007136:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800713c:	4618      	mov	r0, r3
 800713e:	3740      	adds	r7, #64	; 0x40
 8007140:	46bd      	mov	sp, r7
 8007142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800
 800714c:	00f42400 	.word	0x00f42400
 8007150:	017d7840 	.word	0x017d7840

08007154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007158:	4b03      	ldr	r3, [pc, #12]	; (8007168 <HAL_RCC_GetHCLKFreq+0x14>)
 800715a:	681b      	ldr	r3, [r3, #0]
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000004 	.word	0x20000004

0800716c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007170:	f7ff fff0 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8007174:	4602      	mov	r2, r0
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	0a9b      	lsrs	r3, r3, #10
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	4903      	ldr	r1, [pc, #12]	; (8007190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007182:	5ccb      	ldrb	r3, [r1, r3]
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40023800 	.word	0x40023800
 8007190:	08008304 	.word	0x08008304

08007194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e07b      	b.n	800729e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d108      	bne.n	80071c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071b6:	d009      	beq.n	80071cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	61da      	str	r2, [r3, #28]
 80071be:	e005      	b.n	80071cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fb f852 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	ea42 0103 	orr.w	r1, r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	f003 0104 	and.w	r1, r3, #4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0210 	and.w	r2, r3, #16
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10e      	bne.n	80072e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
    return;
 80072e6:	e0ce      	b.n	8007486 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d009      	beq.n	8007306 <HAL_SPI_IRQHandler+0x5e>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
    return;
 8007304:	e0bf      	b.n	8007486 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <HAL_SPI_IRQHandler+0x7e>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80b0 	beq.w	8007486 <HAL_SPI_IRQHandler+0x1de>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80aa 	beq.w	8007486 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d023      	beq.n	8007384 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b03      	cmp	r3, #3
 8007346:	d011      	beq.n	800736c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	f043 0204 	orr.w	r2, r3, #4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	e00b      	b.n	8007384 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	693b      	ldr	r3, [r7, #16]
        return;
 8007382:	e080      	b.n	8007486 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d014      	beq.n	80073b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00c      	beq.n	80073dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	f043 0208 	orr.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d04f      	beq.n	8007484 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d104      	bne.n	8007410 <HAL_SPI_IRQHandler+0x168>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d034      	beq.n	800747a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0203 	bic.w	r2, r2, #3
 800741e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d011      	beq.n	800744c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	4a17      	ldr	r2, [pc, #92]	; (800748c <HAL_SPI_IRQHandler+0x1e4>)
 800742e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007434:	4618      	mov	r0, r3
 8007436:	f7fc f9bf 	bl	80037b8 <HAL_DMA_Abort_IT>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	2b00      	cmp	r3, #0
 8007452:	d016      	beq.n	8007482 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007458:	4a0c      	ldr	r2, [pc, #48]	; (800748c <HAL_SPI_IRQHandler+0x1e4>)
 800745a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007460:	4618      	mov	r0, r3
 8007462:	f7fc f9a9 	bl	80037b8 <HAL_DMA_Abort_IT>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007478:	e003      	b.n	8007482 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f808 	bl	8007490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007480:	e000      	b.n	8007484 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007482:	bf00      	nop
    return;
 8007484:	bf00      	nop
  }
}
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	080074a5 	.word	0x080074a5

08007490 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff ffe6 	bl	8007490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e041      	b.n	8007562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fb f934 	bl	8002760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f000 fae2 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	d001      	beq.n	8007584 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e03c      	b.n	80075fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1e      	ldr	r2, [pc, #120]	; (800760c <HAL_TIM_Base_Start+0xa0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d018      	beq.n	80075c8 <HAL_TIM_Base_Start+0x5c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759e:	d013      	beq.n	80075c8 <HAL_TIM_Base_Start+0x5c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a1a      	ldr	r2, [pc, #104]	; (8007610 <HAL_TIM_Base_Start+0xa4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00e      	beq.n	80075c8 <HAL_TIM_Base_Start+0x5c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a19      	ldr	r2, [pc, #100]	; (8007614 <HAL_TIM_Base_Start+0xa8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d009      	beq.n	80075c8 <HAL_TIM_Base_Start+0x5c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a17      	ldr	r2, [pc, #92]	; (8007618 <HAL_TIM_Base_Start+0xac>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_TIM_Base_Start+0x5c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a16      	ldr	r2, [pc, #88]	; (800761c <HAL_TIM_Base_Start+0xb0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d111      	bne.n	80075ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	d010      	beq.n	80075fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0201 	orr.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ea:	e007      	b.n	80075fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40010000 	.word	0x40010000
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40014000 	.word	0x40014000

08007620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d001      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e044      	b.n	80076c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d018      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x6c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007662:	d013      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x6c>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00e      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x6c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d009      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x6c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a17      	ldr	r2, [pc, #92]	; (80076dc <HAL_TIM_Base_Start_IT+0xbc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x6c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d111      	bne.n	80076b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b06      	cmp	r3, #6
 800769c:	d010      	beq.n	80076c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0201 	orr.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ae:	e007      	b.n	80076c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800
 80076dc:	40000c00 	.word	0x40000c00
 80076e0:	40014000 	.word	0x40014000

080076e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d122      	bne.n	8007740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d11b      	bne.n	8007740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0202 	mvn.w	r2, #2
 8007710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f9b5 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 800772c:	e005      	b.n	800773a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9a7 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f9b8 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b04      	cmp	r3, #4
 800774c:	d122      	bne.n	8007794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d11b      	bne.n	8007794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0204 	mvn.w	r2, #4
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f98b 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f97d 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f98e 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0208 	mvn.w	r2, #8
 80077b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2204      	movs	r2, #4
 80077be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f961 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f953 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f964 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b10      	cmp	r3, #16
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b10      	cmp	r3, #16
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0210 	mvn.w	r2, #16
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2208      	movs	r2, #8
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f937 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f929 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f93a 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10e      	bne.n	8007868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d107      	bne.n	8007868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0201 	mvn.w	r2, #1
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7f9 fffc 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007872:	2b80      	cmp	r3, #128	; 0x80
 8007874:	d10e      	bne.n	8007894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d107      	bne.n	8007894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800788c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fab2 	bl	8007df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d10e      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8ff 	bl	8007abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d10e      	bne.n	80078ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d107      	bne.n	80078ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0220 	mvn.w	r2, #32
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa7c 	bl	8007de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_ConfigClockSource+0x1c>
 800790c:	2302      	movs	r3, #2
 800790e:	e0b4      	b.n	8007a7a <HAL_TIM_ConfigClockSource+0x186>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007948:	d03e      	beq.n	80079c8 <HAL_TIM_ConfigClockSource+0xd4>
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794e:	f200 8087 	bhi.w	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007956:	f000 8086 	beq.w	8007a66 <HAL_TIM_ConfigClockSource+0x172>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	d87f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b70      	cmp	r3, #112	; 0x70
 8007962:	d01a      	beq.n	800799a <HAL_TIM_ConfigClockSource+0xa6>
 8007964:	2b70      	cmp	r3, #112	; 0x70
 8007966:	d87b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b60      	cmp	r3, #96	; 0x60
 800796a:	d050      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x11a>
 800796c:	2b60      	cmp	r3, #96	; 0x60
 800796e:	d877      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b50      	cmp	r3, #80	; 0x50
 8007972:	d03c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0xfa>
 8007974:	2b50      	cmp	r3, #80	; 0x50
 8007976:	d873      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d058      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x13a>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d86f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b30      	cmp	r3, #48	; 0x30
 8007982:	d064      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	d86b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d060      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b20      	cmp	r3, #32
 800798e:	d867      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05c      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d05a      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007998:	e062      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6899      	ldr	r1, [r3, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f000 f98d 	bl	8007cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	609a      	str	r2, [r3, #8]
      break;
 80079c6:	e04f      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f000 f976 	bl	8007cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ea:	609a      	str	r2, [r3, #8]
      break;
 80079ec:	e03c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 f8ea 	bl	8007bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2150      	movs	r1, #80	; 0x50
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f943 	bl	8007c92 <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e02c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6859      	ldr	r1, [r3, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f000 f909 	bl	8007c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2160      	movs	r1, #96	; 0x60
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f933 	bl	8007c92 <TIM_ITRx_SetConfig>
      break;
 8007a2c:	e01c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 f8ca 	bl	8007bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2140      	movs	r1, #64	; 0x40
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f923 	bl	8007c92 <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e00c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 f91a 	bl	8007c92 <TIM_ITRx_SetConfig>
      break;
 8007a5e:	e003      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      break;
 8007a64:	e000      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a34      	ldr	r2, [pc, #208]	; (8007bb8 <TIM_Base_SetConfig+0xe4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00f      	beq.n	8007b0c <TIM_Base_SetConfig+0x38>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d00b      	beq.n	8007b0c <TIM_Base_SetConfig+0x38>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a31      	ldr	r2, [pc, #196]	; (8007bbc <TIM_Base_SetConfig+0xe8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <TIM_Base_SetConfig+0x38>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a30      	ldr	r2, [pc, #192]	; (8007bc0 <TIM_Base_SetConfig+0xec>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_Base_SetConfig+0x38>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a2f      	ldr	r2, [pc, #188]	; (8007bc4 <TIM_Base_SetConfig+0xf0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d108      	bne.n	8007b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a25      	ldr	r2, [pc, #148]	; (8007bb8 <TIM_Base_SetConfig+0xe4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d01b      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2c:	d017      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a22      	ldr	r2, [pc, #136]	; (8007bbc <TIM_Base_SetConfig+0xe8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <TIM_Base_SetConfig+0xec>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00f      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a20      	ldr	r2, [pc, #128]	; (8007bc4 <TIM_Base_SetConfig+0xf0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00b      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <TIM_Base_SetConfig+0xf4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d007      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <TIM_Base_SetConfig+0xf8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d003      	beq.n	8007b5e <TIM_Base_SetConfig+0x8a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a1d      	ldr	r2, [pc, #116]	; (8007bd0 <TIM_Base_SetConfig+0xfc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d108      	bne.n	8007b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a08      	ldr	r2, [pc, #32]	; (8007bb8 <TIM_Base_SetConfig+0xe4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d103      	bne.n	8007ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	615a      	str	r2, [r3, #20]
}
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40010000 	.word	0x40010000
 8007bbc:	40000400 	.word	0x40000400
 8007bc0:	40000800 	.word	0x40000800
 8007bc4:	40000c00 	.word	0x40000c00
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	f023 0201 	bic.w	r2, r3, #1
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f023 030a 	bic.w	r3, r3, #10
 8007c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	621a      	str	r2, [r3, #32]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b087      	sub	sp, #28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f023 0210 	bic.w	r2, r3, #16
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	031b      	lsls	r3, r3, #12
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f043 0307 	orr.w	r3, r3, #7
 8007cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	609a      	str	r2, [r3, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	021a      	lsls	r2, r3, #8
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	609a      	str	r2, [r3, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e050      	b.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d018      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d013      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a18      	ldr	r2, [pc, #96]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00e      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d10c      	bne.n	8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40010000 	.word	0x40010000
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40000800 	.word	0x40000800
 8007ddc:	40000c00 	.word	0x40000c00
 8007de0:	40014000 	.word	0x40014000

08007de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <__libc_init_array>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4d0d      	ldr	r5, [pc, #52]	; (8007e44 <__libc_init_array+0x38>)
 8007e10:	4c0d      	ldr	r4, [pc, #52]	; (8007e48 <__libc_init_array+0x3c>)
 8007e12:	1b64      	subs	r4, r4, r5
 8007e14:	10a4      	asrs	r4, r4, #2
 8007e16:	2600      	movs	r6, #0
 8007e18:	42a6      	cmp	r6, r4
 8007e1a:	d109      	bne.n	8007e30 <__libc_init_array+0x24>
 8007e1c:	4d0b      	ldr	r5, [pc, #44]	; (8007e4c <__libc_init_array+0x40>)
 8007e1e:	4c0c      	ldr	r4, [pc, #48]	; (8007e50 <__libc_init_array+0x44>)
 8007e20:	f000 fa5c 	bl	80082dc <_init>
 8007e24:	1b64      	subs	r4, r4, r5
 8007e26:	10a4      	asrs	r4, r4, #2
 8007e28:	2600      	movs	r6, #0
 8007e2a:	42a6      	cmp	r6, r4
 8007e2c:	d105      	bne.n	8007e3a <__libc_init_array+0x2e>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e34:	4798      	blx	r3
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7ee      	b.n	8007e18 <__libc_init_array+0xc>
 8007e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3e:	4798      	blx	r3
 8007e40:	3601      	adds	r6, #1
 8007e42:	e7f2      	b.n	8007e2a <__libc_init_array+0x1e>
 8007e44:	0800831c 	.word	0x0800831c
 8007e48:	0800831c 	.word	0x0800831c
 8007e4c:	0800831c 	.word	0x0800831c
 8007e50:	08008320 	.word	0x08008320

08007e54 <calloc>:
 8007e54:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <calloc+0xc>)
 8007e56:	460a      	mov	r2, r1
 8007e58:	4601      	mov	r1, r0
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	f000 b802 	b.w	8007e64 <_calloc_r>
 8007e60:	2000005c 	.word	0x2000005c

08007e64 <_calloc_r>:
 8007e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e66:	fba1 2402 	umull	r2, r4, r1, r2
 8007e6a:	b94c      	cbnz	r4, 8007e80 <_calloc_r+0x1c>
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	9201      	str	r2, [sp, #4]
 8007e70:	f000 f83e 	bl	8007ef0 <_malloc_r>
 8007e74:	9a01      	ldr	r2, [sp, #4]
 8007e76:	4605      	mov	r5, r0
 8007e78:	b930      	cbnz	r0, 8007e88 <_calloc_r+0x24>
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	b003      	add	sp, #12
 8007e7e:	bd30      	pop	{r4, r5, pc}
 8007e80:	220c      	movs	r2, #12
 8007e82:	6002      	str	r2, [r0, #0]
 8007e84:	2500      	movs	r5, #0
 8007e86:	e7f8      	b.n	8007e7a <_calloc_r+0x16>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f000 f807 	bl	8007e9c <memset>
 8007e8e:	e7f4      	b.n	8007e7a <_calloc_r+0x16>

08007e90 <__errno>:
 8007e90:	4b01      	ldr	r3, [pc, #4]	; (8007e98 <__errno+0x8>)
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	2000005c 	.word	0x2000005c

08007e9c <memset>:
 8007e9c:	4402      	add	r2, r0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d100      	bne.n	8007ea6 <memset+0xa>
 8007ea4:	4770      	bx	lr
 8007ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eaa:	e7f9      	b.n	8007ea0 <memset+0x4>

08007eac <__retarget_lock_acquire_recursive>:
 8007eac:	4770      	bx	lr

08007eae <__retarget_lock_release_recursive>:
 8007eae:	4770      	bx	lr

08007eb0 <sbrk_aligned>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	4e0e      	ldr	r6, [pc, #56]	; (8007eec <sbrk_aligned+0x3c>)
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	6831      	ldr	r1, [r6, #0]
 8007eb8:	4605      	mov	r5, r0
 8007eba:	b911      	cbnz	r1, 8007ec2 <sbrk_aligned+0x12>
 8007ebc:	f000 f89a 	bl	8007ff4 <_sbrk_r>
 8007ec0:	6030      	str	r0, [r6, #0]
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f895 	bl	8007ff4 <_sbrk_r>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	d00a      	beq.n	8007ee4 <sbrk_aligned+0x34>
 8007ece:	1cc4      	adds	r4, r0, #3
 8007ed0:	f024 0403 	bic.w	r4, r4, #3
 8007ed4:	42a0      	cmp	r0, r4
 8007ed6:	d007      	beq.n	8007ee8 <sbrk_aligned+0x38>
 8007ed8:	1a21      	subs	r1, r4, r0
 8007eda:	4628      	mov	r0, r5
 8007edc:	f000 f88a 	bl	8007ff4 <_sbrk_r>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d101      	bne.n	8007ee8 <sbrk_aligned+0x38>
 8007ee4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ee8:	4620      	mov	r0, r4
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	200004e8 	.word	0x200004e8

08007ef0 <_malloc_r>:
 8007ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef4:	1ccd      	adds	r5, r1, #3
 8007ef6:	f025 0503 	bic.w	r5, r5, #3
 8007efa:	3508      	adds	r5, #8
 8007efc:	2d0c      	cmp	r5, #12
 8007efe:	bf38      	it	cc
 8007f00:	250c      	movcc	r5, #12
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	4607      	mov	r7, r0
 8007f06:	db01      	blt.n	8007f0c <_malloc_r+0x1c>
 8007f08:	42a9      	cmp	r1, r5
 8007f0a:	d905      	bls.n	8007f18 <_malloc_r+0x28>
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	2600      	movs	r6, #0
 8007f12:	4630      	mov	r0, r6
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f18:	4e2f      	ldr	r6, [pc, #188]	; (8007fd8 <_malloc_r+0xe8>)
 8007f1a:	f000 f85f 	bl	8007fdc <__malloc_lock>
 8007f1e:	6833      	ldr	r3, [r6, #0]
 8007f20:	461c      	mov	r4, r3
 8007f22:	bb44      	cbnz	r4, 8007f76 <_malloc_r+0x86>
 8007f24:	4629      	mov	r1, r5
 8007f26:	4638      	mov	r0, r7
 8007f28:	f7ff ffc2 	bl	8007eb0 <sbrk_aligned>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	4604      	mov	r4, r0
 8007f30:	d14f      	bne.n	8007fd2 <_malloc_r+0xe2>
 8007f32:	6834      	ldr	r4, [r6, #0]
 8007f34:	4626      	mov	r6, r4
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d142      	bne.n	8007fc0 <_malloc_r+0xd0>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	d043      	beq.n	8007fc6 <_malloc_r+0xd6>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	4631      	mov	r1, r6
 8007f42:	4638      	mov	r0, r7
 8007f44:	eb04 0803 	add.w	r8, r4, r3
 8007f48:	f000 f854 	bl	8007ff4 <_sbrk_r>
 8007f4c:	4580      	cmp	r8, r0
 8007f4e:	d13a      	bne.n	8007fc6 <_malloc_r+0xd6>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	3503      	adds	r5, #3
 8007f54:	1aed      	subs	r5, r5, r3
 8007f56:	f025 0503 	bic.w	r5, r5, #3
 8007f5a:	3508      	adds	r5, #8
 8007f5c:	2d0c      	cmp	r5, #12
 8007f5e:	bf38      	it	cc
 8007f60:	250c      	movcc	r5, #12
 8007f62:	4629      	mov	r1, r5
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ffa3 	bl	8007eb0 <sbrk_aligned>
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d02b      	beq.n	8007fc6 <_malloc_r+0xd6>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	442b      	add	r3, r5
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	e00e      	b.n	8007f94 <_malloc_r+0xa4>
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	1b52      	subs	r2, r2, r5
 8007f7a:	d41e      	bmi.n	8007fba <_malloc_r+0xca>
 8007f7c:	2a0b      	cmp	r2, #11
 8007f7e:	d916      	bls.n	8007fae <_malloc_r+0xbe>
 8007f80:	1961      	adds	r1, r4, r5
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	6025      	str	r5, [r4, #0]
 8007f86:	bf18      	it	ne
 8007f88:	6059      	strne	r1, [r3, #4]
 8007f8a:	6863      	ldr	r3, [r4, #4]
 8007f8c:	bf08      	it	eq
 8007f8e:	6031      	streq	r1, [r6, #0]
 8007f90:	5162      	str	r2, [r4, r5]
 8007f92:	604b      	str	r3, [r1, #4]
 8007f94:	4638      	mov	r0, r7
 8007f96:	f104 060b 	add.w	r6, r4, #11
 8007f9a:	f000 f825 	bl	8007fe8 <__malloc_unlock>
 8007f9e:	f026 0607 	bic.w	r6, r6, #7
 8007fa2:	1d23      	adds	r3, r4, #4
 8007fa4:	1af2      	subs	r2, r6, r3
 8007fa6:	d0b4      	beq.n	8007f12 <_malloc_r+0x22>
 8007fa8:	1b9b      	subs	r3, r3, r6
 8007faa:	50a3      	str	r3, [r4, r2]
 8007fac:	e7b1      	b.n	8007f12 <_malloc_r+0x22>
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	bf0c      	ite	eq
 8007fb4:	6032      	streq	r2, [r6, #0]
 8007fb6:	605a      	strne	r2, [r3, #4]
 8007fb8:	e7ec      	b.n	8007f94 <_malloc_r+0xa4>
 8007fba:	4623      	mov	r3, r4
 8007fbc:	6864      	ldr	r4, [r4, #4]
 8007fbe:	e7b0      	b.n	8007f22 <_malloc_r+0x32>
 8007fc0:	4634      	mov	r4, r6
 8007fc2:	6876      	ldr	r6, [r6, #4]
 8007fc4:	e7b7      	b.n	8007f36 <_malloc_r+0x46>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	603b      	str	r3, [r7, #0]
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f000 f80c 	bl	8007fe8 <__malloc_unlock>
 8007fd0:	e79f      	b.n	8007f12 <_malloc_r+0x22>
 8007fd2:	6025      	str	r5, [r4, #0]
 8007fd4:	e7de      	b.n	8007f94 <_malloc_r+0xa4>
 8007fd6:	bf00      	nop
 8007fd8:	200004e4 	.word	0x200004e4

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f7ff bf65 	b.w	8007eac <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	200004dc 	.word	0x200004dc

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f7ff bf60 	b.w	8007eae <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	200004dc 	.word	0x200004dc

08007ff4 <_sbrk_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	; (8008010 <_sbrk_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7fa faaa 	bl	8002558 <_sbrk>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_sbrk_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_sbrk_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	200004e0 	.word	0x200004e0

08008014 <__udivmoddi4>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	9e08      	ldr	r6, [sp, #32]
 800801a:	460d      	mov	r5, r1
 800801c:	4604      	mov	r4, r0
 800801e:	460f      	mov	r7, r1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d14a      	bne.n	80080ba <__udivmoddi4+0xa6>
 8008024:	428a      	cmp	r2, r1
 8008026:	4694      	mov	ip, r2
 8008028:	d965      	bls.n	80080f6 <__udivmoddi4+0xe2>
 800802a:	fab2 f382 	clz	r3, r2
 800802e:	b143      	cbz	r3, 8008042 <__udivmoddi4+0x2e>
 8008030:	fa02 fc03 	lsl.w	ip, r2, r3
 8008034:	f1c3 0220 	rsb	r2, r3, #32
 8008038:	409f      	lsls	r7, r3
 800803a:	fa20 f202 	lsr.w	r2, r0, r2
 800803e:	4317      	orrs	r7, r2
 8008040:	409c      	lsls	r4, r3
 8008042:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008046:	fa1f f58c 	uxth.w	r5, ip
 800804a:	fbb7 f1fe 	udiv	r1, r7, lr
 800804e:	0c22      	lsrs	r2, r4, #16
 8008050:	fb0e 7711 	mls	r7, lr, r1, r7
 8008054:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008058:	fb01 f005 	mul.w	r0, r1, r5
 800805c:	4290      	cmp	r0, r2
 800805e:	d90a      	bls.n	8008076 <__udivmoddi4+0x62>
 8008060:	eb1c 0202 	adds.w	r2, ip, r2
 8008064:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8008068:	f080 811c 	bcs.w	80082a4 <__udivmoddi4+0x290>
 800806c:	4290      	cmp	r0, r2
 800806e:	f240 8119 	bls.w	80082a4 <__udivmoddi4+0x290>
 8008072:	3902      	subs	r1, #2
 8008074:	4462      	add	r2, ip
 8008076:	1a12      	subs	r2, r2, r0
 8008078:	b2a4      	uxth	r4, r4
 800807a:	fbb2 f0fe 	udiv	r0, r2, lr
 800807e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008082:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008086:	fb00 f505 	mul.w	r5, r0, r5
 800808a:	42a5      	cmp	r5, r4
 800808c:	d90a      	bls.n	80080a4 <__udivmoddi4+0x90>
 800808e:	eb1c 0404 	adds.w	r4, ip, r4
 8008092:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008096:	f080 8107 	bcs.w	80082a8 <__udivmoddi4+0x294>
 800809a:	42a5      	cmp	r5, r4
 800809c:	f240 8104 	bls.w	80082a8 <__udivmoddi4+0x294>
 80080a0:	4464      	add	r4, ip
 80080a2:	3802      	subs	r0, #2
 80080a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80080a8:	1b64      	subs	r4, r4, r5
 80080aa:	2100      	movs	r1, #0
 80080ac:	b11e      	cbz	r6, 80080b6 <__udivmoddi4+0xa2>
 80080ae:	40dc      	lsrs	r4, r3
 80080b0:	2300      	movs	r3, #0
 80080b2:	e9c6 4300 	strd	r4, r3, [r6]
 80080b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ba:	428b      	cmp	r3, r1
 80080bc:	d908      	bls.n	80080d0 <__udivmoddi4+0xbc>
 80080be:	2e00      	cmp	r6, #0
 80080c0:	f000 80ed 	beq.w	800829e <__udivmoddi4+0x28a>
 80080c4:	2100      	movs	r1, #0
 80080c6:	e9c6 0500 	strd	r0, r5, [r6]
 80080ca:	4608      	mov	r0, r1
 80080cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d0:	fab3 f183 	clz	r1, r3
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d149      	bne.n	800816c <__udivmoddi4+0x158>
 80080d8:	42ab      	cmp	r3, r5
 80080da:	d302      	bcc.n	80080e2 <__udivmoddi4+0xce>
 80080dc:	4282      	cmp	r2, r0
 80080de:	f200 80f8 	bhi.w	80082d2 <__udivmoddi4+0x2be>
 80080e2:	1a84      	subs	r4, r0, r2
 80080e4:	eb65 0203 	sbc.w	r2, r5, r3
 80080e8:	2001      	movs	r0, #1
 80080ea:	4617      	mov	r7, r2
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	d0e2      	beq.n	80080b6 <__udivmoddi4+0xa2>
 80080f0:	e9c6 4700 	strd	r4, r7, [r6]
 80080f4:	e7df      	b.n	80080b6 <__udivmoddi4+0xa2>
 80080f6:	b902      	cbnz	r2, 80080fa <__udivmoddi4+0xe6>
 80080f8:	deff      	udf	#255	; 0xff
 80080fa:	fab2 f382 	clz	r3, r2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f040 8090 	bne.w	8008224 <__udivmoddi4+0x210>
 8008104:	1a8a      	subs	r2, r1, r2
 8008106:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800810a:	fa1f fe8c 	uxth.w	lr, ip
 800810e:	2101      	movs	r1, #1
 8008110:	fbb2 f5f7 	udiv	r5, r2, r7
 8008114:	fb07 2015 	mls	r0, r7, r5, r2
 8008118:	0c22      	lsrs	r2, r4, #16
 800811a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800811e:	fb0e f005 	mul.w	r0, lr, r5
 8008122:	4290      	cmp	r0, r2
 8008124:	d908      	bls.n	8008138 <__udivmoddi4+0x124>
 8008126:	eb1c 0202 	adds.w	r2, ip, r2
 800812a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800812e:	d202      	bcs.n	8008136 <__udivmoddi4+0x122>
 8008130:	4290      	cmp	r0, r2
 8008132:	f200 80cb 	bhi.w	80082cc <__udivmoddi4+0x2b8>
 8008136:	4645      	mov	r5, r8
 8008138:	1a12      	subs	r2, r2, r0
 800813a:	b2a4      	uxth	r4, r4
 800813c:	fbb2 f0f7 	udiv	r0, r2, r7
 8008140:	fb07 2210 	mls	r2, r7, r0, r2
 8008144:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008148:	fb0e fe00 	mul.w	lr, lr, r0
 800814c:	45a6      	cmp	lr, r4
 800814e:	d908      	bls.n	8008162 <__udivmoddi4+0x14e>
 8008150:	eb1c 0404 	adds.w	r4, ip, r4
 8008154:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008158:	d202      	bcs.n	8008160 <__udivmoddi4+0x14c>
 800815a:	45a6      	cmp	lr, r4
 800815c:	f200 80bb 	bhi.w	80082d6 <__udivmoddi4+0x2c2>
 8008160:	4610      	mov	r0, r2
 8008162:	eba4 040e 	sub.w	r4, r4, lr
 8008166:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800816a:	e79f      	b.n	80080ac <__udivmoddi4+0x98>
 800816c:	f1c1 0720 	rsb	r7, r1, #32
 8008170:	408b      	lsls	r3, r1
 8008172:	fa22 fc07 	lsr.w	ip, r2, r7
 8008176:	ea4c 0c03 	orr.w	ip, ip, r3
 800817a:	fa05 f401 	lsl.w	r4, r5, r1
 800817e:	fa20 f307 	lsr.w	r3, r0, r7
 8008182:	40fd      	lsrs	r5, r7
 8008184:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008188:	4323      	orrs	r3, r4
 800818a:	fbb5 f8f9 	udiv	r8, r5, r9
 800818e:	fa1f fe8c 	uxth.w	lr, ip
 8008192:	fb09 5518 	mls	r5, r9, r8, r5
 8008196:	0c1c      	lsrs	r4, r3, #16
 8008198:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800819c:	fb08 f50e 	mul.w	r5, r8, lr
 80081a0:	42a5      	cmp	r5, r4
 80081a2:	fa02 f201 	lsl.w	r2, r2, r1
 80081a6:	fa00 f001 	lsl.w	r0, r0, r1
 80081aa:	d90b      	bls.n	80081c4 <__udivmoddi4+0x1b0>
 80081ac:	eb1c 0404 	adds.w	r4, ip, r4
 80081b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80081b4:	f080 8088 	bcs.w	80082c8 <__udivmoddi4+0x2b4>
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	f240 8085 	bls.w	80082c8 <__udivmoddi4+0x2b4>
 80081be:	f1a8 0802 	sub.w	r8, r8, #2
 80081c2:	4464      	add	r4, ip
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	b29d      	uxth	r5, r3
 80081c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80081cc:	fb09 4413 	mls	r4, r9, r3, r4
 80081d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80081d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80081d8:	45a6      	cmp	lr, r4
 80081da:	d908      	bls.n	80081ee <__udivmoddi4+0x1da>
 80081dc:	eb1c 0404 	adds.w	r4, ip, r4
 80081e0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80081e4:	d26c      	bcs.n	80082c0 <__udivmoddi4+0x2ac>
 80081e6:	45a6      	cmp	lr, r4
 80081e8:	d96a      	bls.n	80082c0 <__udivmoddi4+0x2ac>
 80081ea:	3b02      	subs	r3, #2
 80081ec:	4464      	add	r4, ip
 80081ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80081f2:	fba3 9502 	umull	r9, r5, r3, r2
 80081f6:	eba4 040e 	sub.w	r4, r4, lr
 80081fa:	42ac      	cmp	r4, r5
 80081fc:	46c8      	mov	r8, r9
 80081fe:	46ae      	mov	lr, r5
 8008200:	d356      	bcc.n	80082b0 <__udivmoddi4+0x29c>
 8008202:	d053      	beq.n	80082ac <__udivmoddi4+0x298>
 8008204:	b156      	cbz	r6, 800821c <__udivmoddi4+0x208>
 8008206:	ebb0 0208 	subs.w	r2, r0, r8
 800820a:	eb64 040e 	sbc.w	r4, r4, lr
 800820e:	fa04 f707 	lsl.w	r7, r4, r7
 8008212:	40ca      	lsrs	r2, r1
 8008214:	40cc      	lsrs	r4, r1
 8008216:	4317      	orrs	r7, r2
 8008218:	e9c6 7400 	strd	r7, r4, [r6]
 800821c:	4618      	mov	r0, r3
 800821e:	2100      	movs	r1, #0
 8008220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008224:	f1c3 0120 	rsb	r1, r3, #32
 8008228:	fa02 fc03 	lsl.w	ip, r2, r3
 800822c:	fa20 f201 	lsr.w	r2, r0, r1
 8008230:	fa25 f101 	lsr.w	r1, r5, r1
 8008234:	409d      	lsls	r5, r3
 8008236:	432a      	orrs	r2, r5
 8008238:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800823c:	fa1f fe8c 	uxth.w	lr, ip
 8008240:	fbb1 f0f7 	udiv	r0, r1, r7
 8008244:	fb07 1510 	mls	r5, r7, r0, r1
 8008248:	0c11      	lsrs	r1, r2, #16
 800824a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800824e:	fb00 f50e 	mul.w	r5, r0, lr
 8008252:	428d      	cmp	r5, r1
 8008254:	fa04 f403 	lsl.w	r4, r4, r3
 8008258:	d908      	bls.n	800826c <__udivmoddi4+0x258>
 800825a:	eb1c 0101 	adds.w	r1, ip, r1
 800825e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8008262:	d22f      	bcs.n	80082c4 <__udivmoddi4+0x2b0>
 8008264:	428d      	cmp	r5, r1
 8008266:	d92d      	bls.n	80082c4 <__udivmoddi4+0x2b0>
 8008268:	3802      	subs	r0, #2
 800826a:	4461      	add	r1, ip
 800826c:	1b49      	subs	r1, r1, r5
 800826e:	b292      	uxth	r2, r2
 8008270:	fbb1 f5f7 	udiv	r5, r1, r7
 8008274:	fb07 1115 	mls	r1, r7, r5, r1
 8008278:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800827c:	fb05 f10e 	mul.w	r1, r5, lr
 8008280:	4291      	cmp	r1, r2
 8008282:	d908      	bls.n	8008296 <__udivmoddi4+0x282>
 8008284:	eb1c 0202 	adds.w	r2, ip, r2
 8008288:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800828c:	d216      	bcs.n	80082bc <__udivmoddi4+0x2a8>
 800828e:	4291      	cmp	r1, r2
 8008290:	d914      	bls.n	80082bc <__udivmoddi4+0x2a8>
 8008292:	3d02      	subs	r5, #2
 8008294:	4462      	add	r2, ip
 8008296:	1a52      	subs	r2, r2, r1
 8008298:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800829c:	e738      	b.n	8008110 <__udivmoddi4+0xfc>
 800829e:	4631      	mov	r1, r6
 80082a0:	4630      	mov	r0, r6
 80082a2:	e708      	b.n	80080b6 <__udivmoddi4+0xa2>
 80082a4:	4639      	mov	r1, r7
 80082a6:	e6e6      	b.n	8008076 <__udivmoddi4+0x62>
 80082a8:	4610      	mov	r0, r2
 80082aa:	e6fb      	b.n	80080a4 <__udivmoddi4+0x90>
 80082ac:	4548      	cmp	r0, r9
 80082ae:	d2a9      	bcs.n	8008204 <__udivmoddi4+0x1f0>
 80082b0:	ebb9 0802 	subs.w	r8, r9, r2
 80082b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80082b8:	3b01      	subs	r3, #1
 80082ba:	e7a3      	b.n	8008204 <__udivmoddi4+0x1f0>
 80082bc:	4645      	mov	r5, r8
 80082be:	e7ea      	b.n	8008296 <__udivmoddi4+0x282>
 80082c0:	462b      	mov	r3, r5
 80082c2:	e794      	b.n	80081ee <__udivmoddi4+0x1da>
 80082c4:	4640      	mov	r0, r8
 80082c6:	e7d1      	b.n	800826c <__udivmoddi4+0x258>
 80082c8:	46d0      	mov	r8, sl
 80082ca:	e77b      	b.n	80081c4 <__udivmoddi4+0x1b0>
 80082cc:	3d02      	subs	r5, #2
 80082ce:	4462      	add	r2, ip
 80082d0:	e732      	b.n	8008138 <__udivmoddi4+0x124>
 80082d2:	4608      	mov	r0, r1
 80082d4:	e70a      	b.n	80080ec <__udivmoddi4+0xd8>
 80082d6:	4464      	add	r4, ip
 80082d8:	3802      	subs	r0, #2
 80082da:	e742      	b.n	8008162 <__udivmoddi4+0x14e>

080082dc <_init>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr

080082e8 <_fini>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr
