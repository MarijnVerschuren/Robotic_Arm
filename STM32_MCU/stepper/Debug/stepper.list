
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008168  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008300  08008300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008320  08008320  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008328  08008328  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000078  080083a4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080083a4  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014122  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd3  00000000  00000000  000341c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00036fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00038178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a00  00000000  00000000  000391f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016667  00000000  00000000  00051bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae29  00000000  00000000  00068257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e28  00000000  00000000  001030d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080082e8 	.word	0x080082e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080082e8 	.word	0x080082e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_ADC1_Init+0x9c>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xa0>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e2a:	f001 febf 	bl	8002bac <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f001 fb2a 	bl	800248c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e4a:	f002 f91b 	bl	8003084 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e54:	f001 fb1a 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000094 	.word	0x20000094
 8000e64:	40012000 	.word	0x40012000
 8000e68:	0f000001 	.word	0x0f000001

08000e6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a37      	ldr	r2, [pc, #220]	; (8000f68 <HAL_ADC_MspInit+0xfc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d168      	bne.n	8000f60 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a35      	ldr	r2, [pc, #212]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4825      	ldr	r0, [pc, #148]	; (8000f70 <HAL_ADC_MspInit+0x104>)
 8000eda:	f003 f83f 	bl	8003f5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_ADC_MspInit+0x10c>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f24:	2203      	movs	r2, #3
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f34:	480f      	ldr	r0, [pc, #60]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f36:	f002 fc71 	bl	800381c <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000f40:	f001 faa4 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2012      	movs	r0, #18
 8000f56:	f002 fc2a 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f5a:	2012      	movs	r0, #18
 8000f5c:	f002 fc43 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	40026470 	.word	0x40026470

08000f7c <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	2118      	movs	r1, #24
 8000f82:	2001      	movs	r0, #1
 8000f84:	f007 f8ae 	bl	80080e4 <calloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <AS5600_init+0x16>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b9b      	ldrb	r3, [r3, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <AS5600_init+0x24>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7bdb      	ldrb	r3, [r3, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <AS5600_init+0x32>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7c1b      	ldrb	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <AS5600_init+0x40>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7c5b      	ldrb	r3, [r3, #17]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <AS5600_init+0x4e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c9b      	ldrb	r3, [r3, #18]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <AS5600_init+0x5c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7cdb      	ldrb	r3, [r3, #19]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <AS5600_init+0x6a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7d1b      	ldrb	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <AS5600_init+0x78>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7d5b      	ldrb	r3, [r3, #21]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <AS5600_init+0x86>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7bdb      	ldrb	r3, [r3, #15]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f86a 	bl	80010f4 <AS5600_set_low_power_mode>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <AS5600_init+0x9c>
 8001026:	2301      	movs	r3, #1
 8001028:	e05f      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7c1b      	ldrb	r3, [r3, #16]
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f8b3 	bl	800119c <AS5600_set_hysteresis>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <AS5600_init+0xb2>
 800103c:	2301      	movs	r3, #1
 800103e:	e054      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7c59      	ldrb	r1, [r3, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7c9b      	ldrb	r3, [r3, #18]
 8001048:	461a      	mov	r2, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8fa 	bl	8001244 <AS5600_set_output_mode>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <AS5600_init+0xcc>
 8001056:	2301      	movs	r3, #1
 8001058:	e047      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7cdb      	ldrb	r3, [r3, #19]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f983 	bl	800136c <AS5600_set_slow_filter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <AS5600_init+0xe2>
 800106c:	2301      	movs	r3, #1
 800106e:	e03c      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7d1b      	ldrb	r3, [r3, #20]
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f9cc 	bl	8001414 <AS5600_set_fast_filter_threshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <AS5600_init+0xf8>
 8001082:	2301      	movs	r3, #1
 8001084:	e031      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7d5b      	ldrb	r3, [r3, #21]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fa61 	bl	8001554 <AS5600_set_watchdog_timer>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <AS5600_init+0x10e>
 8001098:	2301      	movs	r3, #1
 800109a:	e026      	b.n	80010ea <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa80 	bl	80015a2 <AS5600_write_config_register>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <AS5600_init+0x11e>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e01e      	b.n	80010ea <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 80010b0:	f107 030f 	add.w	r3, r7, #15
 80010b4:	4619      	mov	r1, r3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fab2 	bl	8001620 <AS5600_get_magnet_status>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <AS5600_init+0x138>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e011      	b.n	80010ea <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <AS5600_init+0x15a>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <AS5600_init+0x15c>
	return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	3b01      	subs	r3, #1
 8001104:	2b03      	cmp	r3, #3
 8001106:	d83f      	bhi.n	8001188 <AS5600_set_low_power_mode+0x94>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <AS5600_set_low_power_mode+0x1c>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001121 	.word	0x08001121
 8001114:	08001133 	.word	0x08001133
 8001118:	08001155 	.word	0x08001155
 800111c:	08001177 	.word	0x08001177
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7ddb      	ldrb	r3, [r3, #23]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f023 0303 	bic.w	r3, r3, #3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	75da      	strb	r2, [r3, #23]
		break;
 8001130:	e02c      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7ddb      	ldrb	r3, [r3, #23]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7ddb      	ldrb	r3, [r3, #23]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	75da      	strb	r2, [r3, #23]
	break;
 8001152:	e01b      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7ddb      	ldrb	r3, [r3, #23]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7ddb      	ldrb	r3, [r3, #23]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	75da      	strb	r2, [r3, #23]
		break;
 8001174:	e00a      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7ddb      	ldrb	r3, [r3, #23]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0303 	orr.w	r3, r3, #3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	75da      	strb	r2, [r3, #23]
		break;
 8001186:	e001      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d83f      	bhi.n	8001230 <AS5600_set_hysteresis+0x94>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <AS5600_set_hysteresis+0x1c>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011db 	.word	0x080011db
 80011c0:	080011fd 	.word	0x080011fd
 80011c4:	0800121f 	.word	0x0800121f
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7ddb      	ldrb	r3, [r3, #23]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f023 030c 	bic.w	r3, r3, #12
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	75da      	strb	r2, [r3, #23]
		break;
 80011d8:	e02c      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7ddb      	ldrb	r3, [r3, #23]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7ddb      	ldrb	r3, [r3, #23]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f023 0308 	bic.w	r3, r3, #8
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	75da      	strb	r2, [r3, #23]
		break;
 80011fa:	e01b      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7ddb      	ldrb	r3, [r3, #23]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7ddb      	ldrb	r3, [r3, #23]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	75da      	strb	r2, [r3, #23]
		break;
 800121c:	e00a      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7ddb      	ldrb	r3, [r3, #23]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 030c 	orr.w	r3, r3, #12
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	75da      	strb	r2, [r3, #23]
		break;
 800122e:	e001      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d020      	beq.n	80012a0 <AS5600_set_output_mode+0x5c>
 800125e:	2b03      	cmp	r3, #3
 8001260:	dc31      	bgt.n	80012c6 <AS5600_set_output_mode+0x82>
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <AS5600_set_output_mode+0x28>
 8001266:	2b02      	cmp	r3, #2
 8001268:	d009      	beq.n	800127e <AS5600_set_output_mode+0x3a>
 800126a:	e02c      	b.n	80012c6 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7ddb      	ldrb	r3, [r3, #23]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001276:	b2da      	uxtb	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	75da      	strb	r2, [r3, #23]
		break;
 800127c:	e025      	b.n	80012ca <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7ddb      	ldrb	r3, [r3, #23]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7ddb      	ldrb	r3, [r3, #23]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f023 0320 	bic.w	r3, r3, #32
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	75da      	strb	r2, [r3, #23]
		break;
 800129e:	e014      	b.n	80012ca <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7ddb      	ldrb	r3, [r3, #23]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7ddb      	ldrb	r3, [r3, #23]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 80012c6:	2301      	movs	r3, #1
 80012c8:	e04a      	b.n	8001360 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d045      	beq.n	800135c <AS5600_set_output_mode+0x118>
		switch (frequency) {
 80012d0:	78bb      	ldrb	r3, [r7, #2]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d83f      	bhi.n	8001358 <AS5600_set_output_mode+0x114>
 80012d8:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <AS5600_set_output_mode+0x9c>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	08001303 	.word	0x08001303
 80012e8:	08001325 	.word	0x08001325
 80012ec:	08001347 	.word	0x08001347
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7ddb      	ldrb	r3, [r3, #23]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	75da      	strb	r2, [r3, #23]
			break;
 8001300:	e02d      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7ddb      	ldrb	r3, [r3, #23]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7ddb      	ldrb	r3, [r3, #23]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	75da      	strb	r2, [r3, #23]
			break;
 8001322:	e01c      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7ddb      	ldrb	r3, [r3, #23]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7ddb      	ldrb	r3, [r3, #23]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	75da      	strb	r2, [r3, #23]
			break;
 8001344:	e00b      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7ddb      	ldrb	r3, [r3, #23]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	75da      	strb	r2, [r3, #23]
			break;
 8001356:	e002      	b.n	800135e <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 8001358:	2301      	movs	r3, #1
 800135a:	e001      	b.n	8001360 <AS5600_set_output_mode+0x11c>
		}
	}
 800135c:	bf00      	nop
	return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	3b01      	subs	r3, #1
 800137c:	2b03      	cmp	r3, #3
 800137e:	d83f      	bhi.n	8001400 <AS5600_set_slow_filter+0x94>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <AS5600_set_slow_filter+0x1c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001399 	.word	0x08001399
 800138c:	080013ab 	.word	0x080013ab
 8001390:	080013cd 	.word	0x080013cd
 8001394:	080013ef 	.word	0x080013ef
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7d9b      	ldrb	r3, [r3, #22]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	759a      	strb	r2, [r3, #22]
		break;
 80013a8:	e02c      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7d9b      	ldrb	r3, [r3, #22]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7d9b      	ldrb	r3, [r3, #22]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	759a      	strb	r2, [r3, #22]
		break;
 80013ca:	e01b      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7d9b      	ldrb	r3, [r3, #22]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7d9b      	ldrb	r3, [r3, #22]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	759a      	strb	r2, [r3, #22]
		break;
 80013ec:	e00a      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7d9b      	ldrb	r3, [r3, #22]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0303 	orr.w	r3, r3, #3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	759a      	strb	r2, [r3, #22]
		break;
 80013fe:	e001      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	3b01      	subs	r3, #1
 8001424:	2b07      	cmp	r3, #7
 8001426:	f200 808b 	bhi.w	8001540 <AS5600_set_fast_filter_threshold+0x12c>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <AS5600_set_fast_filter_threshold+0x1c>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001451 	.word	0x08001451
 8001434:	08001463 	.word	0x08001463
 8001438:	08001485 	.word	0x08001485
 800143c:	080014a7 	.word	0x080014a7
 8001440:	080014c9 	.word	0x080014c9
 8001444:	080014eb 	.word	0x080014eb
 8001448:	0800150d 	.word	0x0800150d
 800144c:	0800152f 	.word	0x0800152f
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7d9b      	ldrb	r3, [r3, #22]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f023 031c 	bic.w	r3, r3, #28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	759a      	strb	r2, [r3, #22]
		break;
 8001460:	e070      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7d9b      	ldrb	r3, [r3, #22]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f023 0318 	bic.w	r3, r3, #24
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7d9b      	ldrb	r3, [r3, #22]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	759a      	strb	r2, [r3, #22]
		break;
 8001482:	e05f      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7d9b      	ldrb	r3, [r3, #22]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f023 0314 	bic.w	r3, r3, #20
 800148e:	b2da      	uxtb	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7d9b      	ldrb	r3, [r3, #22]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	759a      	strb	r2, [r3, #22]
		break;
 80014a4:	e04e      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7d9b      	ldrb	r3, [r3, #22]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f023 0310 	bic.w	r3, r3, #16
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7d9b      	ldrb	r3, [r3, #22]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f043 030c 	orr.w	r3, r3, #12
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	759a      	strb	r2, [r3, #22]
		break;
 80014c6:	e03d      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7d9b      	ldrb	r3, [r3, #22]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f023 030c 	bic.w	r3, r3, #12
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7d9b      	ldrb	r3, [r3, #22]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	759a      	strb	r2, [r3, #22]
		break;
 80014e8:	e02c      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7d9b      	ldrb	r3, [r3, #22]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f023 0308 	bic.w	r3, r3, #8
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7d9b      	ldrb	r3, [r3, #22]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0314 	orr.w	r3, r3, #20
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	759a      	strb	r2, [r3, #22]
		break;
 800150a:	e01b      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7d9b      	ldrb	r3, [r3, #22]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	b2da      	uxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7d9b      	ldrb	r3, [r3, #22]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f043 0318 	orr.w	r3, r3, #24
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	759a      	strb	r2, [r3, #22]
		break;
 800152c:	e00a      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7d9b      	ldrb	r3, [r3, #22]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 031c 	orr.w	r3, r3, #28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	759a      	strb	r2, [r3, #22]
		break;
 800153e:	e001      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d002      	beq.n	800156c <AS5600_set_watchdog_timer+0x18>
 8001566:	2b02      	cmp	r3, #2
 8001568:	d009      	beq.n	800157e <AS5600_set_watchdog_timer+0x2a>
 800156a:	e011      	b.n	8001590 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7d9b      	ldrb	r3, [r3, #22]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	759a      	strb	r2, [r3, #22]
		break;
 800157c:	e00a      	b.n	8001594 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7d9b      	ldrb	r3, [r3, #22]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	b2da      	uxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	759a      	strb	r2, [r3, #22]
		break;
 800158e:	e001      	b.n	8001594 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af04      	add	r7, sp, #16
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3316      	adds	r3, #22
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6892      	ldr	r2, [r2, #8]
 80015b6:	9202      	str	r2, [sp, #8]
 80015b8:	2202      	movs	r2, #2
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	2207      	movs	r2, #7
 80015c2:	216c      	movs	r1, #108	; 0x6c
 80015c4:	f002 ffac 	bl	8004520 <HAL_I2C_Mem_Write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 80015dc:	2300      	movs	r3, #0
 80015de:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2302      	movs	r3, #2
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	220e      	movs	r2, #14
 80015f8:	216c      	movs	r1, #108	; 0x6c
 80015fa:	f003 f88b 	bl	8004714 <HAL_I2C_Mem_Read>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 8001602:	7b3b      	ldrb	r3, [r7, #12]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	801a      	strh	r2, [r3, #0]
	return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	220b      	movs	r2, #11
 8001640:	216c      	movs	r1, #108	; 0x6c
 8001642:	f003 f867 	bl	8004714 <HAL_I2C_Mem_Read>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_DMA_Init+0x5c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <MX_DMA_Init+0x5c>)
 8001660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_DMA_Init+0x5c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2038      	movs	r0, #56	; 0x38
 8001678:	f002 f899 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800167c:	2038      	movs	r0, #56	; 0x38
 800167e:	f002 f8b2 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	203b      	movs	r0, #59	; 0x3b
 8001688:	f002 f891 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800168c:	203b      	movs	r0, #59	; 0x3b
 800168e:	f002 f8aa 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	203c      	movs	r0, #60	; 0x3c
 8001698:	f002 f889 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800169c:	203c      	movs	r0, #60	; 0x3c
 800169e:	f002 f8a2 	bl	80037e6 <HAL_NVIC_EnableIRQ>

}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b51      	ldr	r3, [pc, #324]	; (8001810 <MX_GPIO_Init+0x160>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a50      	ldr	r2, [pc, #320]	; (8001810 <MX_GPIO_Init+0x160>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <MX_GPIO_Init+0x160>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <MX_GPIO_Init+0x160>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a49      	ldr	r2, [pc, #292]	; (8001810 <MX_GPIO_Init+0x160>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <MX_GPIO_Init+0x160>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <MX_GPIO_Init+0x160>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a42      	ldr	r2, [pc, #264]	; (8001810 <MX_GPIO_Init+0x160>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <MX_GPIO_Init+0x160>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001720:	483c      	ldr	r0, [pc, #240]	; (8001814 <MX_GPIO_Init+0x164>)
 8001722:	f002 fd9f 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f24e 0120 	movw	r1, #57376	; 0xe020
 800172c:	4839      	ldr	r0, [pc, #228]	; (8001814 <MX_GPIO_Init+0x164>)
 800172e:	f002 fd99 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001738:	4837      	ldr	r0, [pc, #220]	; (8001818 <MX_GPIO_Init+0x168>)
 800173a:	f002 fd93 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 800173e:	2308      	movs	r3, #8
 8001740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	4831      	ldr	r0, [pc, #196]	; (8001818 <MX_GPIO_Init+0x168>)
 8001754:	f002 fc02 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 8001758:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800175c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800175e:	2311      	movs	r3, #17
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	4828      	ldr	r0, [pc, #160]	; (8001814 <MX_GPIO_Init+0x164>)
 8001772:	f002 fbf3 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800177c:	2311      	movs	r3, #17
 800177e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <MX_GPIO_Init+0x164>)
 8001790:	f002 fbe4 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 8001794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800179a:	2311      	movs	r3, #17
 800179c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4819      	ldr	r0, [pc, #100]	; (8001814 <MX_GPIO_Init+0x164>)
 80017ae:	f002 fbd5 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 80017b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017b8:	2311      	movs	r3, #17
 80017ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	4813      	ldr	r0, [pc, #76]	; (8001818 <MX_GPIO_Init+0x168>)
 80017cc:	f002 fbc6 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 80017d0:	2320      	movs	r3, #32
 80017d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017d4:	2311      	movs	r3, #17
 80017d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <MX_GPIO_Init+0x164>)
 80017e8:	f002 fbb8 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 80017ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_GPIO_Init+0x164>)
 8001802:	f002 fbab 	bl	8003f5c <HAL_GPIO_Init>

}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40020400 	.word	0x40020400
 8001818:	40020000 	.word	0x40020000

0800181c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_I2C1_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <MX_I2C1_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_I2C1_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MX_I2C1_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_I2C1_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_I2C1_Init+0x50>)
 800185a:	f002 fd1d 	bl	8004298 <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 fe12 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000013c 	.word	0x2000013c
 8001870:	40005400 	.word	0x40005400
 8001874:	000186a0 	.word	0x000186a0

08001878 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <HAL_I2C_MspInit+0xa4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d13b      	bne.n	8001912 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_I2C_MspInit+0xa8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_I2C_MspInit+0xa8>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_I2C_MspInit+0xa8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ba:	2312      	movs	r3, #18
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c6:	2304      	movs	r3, #4
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <HAL_I2C_MspInit+0xac>)
 80018d2:	f002 fb43 	bl	8003f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_I2C_MspInit+0xa8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_I2C_MspInit+0xa8>)
 80018e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_I2C_MspInit+0xa8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	201f      	movs	r0, #31
 80018f8:	f001 ff59 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018fc:	201f      	movs	r0, #31
 80018fe:	f001 ff72 	bl	80037e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2020      	movs	r0, #32
 8001908:	f001 ff51 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800190c:	2020      	movs	r0, #32
 800190e:	f001 ff6a 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40005400 	.word	0x40005400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <delay_us>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t n) { TIM2->CNT = 0; while(TIM2->CNT < n); }
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
 8001938:	bf00      	nop
 800193a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d8f9      	bhi.n	800193a <delay_us+0x12>
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <set_motor_setting+0x84>)
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	491d      	ldr	r1, [pc, #116]	; (80019d8 <set_motor_setting+0x84>)
 8001962:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 8001966:	4013      	ands	r3, r2
 8001968:	614b      	str	r3, [r1, #20]
	switch(instruction->settings.micro_step) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7b1b      	ldrb	r3, [r3, #12]
 800196e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d018      	beq.n	80019aa <set_motor_setting+0x56>
 8001978:	2b03      	cmp	r3, #3
 800197a:	dc03      	bgt.n	8001984 <set_motor_setting+0x30>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d008      	beq.n	8001992 <set_motor_setting+0x3e>
 8001980:	2b02      	cmp	r3, #2
 8001982:	d00d      	beq.n	80019a0 <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <set_motor_setting+0x84>)
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <set_motor_setting+0x84>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198e:	6153      	str	r3, [r2, #20]
 8001990:	e012      	b.n	80019b8 <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <set_motor_setting+0x84>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <set_motor_setting+0x84>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6153      	str	r3, [r2, #20]
 800199e:	e00b      	b.n	80019b8 <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <set_motor_setting+0x84>)
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <set_motor_setting+0x84>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	6153      	str	r3, [r2, #20]
 80019a8:	e006      	b.n	80019b8 <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <set_motor_setting+0x84>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <set_motor_setting+0x84>)
 80019b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->settings.spread_mode);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7b1b      	ldrb	r3, [r3, #12]
 80019bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <set_motor_setting+0x88>)
 80019ca:	f002 fc4b 	bl	8004264 <HAL_GPIO_WritePin>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400

080019e0 <euler_method>:
void euler_method() {  // typical execution time ~45 us
 80019e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019e4:	af00      	add	r7, sp, #0
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <euler_method+0xe8>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd36 	bl	800045c <__aeabi_ui2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	a132      	add	r1, pc, #200	; (adr r1, 8001ac0 <euler_method+0xe0>)
 80019f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019fa:	f7fe fed3 	bl	80007a4 <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <euler_method+0xec>)
 8001a0c:	f7fe fbea 	bl	80001e4 <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	492c      	ldr	r1, [pc, #176]	; (8001acc <euler_method+0xec>)
 8001a1a:	f7fe fec3 	bl	80007a4 <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	461d      	mov	r5, r3
	AS5600_pos_f64 = (AS5600_analog * alpha) + ((1 - alpha) * AS5600_pos_f64);
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <euler_method+0xf0>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd25 	bl	800047c <__aeabi_i2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fd89 	bl	8000550 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4690      	mov	r8, r2
 8001a44:	4699      	mov	r9, r3
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	491f      	ldr	r1, [pc, #124]	; (8001acc <euler_method+0xec>)
 8001a50:	f7fe fbc6 	bl	80001e0 <__aeabi_dsub>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <euler_method+0xf4>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fd75 	bl	8000550 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	f7fe fbb9 	bl	80001e4 <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <euler_method+0xf4>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
	AS5600_delta_pos = (uint16_t)AS5600_pos_f64 - AS5600_pos;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <euler_method+0xf4>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7fe fffd 	bl	8000a84 <__aeabi_d2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <euler_method+0xf8>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <euler_method+0xfc>)
 8001a9a:	801a      	strh	r2, [r3, #0]
	AS5600_pos = (uint16_t)AS5600_pos_f64;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <euler_method+0xf4>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe ffed 	bl	8000a84 <__aeabi_d2uiz>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <euler_method+0xf8>)
 8001ab0:	801a      	strh	r2, [r3, #0]
	TIM5->CNT = 0;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <euler_method+0xe8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ab8:	bf00      	nop
 8001aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001abe:	bf00      	nop
 8001ac0:	66666666 	.word	0x66666666
 8001ac4:	40026666 	.word	0x40026666
 8001ac8:	40000c00 	.word	0x40000c00
 8001acc:	3ff00000 	.word	0x3ff00000
 8001ad0:	200001a4 	.word	0x200001a4
 8001ad4:	200001a8 	.word	0x200001a8
 8001ad8:	200001b0 	.word	0x200001b0
 8001adc:	200001b2 	.word	0x200001b2

08001ae0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b08a      	sub	sp, #40	; 0x28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6278      	str	r0, [r7, #36]	; 0x24
	if (htim != &htim10) { return; }
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	4bc9      	ldr	r3, [pc, #804]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f040 8399 	bne.w	8002226 <HAL_TIM_PeriodElapsedCallback+0x746>
	//if (pre_euler_func) { (*pre_euler_func)(); }
	euler_method();  // update AS5600_pos, AS5600_delta_pos using the selected mode
 8001af4:	f7ff ff74 	bl	80019e0 <euler_method>
	target_delta = target - AS5600_pos;
 8001af8:	4bc7      	ldr	r3, [pc, #796]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	4bc7      	ldr	r3, [pc, #796]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4ac6      	ldr	r2, [pc, #792]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b08:	8013      	strh	r3, [r2, #0]
	target_delta = ABS(target_delta) < ABS(target_delta - 4096) ? target_delta : target_delta - 4096;
 8001b0a:	4bc5      	ldr	r3, [pc, #788]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dc2a      	bgt.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x8a>
 8001b14:	4bc2      	ldr	r3, [pc, #776]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1a:	425a      	negs	r2, r3
 8001b1c:	4bc0      	ldr	r3, [pc, #768]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b26:	bfcc      	ite	gt
 8001b28:	2301      	movgt	r3, #1
 8001b2a:	2300      	movle	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	da08      	bge.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x64>
 8001b32:	4bbb      	ldr	r3, [pc, #748]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	e015      	b.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001b44:	4bb6      	ldr	r3, [pc, #728]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b4e:	d108      	bne.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x82>
 8001b50:	4bb3      	ldr	r3, [pc, #716]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	e006      	b.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001b62:	4baf      	ldr	r3, [pc, #700]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	e002      	b.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001b6a:	4bad      	ldr	r3, [pc, #692]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	4aab      	ldr	r2, [pc, #684]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b72:	8013      	strh	r3, [r2, #0]
	} else if (euler_next == &AS5600_i2c && ABS_16(target_delta) > AS5600_I2C_ERROR_MARGIN) {	// switch to ADC mode
		pre_euler_func = NULL;										// disable slow I2C mode
		euler_next = &AS5600_analog;
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&AS5600_analog, 1);	// enable fast ADC mode
	}*/
	if (target_delta != 0) {
 8001b74:	4baa      	ldr	r3, [pc, #680]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 834b 	beq.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x736>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001b80:	4ba7      	ldr	r3, [pc, #668]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	0bdb      	lsrs	r3, r3, #15
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b92:	48a4      	ldr	r0, [pc, #656]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001b94:	f002 fb66 	bl	8004264 <HAL_GPIO_WritePin>
		step_gain = MIN(ABS((double)target_delta / 1024), MIN(ABS(((double)target_delta + 1024) / 1024), ABS(((double)target_delta - 1024) / 1024)));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001b98:	4ba1      	ldr	r3, [pc, #644]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc6c 	bl	800047c <__aeabi_i2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b9f      	ldr	r3, [pc, #636]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001baa:	f7fe fdfb 	bl	80007a4 <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	f7fe ff57 	bl	8000a70 <__aeabi_dcmpgt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00f      	beq.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x108>
 8001bc8:	4b95      	ldr	r3, [pc, #596]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc54 	bl	800047c <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b93      	ldr	r3, [pc, #588]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001bda:	f7fe fde3 	bl	80007a4 <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001be6:	e010      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x12a>
 8001be8:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc44 	bl	800047c <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001bfa:	f7fe fdd3 	bl	80007a4 <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	61ba      	str	r2, [r7, #24]
 8001c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc33 	bl	800047c <__aeabi_i2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001c1c:	f7fe fae2 	bl	80001e4 <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001c2e:	f7fe fdb9 	bl	80007a4 <__aeabi_ddiv>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f7fe ff15 	bl	8000a70 <__aeabi_dcmpgt>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d018      	beq.n	8001c7e <HAL_TIM_PeriodElapsedCallback+0x19e>
 8001c4c:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc12 	bl	800047c <__aeabi_i2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001c5e:	f7fe fac1 	bl	80001e4 <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001c70:	f7fe fd98 	bl	80007a4 <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001c7c:	e019      	b.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8001c7e:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fbf9 	bl	800047c <__aeabi_i2d>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001c90:	f7fe faa8 	bl	80001e4 <__adddf3>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001ca2:	f7fe fd7f 	bl	80007a4 <__aeabi_ddiv>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	613a      	str	r2, [r7, #16]
 8001cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbdf 	bl	800047c <__aeabi_i2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001cc4:	f7fe fa8c 	bl	80001e0 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001cd6:	f7fe fd65 	bl	80007a4 <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	f7fe fec1 	bl	8000a70 <__aeabi_dcmpgt>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d018      	beq.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x246>
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fbbe 	bl	800047c <__aeabi_i2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001d06:	f7fe fa6b 	bl	80001e0 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001d18:	f7fe fd44 	bl	80007a4 <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4692      	mov	sl, r2
 8001d22:	469b      	mov	fp, r3
 8001d24:	e018      	b.n	8001d58 <HAL_TIM_PeriodElapsedCallback+0x278>
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fba5 	bl	800047c <__aeabi_i2d>
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001d38:	f7fe fa52 	bl	80001e0 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001d4a:	f7fe fd2b 	bl	80007a4 <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4692      	mov	sl, r2
 8001d54:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001d58:	4652      	mov	r2, sl
 8001d5a:	465b      	mov	r3, fp
 8001d5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d60:	f7fe fe68 	bl	8000a34 <__aeabi_dcmplt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d060      	beq.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x34c>
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb83 	bl	800047c <__aeabi_i2d>
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001d7c:	f7fe fa32 	bl	80001e4 <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001d8e:	f7fe fd09 	bl	80007a4 <__aeabi_ddiv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f7fe fe65 	bl	8000a70 <__aeabi_dcmpgt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x2fe>
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb62 	bl	800047c <__aeabi_i2d>
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001dbe:	f7fe fa11 	bl	80001e4 <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001dd0:	f7fe fce8 	bl	80007a4 <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4690      	mov	r8, r2
 8001dda:	4699      	mov	r9, r3
 8001ddc:	e079      	b.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb49 	bl	800047c <__aeabi_i2d>
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001df0:	f7fe f9f8 	bl	80001e4 <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001e02:	f7fe fccf 	bl	80007a4 <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e10:	e05f      	b.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8001e12:	bf00      	nop
 8001e14:	2000036c 	.word	0x2000036c
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	200001b0 	.word	0x200001b0
 8001e20:	200001b4 	.word	0x200001b4
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40900000 	.word	0x40900000
 8001e2c:	4bcc      	ldr	r3, [pc, #816]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb22 	bl	800047c <__aeabi_i2d>
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4bc9      	ldr	r3, [pc, #804]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e3e:	f7fe f9cf 	bl	80001e0 <__aeabi_dsub>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4bc5      	ldr	r3, [pc, #788]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e50:	f7fe fca8 	bl	80007a4 <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f7fe fe04 	bl	8000a70 <__aeabi_dcmpgt>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d018      	beq.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8001e6e:	4bbc      	ldr	r3, [pc, #752]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb01 	bl	800047c <__aeabi_i2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4bb9      	ldr	r3, [pc, #740]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e80:	f7fe f9ae 	bl	80001e0 <__aeabi_dsub>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4bb4      	ldr	r3, [pc, #720]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001e92:	f7fe fc87 	bl	80007a4 <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	e018      	b.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8001ea0:	4baf      	ldr	r3, [pc, #700]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fae8 	bl	800047c <__aeabi_i2d>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4bac      	ldr	r3, [pc, #688]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001eb2:	f7fe f995 	bl	80001e0 <__aeabi_dsub>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	4ba8      	ldr	r3, [pc, #672]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ec4:	f7fe fc6e 	bl	80007a4 <__aeabi_ddiv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4690      	mov	r8, r2
 8001ece:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001ed2:	4642      	mov	r2, r8
 8001ed4:	464b      	mov	r3, r9
 8001ed6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eda:	f7fe fdab 	bl	8000a34 <__aeabi_dcmplt>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d038      	beq.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x476>
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fac6 	bl	800047c <__aeabi_i2d>
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b9b      	ldr	r3, [pc, #620]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ef6:	f7fe fc55 	bl	80007a4 <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f7fe fdb1 	bl	8000a70 <__aeabi_dcmpgt>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00f      	beq.n	8001f34 <HAL_TIM_PeriodElapsedCallback+0x454>
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe faae 	bl	800047c <__aeabi_i2d>
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001f26:	f7fe fc3d 	bl	80007a4 <__aeabi_ddiv>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	e16c      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001f34:	4b8a      	ldr	r3, [pc, #552]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fa9e 	bl	800047c <__aeabi_i2d>
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b87      	ldr	r3, [pc, #540]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001f46:	f7fe fc2d 	bl	80007a4 <__aeabi_ddiv>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f54:	e15b      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001f56:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa8d 	bl	800047c <__aeabi_i2d>
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001f68:	f7fe f93c 	bl	80001e4 <__adddf3>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001f7a:	f7fe fc13 	bl	80007a4 <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	f7fe fd6f 	bl	8000a70 <__aeabi_dcmpgt>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d018      	beq.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x4ea>
 8001f98:	4b71      	ldr	r3, [pc, #452]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa6c 	bl	800047c <__aeabi_i2d>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001faa:	f7fe f91b 	bl	80001e4 <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001fbc:	f7fe fbf2 	bl	80007a4 <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001fc8:	e019      	b.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x51e>
 8001fca:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa53 	bl	800047c <__aeabi_i2d>
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b62      	ldr	r3, [pc, #392]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001fdc:	f7fe f902 	bl	80001e4 <__adddf3>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001fee:	f7fe fbd9 	bl	80007a4 <__aeabi_ddiv>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	60ba      	str	r2, [r7, #8]
 8001ff8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa39 	bl	800047c <__aeabi_i2d>
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002010:	f7fe f8e6 	bl	80001e0 <__aeabi_dsub>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002022:	f7fe fbbf 	bl	80007a4 <__aeabi_ddiv>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	f7fe fd1b 	bl	8000a70 <__aeabi_dcmpgt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d018      	beq.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x592>
 8002040:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa18 	bl	800047c <__aeabi_i2d>
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002052:	f7fe f8c5 	bl	80001e0 <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b40      	ldr	r3, [pc, #256]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002064:	f7fe fb9e 	bl	80007a4 <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e9c7 2300 	strd	r2, r3, [r7]
 8002070:	e019      	b.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x5c6>
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f9ff 	bl	800047c <__aeabi_i2d>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002084:	f7fe f8ac 	bl	80001e0 <__aeabi_dsub>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002096:	f7fe fb85 	bl	80007a4 <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	603a      	str	r2, [r7, #0]
 80020a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ae:	f7fe fcc1 	bl	8000a34 <__aeabi_dcmplt>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d057      	beq.n	8002168 <HAL_TIM_PeriodElapsedCallback+0x688>
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9dc 	bl	800047c <__aeabi_i2d>
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80020ca:	f7fe f88b 	bl	80001e4 <__adddf3>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80020dc:	f7fe fb62 	bl	80007a4 <__aeabi_ddiv>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f7fe fcbe 	bl	8000a70 <__aeabi_dcmpgt>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d018      	beq.n	800212c <HAL_TIM_PeriodElapsedCallback+0x64c>
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80020fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f9bb 	bl	800047c <__aeabi_i2d>
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 800210c:	f7fe f86a 	bl	80001e4 <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 800211e:	f7fe fb41 	bl	80007a4 <__aeabi_ddiv>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	e070      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x72e>
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f9a2 	bl	800047c <__aeabi_i2d>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 800213e:	f7fe f851 	bl	80001e4 <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002150:	f7fe fb28 	bl	80007a4 <__aeabi_ddiv>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4614      	mov	r4, r2
 800215a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800215e:	e056      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8002160:	200001b4 	.word	0x200001b4
 8002164:	40900000 	.word	0x40900000
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x750>)
 800216a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f984 	bl	800047c <__aeabi_i2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x754>)
 800217a:	f7fe f831 	bl	80001e0 <__aeabi_dsub>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x754>)
 800218c:	f7fe fb0a 	bl	80007a4 <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f7fe fc66 	bl	8000a70 <__aeabi_dcmpgt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d018      	beq.n	80021dc <HAL_TIM_PeriodElapsedCallback+0x6fc>
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80021ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f963 	bl	800047c <__aeabi_i2d>
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x754>)
 80021bc:	f7fe f810 	bl	80001e0 <__aeabi_dsub>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x754>)
 80021ce:	f7fe fae9 	bl	80007a4 <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	461d      	mov	r5, r3
 80021da:	e018      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x72e>
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f94a 	bl	800047c <__aeabi_i2d>
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x754>)
 80021ee:	f7fd fff7 	bl	80001e0 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8002200:	f7fe fad0 	bl	80007a4 <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4614      	mov	r4, r2
 800220a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002210:	e9c3 4500 	strd	r4, r5, [r3]
		// optimize this or change the function
	} else { step_gain = 0; }
	return;
 8002214:	e008      	b.n	8002228 <HAL_TIM_PeriodElapsedCallback+0x748>
	} else { step_gain = 0; }
 8002216:	4908      	ldr	r1, [pc, #32]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9c1 2300 	strd	r2, r3, [r1]
	return;
 8002224:	e000      	b.n	8002228 <HAL_TIM_PeriodElapsedCallback+0x748>
	if (htim != &htim10) { return; }
 8002226:	bf00      	nop
}
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002230:	200001b4 	.word	0x200001b4
 8002234:	40900000 	.word	0x40900000
 8002238:	200001b8 	.word	0x200001b8

0800223c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 8002242:	f7fe fe9b 	bl	8000f7c <AS5600_new>
 8002246:	4603      	mov	r3, r0
 8002248:	4a4f      	ldr	r2, [pc, #316]	; (8002388 <main+0x14c>)
 800224a:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 800224c:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <main+0x14c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a4e      	ldr	r2, [pc, #312]	; (800238c <main+0x150>)
 8002252:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <main+0x14c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4d      	ldr	r2, [pc, #308]	; (8002390 <main+0x154>)
 800225a:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <main+0x14c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 8002264:	4b48      	ldr	r3, [pc, #288]	; (8002388 <main+0x14c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226c:	f000 fc2c 	bl	8002ac8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002270:	f000 f8a4 	bl	80023bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002274:	f7ff fa1c 	bl	80016b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002278:	f7ff f9ea 	bl	8001650 <MX_DMA_Init>
  MX_SPI1_Init();
 800227c:	f000 f90e 	bl	800249c <MX_SPI1_Init>
  MX_I2C1_Init();
 8002280:	f7ff facc 	bl	800181c <MX_I2C1_Init>
  MX_ADC1_Init();
 8002284:	f7fe fda0 	bl	8000dc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002288:	f000 fae6 	bl	8002858 <MX_TIM2_Init>
  MX_TIM5_Init();
 800228c:	f000 fb30 	bl	80028f0 <MX_TIM5_Init>
  MX_TIM10_Init();
 8002290:	f000 fb7c 	bl	800298c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);  // start timer_2
 8002294:	483f      	ldr	r0, [pc, #252]	; (8002394 <main+0x158>)
 8002296:	f005 fad5 	bl	8007844 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5
 800229a:	483f      	ldr	r0, [pc, #252]	; (8002398 <main+0x15c>)
 800229c:	f005 fad2 	bl	8007844 <HAL_TIM_Base_Start>
	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 80022a0:	bf00      	nop
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <main+0x14c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fe71 	bl	8000f8e <AS5600_init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f7      	bne.n	80022a2 <main+0x66>

	// initialize the AS5600 position variable
	AS5600_get_angle(sensor, &AS5600_pos);
 80022b2:	4b35      	ldr	r3, [pc, #212]	; (8002388 <main+0x14c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4939      	ldr	r1, [pc, #228]	; (800239c <main+0x160>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f98a 	bl	80015d2 <AS5600_get_angle>
	AS5600_pos_f64 =	AS5600_pos;  // set the current angle to the most accurate value for the euler method
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <main+0x160>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f8ca 	bl	800045c <__aeabi_ui2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4934      	ldr	r1, [pc, #208]	; (80023a0 <main+0x164>)
 80022ce:	e9c1 2300 	strd	r2, r3, [r1]
	AS5600_analog =		AS5600_pos;
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <main+0x160>)
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <main+0x168>)
 80022d8:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)&instruction, 16);  // start data receiving loop
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&AS5600_analog, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	4931      	ldr	r1, [pc, #196]	; (80023a4 <main+0x168>)
 80022de:	4832      	ldr	r0, [pc, #200]	; (80023a8 <main+0x16c>)
 80022e0:	f000 fdb8 	bl	8002e54 <HAL_ADC_Start_DMA>

	instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <main+0x170>)
 80022e6:	224a      	movs	r2, #74	; 0x4a
 80022e8:	609a      	str	r2, [r3, #8]
	instruction.settings.micro_step = 3;
 80022ea:	4a30      	ldr	r2, [pc, #192]	; (80023ac <main+0x170>)
 80022ec:	7b13      	ldrb	r3, [r2, #12]
 80022ee:	f043 0303 	orr.w	r3, r3, #3
 80022f2:	7313      	strb	r3, [r2, #12]
	instruction.settings.spread_mode = 0;
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <main+0x170>)
 80022f6:	7b13      	ldrb	r3, [r2, #12]
 80022f8:	f36f 0382 	bfc	r3, #2, #1
 80022fc:	7313      	strb	r3, [r2, #12]

	// TODO: Add function to the INSTRUCT_GO interrupt pin that will start the stepping function
	// TODO: Add interrupt to a timer that will run all the sensor code

	set_motor_setting(&instruction);
 80022fe:	482b      	ldr	r0, [pc, #172]	; (80023ac <main+0x170>)
 8002300:	f7ff fb28 	bl	8001954 <set_motor_setting>

	uint32_t min_pulse_delay = 75;
 8002304:	234b      	movs	r3, #75	; 0x4b
 8002306:	607b      	str	r3, [r7, #4]
	TIM5->CNT = 0;
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <main+0x174>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt)
 800230e:	4829      	ldr	r0, [pc, #164]	; (80023b4 <main+0x178>)
 8002310:	f005 faf2 	bl	80078f8 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 0);  // enable stepper
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231a:	481d      	ldr	r0, [pc, #116]	; (8002390 <main+0x154>)
 800231c:	f001 ffa2 	bl	8004264 <HAL_GPIO_WritePin>
	while (1) {
		if (step_gain == 0) { continue; }
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <main+0x17c>)
 8002322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f7fe fb77 	bl	8000a20 <__aeabi_dcmpeq>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d124      	bne.n	8002382 <main+0x146>
		// dir is set in interrupt
		register uint16_t pulse_delay = min_pulse_delay / step_gain;
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe f88f 	bl	800045c <__aeabi_ui2d>
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <main+0x17c>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa2e 	bl	80007a4 <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fb98 	bl	8000a84 <__aeabi_d2uiz>
 8002354:	4603      	mov	r3, r0
 8002356:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800235e:	480c      	ldr	r0, [pc, #48]	; (8002390 <main+0x154>)
 8002360:	f001 ff80 	bl	8004264 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002364:	4623      	mov	r3, r4
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fade 	bl	8001928 <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002372:	4807      	ldr	r0, [pc, #28]	; (8002390 <main+0x154>)
 8002374:	f001 ff76 	bl	8004264 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002378:	4623      	mov	r3, r4
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fad4 	bl	8001928 <delay_us>
 8002380:	e7ce      	b.n	8002320 <main+0xe4>
		if (step_gain == 0) { continue; }
 8002382:	bf00      	nop
	while (1) {
 8002384:	e7cc      	b.n	8002320 <main+0xe4>
 8002386:	bf00      	nop
 8002388:	200001a0 	.word	0x200001a0
 800238c:	2000013c 	.word	0x2000013c
 8002390:	40020400 	.word	0x40020400
 8002394:	200002dc 	.word	0x200002dc
 8002398:	20000324 	.word	0x20000324
 800239c:	200001b0 	.word	0x200001b0
 80023a0:	200001a8 	.word	0x200001a8
 80023a4:	200001a4 	.word	0x200001a4
 80023a8:	20000094 	.word	0x20000094
 80023ac:	20000190 	.word	0x20000190
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	2000036c 	.word	0x2000036c
 80023b8:	200001b8 	.word	0x200001b8

080023bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	2230      	movs	r2, #48	; 0x30
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f005 febc 	bl	8008148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <SystemClock_Config+0xc8>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <SystemClock_Config+0xc8>)
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <SystemClock_Config+0xc8>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <SystemClock_Config+0xcc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <SystemClock_Config+0xcc>)
 8002406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <SystemClock_Config+0xcc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002418:	2302      	movs	r3, #2
 800241a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800241c:	2301      	movs	r3, #1
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002420:	2310      	movs	r3, #16
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002424:	2302      	movs	r3, #2
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002428:	2300      	movs	r3, #0
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800242c:	2310      	movs	r3, #16
 800242e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002430:	23c0      	movs	r3, #192	; 0xc0
 8002432:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002434:	2302      	movs	r3, #2
 8002436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002438:	2304      	movs	r3, #4
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fbc3 	bl	8006bcc <HAL_RCC_OscConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800244c:	f000 f81e 	bl	800248c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002450:	230f      	movs	r3, #15
 8002452:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002454:	2302      	movs	r3, #2
 8002456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800245c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	2103      	movs	r1, #3
 800246c:	4618      	mov	r0, r3
 800246e:	f004 fe25 	bl	80070bc <HAL_RCC_ClockConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002478:	f000 f808 	bl	800248c <Error_Handler>
  }
}
 800247c:	bf00      	nop
 800247e:	3750      	adds	r7, #80	; 0x50
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <MX_SPI1_Init+0x60>)
 80024a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024de:	220a      	movs	r2, #10
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_SPI1_Init+0x5c>)
 80024e4:	f004 ffb6 	bl	8007454 <HAL_SPI_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80024ee:	f7ff ffcd 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200001c0 	.word	0x200001c0
 80024fc:	40013000 	.word	0x40013000

08002500 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_SPI_MspInit+0x168>)
 800251e:	4293      	cmp	r3, r2
 8002520:	f040 809d 	bne.w	800265e <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_SPI_MspInit+0x16c>)
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	4a4f      	ldr	r2, [pc, #316]	; (800266c <HAL_SPI_MspInit+0x16c>)
 800252e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002532:	6453      	str	r3, [r2, #68]	; 0x44
 8002534:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_SPI_MspInit+0x16c>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_SPI_MspInit+0x16c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_SPI_MspInit+0x16c>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6313      	str	r3, [r2, #48]	; 0x30
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_SPI_MspInit+0x16c>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 800255c:	23f0      	movs	r3, #240	; 0xf0
 800255e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800256c:	2305      	movs	r3, #5
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	483e      	ldr	r0, [pc, #248]	; (8002670 <HAL_SPI_MspInit+0x170>)
 8002578:	f001 fcf0 	bl	8003f5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800257c:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_SPI_MspInit+0x174>)
 800257e:	4a3e      	ldr	r2, [pc, #248]	; (8002678 <HAL_SPI_MspInit+0x178>)
 8002580:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <HAL_SPI_MspInit+0x174>)
 8002584:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002588:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <HAL_SPI_MspInit+0x174>)
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_SPI_MspInit+0x174>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <HAL_SPI_MspInit+0x174>)
 8002598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a4:	4b33      	ldr	r3, [pc, #204]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025c0:	482c      	ldr	r0, [pc, #176]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025c2:	f001 f92b 	bl	800381c <HAL_DMA_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 80025cc:	f7ff ff5e 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025d4:	649a      	str	r2, [r3, #72]	; 0x48
 80025d6:	4a27      	ldr	r2, [pc, #156]	; (8002674 <HAL_SPI_MspInit+0x174>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <HAL_SPI_MspInit+0x17c>)
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_SPI_MspInit+0x180>)
 80025e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_SPI_MspInit+0x17c>)
 80025e4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025e8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_SPI_MspInit+0x17c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_SPI_MspInit+0x17c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_SPI_MspInit+0x17c>)
 80025f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_SPI_MspInit+0x17c>)
 800260c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002610:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002618:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_SPI_MspInit+0x17c>)
 800261c:	2204      	movs	r2, #4
 800261e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002622:	2203      	movs	r2, #3
 8002624:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002628:	2200      	movs	r2, #0
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_SPI_MspInit+0x17c>)
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002632:	4812      	ldr	r0, [pc, #72]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002634:	f001 f8f2 	bl	800381c <HAL_DMA_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 800263e:	f7ff ff25 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <HAL_SPI_MspInit+0x17c>)
 8002646:	64da      	str	r2, [r3, #76]	; 0x4c
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_SPI_MspInit+0x17c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2023      	movs	r0, #35	; 0x23
 8002654:	f001 f8ab 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002658:	2023      	movs	r0, #35	; 0x23
 800265a:	f001 f8c4 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800265e:	bf00      	nop
 8002660:	3728      	adds	r7, #40	; 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40013000 	.word	0x40013000
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000
 8002674:	20000218 	.word	0x20000218
 8002678:	40026458 	.word	0x40026458
 800267c:	20000278 	.word	0x20000278
 8002680:	40026410 	.word	0x40026410

08002684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_MspInit+0x4c>)
 8002694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002698:	6453      	str	r3, [r2, #68]	; 0x44
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_MspInit+0x4c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_MspInit+0x4c>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_MspInit+0x4c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f000 fa24 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <ADC_IRQHandler+0x10>)
 800272e:	f000 fa80 	bl	8002c32 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000094 	.word	0x20000094

0800273c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002742:	f005 f93b 	bl	80079bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000036c 	.word	0x2000036c

08002750 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <I2C1_EV_IRQHandler+0x10>)
 8002756:	f002 fa03 	bl	8004b60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000013c 	.word	0x2000013c

08002764 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <I2C1_ER_IRQHandler+0x10>)
 800276a:	f002 fb6a 	bl	8004e42 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000013c 	.word	0x2000013c

08002778 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <SPI1_IRQHandler+0x10>)
 800277e:	f004 fef3 	bl	8007568 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001c0 	.word	0x200001c0

0800278c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <DMA2_Stream0_IRQHandler+0x10>)
 8002792:	f001 f96b 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000278 	.word	0x20000278

080027a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <DMA2_Stream3_IRQHandler+0x10>)
 80027a6:	f001 f961 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000218 	.word	0x20000218

080027b4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <DMA2_Stream4_IRQHandler+0x10>)
 80027ba:	f001 f957 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200000dc 	.word	0x200000dc

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 fc7c 	bl	80080f4 <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20020000 	.word	0x20020000
 8002828:	00000400 	.word	0x00000400
 800282c:	200002d8 	.word	0x200002d8
 8002830:	200003c8 	.word	0x200003c8

08002834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <SystemInit+0x20>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <SystemInit+0x20>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	463b      	mov	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <MX_TIM2_Init+0x94>)
 8002876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800287a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <MX_TIM2_Init+0x94>)
 800287e:	225f      	movs	r2, #95	; 0x5f
 8002880:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <MX_TIM2_Init+0x94>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <MX_TIM2_Init+0x94>)
 800288a:	f04f 32ff 	mov.w	r2, #4294967295
 800288e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <MX_TIM2_Init+0x94>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <MX_TIM2_Init+0x94>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800289c:	4813      	ldr	r0, [pc, #76]	; (80028ec <MX_TIM2_Init+0x94>)
 800289e:	f004 ff81 	bl	80077a4 <HAL_TIM_Base_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028a8:	f7ff fdf0 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	4619      	mov	r1, r3
 80028b8:	480c      	ldr	r0, [pc, #48]	; (80028ec <MX_TIM2_Init+0x94>)
 80028ba:	f005 f987 	bl	8007bcc <HAL_TIM_ConfigClockSource>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028c4:	f7ff fde2 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c8:	2300      	movs	r3, #0
 80028ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_TIM2_Init+0x94>)
 80028d6:	f005 fb83 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028e0:	f7ff fdd4 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200002dc 	.word	0x200002dc

080028f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	463b      	mov	r3, r7
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <MX_TIM5_Init+0x94>)
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <MX_TIM5_Init+0x98>)
 8002910:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_TIM5_Init+0x94>)
 8002914:	225f      	movs	r2, #95	; 0x5f
 8002916:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <MX_TIM5_Init+0x94>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <MX_TIM5_Init+0x94>)
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <MX_TIM5_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <MX_TIM5_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002932:	4814      	ldr	r0, [pc, #80]	; (8002984 <MX_TIM5_Init+0x94>)
 8002934:	f004 ff36 	bl	80077a4 <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800293e:	f7ff fda5 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	4619      	mov	r1, r3
 800294e:	480d      	ldr	r0, [pc, #52]	; (8002984 <MX_TIM5_Init+0x94>)
 8002950:	f005 f93c 	bl	8007bcc <HAL_TIM_ConfigClockSource>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800295a:	f7ff fd97 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002966:	463b      	mov	r3, r7
 8002968:	4619      	mov	r1, r3
 800296a:	4806      	ldr	r0, [pc, #24]	; (8002984 <MX_TIM5_Init+0x94>)
 800296c:	f005 fb38 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002976:	f7ff fd89 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000324 	.word	0x20000324
 8002988:	40000c00 	.word	0x40000c00

0800298c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <MX_TIM10_Init+0x3c>)
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <MX_TIM10_Init+0x40>)
 8002994:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_TIM10_Init+0x3c>)
 8002998:	225f      	movs	r2, #95	; 0x5f
 800299a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <MX_TIM10_Init+0x3c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_TIM10_Init+0x3c>)
 80029a4:	2264      	movs	r2, #100	; 0x64
 80029a6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <MX_TIM10_Init+0x3c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_TIM10_Init+0x3c>)
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <MX_TIM10_Init+0x3c>)
 80029b6:	f004 fef5 	bl	80077a4 <HAL_TIM_Base_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80029c0:	f7ff fd64 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000036c 	.word	0x2000036c
 80029cc:	40014400 	.word	0x40014400

080029d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80029fe:	e02e      	b.n	8002a5e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_TIM_Base_MspInit+0x9c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
}
 8002a26:	e01a      	b.n	8002a5e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_TIM_Base_MspInit+0xa0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d115      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_TIM_Base_MspInit+0x98>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2019      	movs	r0, #25
 8002a54:	f000 feab 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a58:	2019      	movs	r0, #25
 8002a5a:	f000 fec4 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40000c00 	.word	0x40000c00
 8002a70:	40014400 	.word	0x40014400

08002a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a78:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a7a:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a80:	e002      	b.n	8002a88 <LoopCopyDataInit>

08002a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a86:	3304      	adds	r3, #4

08002a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a8c:	d3f9      	bcc.n	8002a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a90:	4c0b      	ldr	r4, [pc, #44]	; (8002ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a94:	e001      	b.n	8002a9a <LoopFillZerobss>

08002a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a98:	3204      	adds	r2, #4

08002a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a9c:	d3fb      	bcc.n	8002a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a9e:	f7ff fec9 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f005 fb2d 	bl	8008100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa6:	f7ff fbc9 	bl	800223c <main>
  bx  lr    
 8002aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002ab8:	08008330 	.word	0x08008330
  ldr r2, =_sbss
 8002abc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002ac0:	200003c8 	.word	0x200003c8

08002ac4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <DMA1_Stream0_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_Init+0x40>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_Init+0x40>)
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_Init+0x40>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 fe51 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	200f      	movs	r0, #15
 8002af8:	f000 f808 	bl	8002b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff fdc2 	bl	8002684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x54>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x58>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fe69 	bl	8003802 <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f000 fe31 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_InitTick+0x5c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000004 	.word	0x20000004
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	20000008 	.word	0x20000008

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	200003b4 	.word	0x200003b4

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200003b4 	.word	0x200003b4

08002bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e033      	b.n	8002c2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe f94e 	bl	8000e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb72 	bl	80032e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1a:	e001      	b.n	8002c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d049      	beq.n	8002cfc <HAL_ADC_IRQHandler+0xca>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d046      	beq.n	8002cfc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d12b      	bne.n	8002cec <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d127      	bne.n	8002cec <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d119      	bne.n	8002cec <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0220 	bic.w	r2, r2, #32
 8002cc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f9a1 	bl	8003034 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f06f 0212 	mvn.w	r2, #18
 8002cfa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d057      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x190>
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d054      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d139      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d12b      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d124      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11d      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d8c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fc16 	bl	80035e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 020c 	mvn.w	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x1d6>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d014      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10d      	bne.n	8002e08 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f92f 	bl	800305c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0201 	mvn.w	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e16:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d015      	beq.n	8002e4a <HAL_ADC_IRQHandler+0x218>
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0220 	mvn.w	r2, #32
 8002e38:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f918 	bl	8003070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0220 	mvn.w	r2, #32
 8002e48:	601a      	str	r2, [r3, #0]
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_Start_DMA+0x1e>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0ce      	b.n	8003010 <HAL_ADC_Start_DMA+0x1bc>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d018      	beq.n	8002eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e98:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_ADC_Start_DMA+0x1c4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5f      	ldr	r2, [pc, #380]	; (800301c <HAL_ADC_Start_DMA+0x1c8>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0c9a      	lsrs	r2, r3, #18
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002eac:	e002      	b.n	8002eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d107      	bne.n	8002eda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	f040 8086 	bne.w	8002ff6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d106      	bne.n	8002f38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f023 0206 	bic.w	r2, r3, #6
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
 8002f36:	e002      	b.n	8002f3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_ADC_Start_DMA+0x1cc>)
 8002f48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4a35      	ldr	r2, [pc, #212]	; (8003024 <HAL_ADC_Start_DMA+0x1d0>)
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <HAL_ADC_Start_DMA+0x1d4>)
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <HAL_ADC_Start_DMA+0x1d8>)
 8002f60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	334c      	adds	r3, #76	; 0x4c
 8002f96:	4619      	mov	r1, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f000 fcec 	bl	8003978 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10f      	bne.n	8002fcc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d129      	bne.n	800300e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	e020      	b.n	800300e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	; (8003030 <HAL_ADC_Start_DMA+0x1dc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d11b      	bne.n	800300e <HAL_ADC_Start_DMA+0x1ba>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d114      	bne.n	800300e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e00b      	b.n	800300e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000004 	.word	0x20000004
 800301c:	431bde83 	.word	0x431bde83
 8003020:	40012300 	.word	0x40012300
 8003024:	080034e1 	.word	0x080034e1
 8003028:	0800359b 	.word	0x0800359b
 800302c:	080035b7 	.word	0x080035b7
 8003030:	40012000 	.word	0x40012000

08003034 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x1c>
 800309c:	2302      	movs	r3, #2
 800309e:	e113      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x244>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	d925      	bls.n	80030fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68d9      	ldr	r1, [r3, #12]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	2207      	movs	r2, #7
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43da      	mvns	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	400a      	ands	r2, r1
 80030d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68d9      	ldr	r1, [r3, #12]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	4603      	mov	r3, r0
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4403      	add	r3, r0
 80030ee:	3b1e      	subs	r3, #30
 80030f0:	409a      	lsls	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	e022      	b.n	8003142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6919      	ldr	r1, [r3, #16]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	2207      	movs	r2, #7
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	400a      	ands	r2, r1
 800311e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	4618      	mov	r0, r3
 8003132:	4603      	mov	r3, r0
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4403      	add	r3, r0
 8003138:	409a      	lsls	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d824      	bhi.n	8003194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	3b05      	subs	r3, #5
 800315c:	221f      	movs	r2, #31
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	400a      	ands	r2, r1
 800316a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4618      	mov	r0, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	3b05      	subs	r3, #5
 8003186:	fa00 f203 	lsl.w	r2, r0, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
 8003192:	e04c      	b.n	800322e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d824      	bhi.n	80031e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b23      	subs	r3, #35	; 0x23
 80031ae:	221f      	movs	r2, #31
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43da      	mvns	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	400a      	ands	r2, r1
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	3b23      	subs	r3, #35	; 0x23
 80031d8:	fa00 f203 	lsl.w	r2, r0, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
 80031e4:	e023      	b.n	800322e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b41      	subs	r3, #65	; 0x41
 80031f8:	221f      	movs	r2, #31
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	400a      	ands	r2, r1
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	4618      	mov	r0, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	3b41      	subs	r3, #65	; 0x41
 8003222:	fa00 f203 	lsl.w	r2, r0, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_ADC_ConfigChannel+0x250>)
 8003230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <HAL_ADC_ConfigChannel+0x254>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10f      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1d8>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b12      	cmp	r3, #18
 8003242:	d10b      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_ADC_ConfigChannel+0x254>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d12b      	bne.n	80032be <HAL_ADC_ConfigChannel+0x23a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_ADC_ConfigChannel+0x258>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <HAL_ADC_ConfigChannel+0x1f4>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b11      	cmp	r3, #17
 8003276:	d122      	bne.n	80032be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a11      	ldr	r2, [pc, #68]	; (80032dc <HAL_ADC_ConfigChannel+0x258>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d111      	bne.n	80032be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_ADC_ConfigChannel+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <HAL_ADC_ConfigChannel+0x260>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	0c9a      	lsrs	r2, r3, #18
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032b0:	e002      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f9      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40012300 	.word	0x40012300
 80032d8:	40012000 	.word	0x40012000
 80032dc:	10000012 	.word	0x10000012
 80032e0:	20000004 	.word	0x20000004
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f0:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <ADC_Init+0x1f0>)
 80032f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	431a      	orrs	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	021a      	lsls	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	4a58      	ldr	r2, [pc, #352]	; (80034dc <ADC_Init+0x1f4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6899      	ldr	r1, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	e00f      	b.n	80033e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0202 	bic.w	r2, r2, #2
 80033f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6899      	ldr	r1, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
 8003400:	005a      	lsls	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	3b01      	subs	r3, #1
 8003440:	035a      	lsls	r2, r3, #13
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	e007      	b.n	800345c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	3b01      	subs	r3, #1
 8003478:	051a      	lsls	r2, r3, #20
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800349e:	025a      	lsls	r2, r3, #9
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	029a      	lsls	r2, r3, #10
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012300 	.word	0x40012300
 80034dc:	0f000001 	.word	0x0f000001

080034e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d13c      	bne.n	8003574 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d12b      	bne.n	800356c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003518:	2b00      	cmp	r3, #0
 800351a:	d127      	bne.n	800356c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003534:	2b00      	cmp	r3, #0
 8003536:	d119      	bne.n	800356c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0220 	bic.w	r2, r2, #32
 8003546:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fd61 	bl	8003034 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003572:	e00e      	b.n	8003592 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff fd75 	bl	8003070 <HAL_ADC_ErrorCallback>
}
 8003586:	e004      	b.n	8003592 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fd4d 	bl	8003048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f043 0204 	orr.w	r2, r3, #4
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff fd4a 	bl	8003070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db0b      	blt.n	8003686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <__NVIC_EnableIRQ+0x38>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2001      	movs	r0, #1
 800367e:	fa00 f202 	lsl.w	r2, r0, r2
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db0a      	blt.n	80036c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	490c      	ldr	r1, [pc, #48]	; (80036e4 <__NVIC_SetPriority+0x4c>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c0:	e00a      	b.n	80036d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <__NVIC_SetPriority+0x50>)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3b04      	subs	r3, #4
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	440b      	add	r3, r1
 80036d6:	761a      	strb	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f1c3 0307 	rsb	r3, r3, #7
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf28      	it	cs
 800370a:	2304      	movcs	r3, #4
 800370c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3304      	adds	r3, #4
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <NVIC_EncodePriority+0x30>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b03      	subs	r3, #3
 800371a:	e000      	b.n	800371e <NVIC_EncodePriority+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	f04f 32ff 	mov.w	r2, #4294967295
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003734:	f04f 31ff 	mov.w	r1, #4294967295
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43d9      	mvns	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	4313      	orrs	r3, r2
         );
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff8e 	bl	8003698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff29 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff3e 	bl	8003640 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff8e 	bl	80036ec <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5d 	bl	8003698 <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff31 	bl	800365c <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff f9b4 	bl	8002b94 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e099      	b.n	800396c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003858:	e00f      	b.n	800387a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800385a:	f7ff f99b 	bl	8002b94 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b05      	cmp	r3, #5
 8003866:	d908      	bls.n	800387a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2203      	movs	r2, #3
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e078      	b.n	800396c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e8      	bne.n	800385a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4b38      	ldr	r3, [pc, #224]	; (8003974 <HAL_DMA_Init+0x158>)
 8003894:	4013      	ands	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d107      	bne.n	80038e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4313      	orrs	r3, r2
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0307 	bic.w	r3, r3, #7
 80038fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b04      	cmp	r3, #4
 800390c:	d117      	bne.n	800393e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa9f 	bl	8003e64 <DMA_CheckFifoParam>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2240      	movs	r2, #64	; 0x40
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800393a:	2301      	movs	r3, #1
 800393c:	e016      	b.n	800396c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa56 	bl	8003df8 <DMA_CalcBaseAndBitshift>
 800394c:	4603      	mov	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	223f      	movs	r2, #63	; 0x3f
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	f010803f 	.word	0xf010803f

08003978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_DMA_Start_IT+0x26>
 800399a:	2302      	movs	r3, #2
 800399c:	e040      	b.n	8003a20 <HAL_DMA_Start_IT+0xa8>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d12f      	bne.n	8003a12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f9e8 	bl	8003d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	223f      	movs	r2, #63	; 0x3f
 80039d2:	409a      	lsls	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0216 	orr.w	r2, r2, #22
 80039e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0208 	orr.w	r2, r2, #8
 80039fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e005      	b.n	8003a1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00c      	b.n	8003a60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2205      	movs	r2, #5
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a78:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <HAL_DMA_IRQHandler+0x248>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a8e      	ldr	r2, [pc, #568]	; (8003cb8 <HAL_DMA_IRQHandler+0x24c>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	2208      	movs	r2, #8
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01a      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d012      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f043 0202 	orr.w	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2204      	movs	r2, #4
 8003b14:	409a      	lsls	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	2204      	movs	r2, #4
 8003b32:	409a      	lsls	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	2210      	movs	r2, #16
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d043      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d03c      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	2210      	movs	r2, #16
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d018      	beq.n	8003bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d024      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
 8003b9a:	e01f      	b.n	8003bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01b      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e016      	b.n	8003bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0208 	bic.w	r2, r2, #8
 8003bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	2220      	movs	r2, #32
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 808f 	beq.w	8003d0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8087 	beq.w	8003d0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	2220      	movs	r2, #32
 8003c04:	409a      	lsls	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d136      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0216 	bic.w	r2, r2, #22
 8003c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_DMA_IRQHandler+0x1da>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0208 	bic.w	r2, r2, #8
 8003c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	223f      	movs	r2, #63	; 0x3f
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d07e      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
        }
        return;
 8003c82:	e079      	b.n	8003d78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01d      	beq.n	8003cce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d031      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	e02c      	b.n	8003d0c <HAL_DMA_IRQHandler+0x2a0>
 8003cb2:	bf00      	nop
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d023      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
 8003ccc:	e01e      	b.n	8003d0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10f      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0210 	bic.w	r2, r2, #16
 8003cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d032      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d022      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2205      	movs	r2, #5
 8003d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d307      	bcc.n	8003d54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f2      	bne.n	8003d38 <HAL_DMA_IRQHandler+0x2cc>
 8003d52:	e000      	b.n	8003d56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
 8003d76:	e000      	b.n	8003d7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d78:	bf00      	nop
    }
  }
}
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8e:	b2db      	uxtb	r3, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d108      	bne.n	8003ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dda:	e007      	b.n	8003dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	3b10      	subs	r3, #16
 8003e08:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <DMA_CalcBaseAndBitshift+0x64>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e12:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <DMA_CalcBaseAndBitshift+0x68>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d909      	bls.n	8003e3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	1d1a      	adds	r2, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	659a      	str	r2, [r3, #88]	; 0x58
 8003e38:	e007      	b.n	8003e4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e42:	f023 0303 	bic.w	r3, r3, #3
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	aaaaaaab 	.word	0xaaaaaaab
 8003e60:	08008318 	.word	0x08008318

08003e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11f      	bne.n	8003ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d856      	bhi.n	8003f32 <DMA_CheckFifoParam+0xce>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <DMA_CheckFifoParam+0x28>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003eaf 	.word	0x08003eaf
 8003e94:	08003e9d 	.word	0x08003e9d
 8003e98:	08003f33 	.word	0x08003f33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d046      	beq.n	8003f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eac:	e043      	b.n	8003f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eb6:	d140      	bne.n	8003f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ebc:	e03d      	b.n	8003f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec6:	d121      	bne.n	8003f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d837      	bhi.n	8003f3e <DMA_CheckFifoParam+0xda>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <DMA_CheckFifoParam+0x70>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003eeb 	.word	0x08003eeb
 8003edc:	08003ee5 	.word	0x08003ee5
 8003ee0:	08003efd 	.word	0x08003efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e030      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d025      	beq.n	8003f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efa:	e022      	b.n	8003f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f04:	d11f      	bne.n	8003f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f0a:	e01c      	b.n	8003f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d903      	bls.n	8003f1a <DMA_CheckFifoParam+0xb6>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d003      	beq.n	8003f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f18:	e018      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1e:	e015      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e00b      	b.n	8003f4a <DMA_CheckFifoParam+0xe6>
      break;
 8003f32:	bf00      	nop
 8003f34:	e00a      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      break;
 8003f36:	bf00      	nop
 8003f38:	e008      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e006      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e004      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <DMA_CheckFifoParam+0xe8>
      break;
 8003f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e159      	b.n	800422c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f040 8148 	bne.w	8004226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d005      	beq.n	8003fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d130      	bne.n	8004010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 0201 	and.w	r2, r3, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b03      	cmp	r3, #3
 800401a:	d017      	beq.n	800404c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2203      	movs	r2, #3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d123      	bne.n	80040a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	08da      	lsrs	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3208      	adds	r2, #8
 8004060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	220f      	movs	r2, #15
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0203 	and.w	r2, r3, #3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a2 	beq.w	8004226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b57      	ldr	r3, [pc, #348]	; (8004244 <HAL_GPIO_Init+0x2e8>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	4a56      	ldr	r2, [pc, #344]	; (8004244 <HAL_GPIO_Init+0x2e8>)
 80040ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f0:	6453      	str	r3, [r2, #68]	; 0x44
 80040f2:	4b54      	ldr	r3, [pc, #336]	; (8004244 <HAL_GPIO_Init+0x2e8>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fe:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_GPIO_Init+0x2ec>)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3302      	adds	r3, #2
 8004106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a49      	ldr	r2, [pc, #292]	; (800424c <HAL_GPIO_Init+0x2f0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d019      	beq.n	800415e <HAL_GPIO_Init+0x202>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a48      	ldr	r2, [pc, #288]	; (8004250 <HAL_GPIO_Init+0x2f4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_GPIO_Init+0x1fe>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a47      	ldr	r2, [pc, #284]	; (8004254 <HAL_GPIO_Init+0x2f8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00d      	beq.n	8004156 <HAL_GPIO_Init+0x1fa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a46      	ldr	r2, [pc, #280]	; (8004258 <HAL_GPIO_Init+0x2fc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <HAL_GPIO_Init+0x1f6>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a45      	ldr	r2, [pc, #276]	; (800425c <HAL_GPIO_Init+0x300>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_GPIO_Init+0x1f2>
 800414a:	2304      	movs	r3, #4
 800414c:	e008      	b.n	8004160 <HAL_GPIO_Init+0x204>
 800414e:	2307      	movs	r3, #7
 8004150:	e006      	b.n	8004160 <HAL_GPIO_Init+0x204>
 8004152:	2303      	movs	r3, #3
 8004154:	e004      	b.n	8004160 <HAL_GPIO_Init+0x204>
 8004156:	2302      	movs	r3, #2
 8004158:	e002      	b.n	8004160 <HAL_GPIO_Init+0x204>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_GPIO_Init+0x204>
 800415e:	2300      	movs	r3, #0
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	f002 0203 	and.w	r2, r2, #3
 8004166:	0092      	lsls	r2, r2, #2
 8004168:	4093      	lsls	r3, r2
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004170:	4935      	ldr	r1, [pc, #212]	; (8004248 <HAL_GPIO_Init+0x2ec>)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	3302      	adds	r3, #2
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417e:	4b38      	ldr	r3, [pc, #224]	; (8004260 <HAL_GPIO_Init+0x304>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041a2:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <HAL_GPIO_Init+0x304>)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a8:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_GPIO_Init+0x304>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <HAL_GPIO_Init+0x304>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_GPIO_Init+0x304>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041f6:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_GPIO_Init+0x304>)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_GPIO_Init+0x304>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	43db      	mvns	r3, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004220:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <HAL_GPIO_Init+0x304>)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3301      	adds	r3, #1
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b0f      	cmp	r3, #15
 8004230:	f67f aea2 	bls.w	8003f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
 8004248:	40013800 	.word	0x40013800
 800424c:	40020000 	.word	0x40020000
 8004250:	40020400 	.word	0x40020400
 8004254:	40020800 	.word	0x40020800
 8004258:	40020c00 	.word	0x40020c00
 800425c:	40021000 	.word	0x40021000
 8004260:	40013c00 	.word	0x40013c00

08004264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
 8004270:	4613      	mov	r3, r2
 8004272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004274:	787b      	ldrb	r3, [r7, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004280:	e003      	b.n	800428a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	041a      	lsls	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	619a      	str	r2, [r3, #24]
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e12b      	b.n	8004502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fada 	bl	8001878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042fc:	f003 f896 	bl	800742c <HAL_RCC_GetPCLK1Freq>
 8004300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4a81      	ldr	r2, [pc, #516]	; (800450c <HAL_I2C_Init+0x274>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d807      	bhi.n	800431c <HAL_I2C_Init+0x84>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a80      	ldr	r2, [pc, #512]	; (8004510 <HAL_I2C_Init+0x278>)
 8004310:	4293      	cmp	r3, r2
 8004312:	bf94      	ite	ls
 8004314:	2301      	movls	r3, #1
 8004316:	2300      	movhi	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e006      	b.n	800432a <HAL_I2C_Init+0x92>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a7d      	ldr	r2, [pc, #500]	; (8004514 <HAL_I2C_Init+0x27c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	bf94      	ite	ls
 8004324:	2301      	movls	r3, #1
 8004326:	2300      	movhi	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0e7      	b.n	8004502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a78      	ldr	r2, [pc, #480]	; (8004518 <HAL_I2C_Init+0x280>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	0c9b      	lsrs	r3, r3, #18
 800433c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a6a      	ldr	r2, [pc, #424]	; (800450c <HAL_I2C_Init+0x274>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d802      	bhi.n	800436c <HAL_I2C_Init+0xd4>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3301      	adds	r3, #1
 800436a:	e009      	b.n	8004380 <HAL_I2C_Init+0xe8>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	4a69      	ldr	r2, [pc, #420]	; (800451c <HAL_I2C_Init+0x284>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	3301      	adds	r3, #1
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	430b      	orrs	r3, r1
 8004386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	495c      	ldr	r1, [pc, #368]	; (800450c <HAL_I2C_Init+0x274>)
 800439c:	428b      	cmp	r3, r1
 800439e:	d819      	bhi.n	80043d4 <HAL_I2C_Init+0x13c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1e59      	subs	r1, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ae:	1c59      	adds	r1, r3, #1
 80043b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043b4:	400b      	ands	r3, r1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_I2C_Init+0x138>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1e59      	subs	r1, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ce:	e051      	b.n	8004474 <HAL_I2C_Init+0x1dc>
 80043d0:	2304      	movs	r3, #4
 80043d2:	e04f      	b.n	8004474 <HAL_I2C_Init+0x1dc>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d111      	bne.n	8004400 <HAL_I2C_Init+0x168>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1e58      	subs	r0, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	440b      	add	r3, r1
 80043ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e012      	b.n	8004426 <HAL_I2C_Init+0x18e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1e58      	subs	r0, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	0099      	lsls	r1, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_I2C_Init+0x196>
 800442a:	2301      	movs	r3, #1
 800442c:	e022      	b.n	8004474 <HAL_I2C_Init+0x1dc>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10e      	bne.n	8004454 <HAL_I2C_Init+0x1bc>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1e58      	subs	r0, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	440b      	add	r3, r1
 8004444:	fbb0 f3f3 	udiv	r3, r0, r3
 8004448:	3301      	adds	r3, #1
 800444a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004452:	e00f      	b.n	8004474 <HAL_I2C_Init+0x1dc>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e58      	subs	r0, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	0099      	lsls	r1, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	6809      	ldr	r1, [r1, #0]
 8004478:	4313      	orrs	r3, r2
 800447a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6911      	ldr	r1, [r2, #16]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68d2      	ldr	r2, [r2, #12]
 80044ae:	4311      	orrs	r1, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	000186a0 	.word	0x000186a0
 8004510:	001e847f 	.word	0x001e847f
 8004514:	003d08ff 	.word	0x003d08ff
 8004518:	431bde83 	.word	0x431bde83
 800451c:	10624dd3 	.word	0x10624dd3

08004520 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800453a:	f7fe fb2b 	bl	8002b94 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b20      	cmp	r3, #32
 800454a:	f040 80d9 	bne.w	8004700 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2319      	movs	r3, #25
 8004554:	2201      	movs	r2, #1
 8004556:	496d      	ldr	r1, [pc, #436]	; (800470c <HAL_I2C_Mem_Write+0x1ec>)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f002 f90d 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
 8004566:	e0cc      	b.n	8004702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_I2C_Mem_Write+0x56>
 8004572:	2302      	movs	r3, #2
 8004574:	e0c5      	b.n	8004702 <HAL_I2C_Mem_Write+0x1e2>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d007      	beq.n	800459c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2221      	movs	r2, #33	; 0x21
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2240      	movs	r2, #64	; 0x40
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a4d      	ldr	r2, [pc, #308]	; (8004710 <HAL_I2C_Mem_Write+0x1f0>)
 80045dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045de:	88f8      	ldrh	r0, [r7, #6]
 80045e0:	893a      	ldrh	r2, [r7, #8]
 80045e2:	8979      	ldrh	r1, [r7, #10]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4603      	mov	r3, r0
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f001 fe9c 	bl	800632c <I2C_RequestMemoryWrite>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d052      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e081      	b.n	8004702 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f002 f98e 	bl	8006924 <I2C_WaitOnTXEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b04      	cmp	r3, #4
 8004614:	d107      	bne.n	8004626 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06b      	b.n	8004702 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d11b      	bne.n	80046a0 <HAL_I2C_Mem_Write+0x180>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d017      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1aa      	bne.n	80045fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f002 f97a 	bl	80069a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d107      	bne.n	80046d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e016      	b.n	8004702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	00100002 	.word	0x00100002
 8004710:	ffff0000 	.word	0xffff0000

08004714 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4603      	mov	r3, r0
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	460b      	mov	r3, r1
 8004728:	813b      	strh	r3, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800472e:	f7fe fa31 	bl	8002b94 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	f040 8208 	bne.w	8004b52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	2319      	movs	r3, #25
 8004748:	2201      	movs	r2, #1
 800474a:	497b      	ldr	r1, [pc, #492]	; (8004938 <HAL_I2C_Mem_Read+0x224>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f002 f813 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	e1fb      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_I2C_Mem_Read+0x56>
 8004766:	2302      	movs	r3, #2
 8004768:	e1f4      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d007      	beq.n	8004790 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2222      	movs	r2, #34	; 0x22
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2240      	movs	r2, #64	; 0x40
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a5b      	ldr	r2, [pc, #364]	; (800493c <HAL_I2C_Mem_Read+0x228>)
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047d2:	88f8      	ldrh	r0, [r7, #6]
 80047d4:	893a      	ldrh	r2, [r7, #8]
 80047d6:	8979      	ldrh	r1, [r7, #10]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	4603      	mov	r3, r0
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f001 fe38 	bl	8006458 <I2C_RequestMemoryRead>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1b0      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d113      	bne.n	8004822 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e184      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	2b01      	cmp	r3, #1
 8004828:	d11b      	bne.n	8004862 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e164      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	2b02      	cmp	r3, #2
 8004868:	d11b      	bne.n	80048a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	e144      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048b8:	e138      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b03      	cmp	r3, #3
 80048c0:	f200 80f1 	bhi.w	8004aa6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d123      	bne.n	8004914 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f002 f8db 	bl	8006a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e139      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004912:	e10b      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b02      	cmp	r3, #2
 800491a:	d14e      	bne.n	80049ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2200      	movs	r2, #0
 8004924:	4906      	ldr	r1, [pc, #24]	; (8004940 <HAL_I2C_Mem_Read+0x22c>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f001 ff26 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e10e      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
 8004936:	bf00      	nop
 8004938:	00100002 	.word	0x00100002
 800493c:	ffff0000 	.word	0xffff0000
 8004940:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b8:	e0b8      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	2200      	movs	r2, #0
 80049c2:	4966      	ldr	r1, [pc, #408]	; (8004b5c <HAL_I2C_Mem_Read+0x448>)
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f001 fed7 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0bf      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	494f      	ldr	r1, [pc, #316]	; (8004b5c <HAL_I2C_Mem_Read+0x448>)
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f001 fea9 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e091      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aa4:	e042      	b.n	8004b2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f001 ffee 	bl	8006a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e04c      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d118      	bne.n	8004b2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f aec2 	bne.w	80048ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
  }
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	00010004 	.word	0x00010004

08004b60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d003      	beq.n	8004b98 <HAL_I2C_EV_IRQHandler+0x38>
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	f040 80c1 	bne.w	8004d1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_I2C_EV_IRQHandler+0x6e>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bb8:	d003      	beq.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x62>
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bc0:	d101      	bne.n	8004bc6 <HAL_I2C_EV_IRQHandler+0x66>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_I2C_EV_IRQHandler+0x68>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f000 8132 	beq.w	8004e32 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x92>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0a5b      	lsrs	r3, r3, #9
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 ffd6 	bl	8006b96 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fd83 	bl	80056f6 <I2C_Master_SB>
 8004bf0:	e092      	b.n	8004d18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_I2C_EV_IRQHandler+0xb2>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	0a5b      	lsrs	r3, r3, #9
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fdf9 	bl	8005802 <I2C_Master_ADD10>
 8004c10:	e082      	b.n	8004d18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_I2C_EV_IRQHandler+0xd2>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0a5b      	lsrs	r3, r3, #9
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fe13 	bl	8005856 <I2C_Master_ADDR>
 8004c30:	e072      	b.n	8004d18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d03b      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4c:	f000 80f3 	beq.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	09db      	lsrs	r3, r3, #7
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00f      	beq.n	8004c7c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	0a9b      	lsrs	r3, r3, #10
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	089b      	lsrs	r3, r3, #2
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f9f3 	bl	8005060 <I2C_MasterTransmit_TXE>
 8004c7a:	e04d      	b.n	8004d18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80d6 	beq.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0a5b      	lsrs	r3, r3, #9
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80cf 	beq.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c98:	7bbb      	ldrb	r3, [r7, #14]
 8004c9a:	2b21      	cmp	r3, #33	; 0x21
 8004c9c:	d103      	bne.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa7a 	bl	8005198 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca4:	e0c7      	b.n	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	f040 80c4 	bne.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fae8 	bl	8005284 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb4:	e0bf      	b.n	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	f000 80b7 	beq.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00f      	beq.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x194>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	0a9b      	lsrs	r3, r3, #10
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x194>
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb5d 	bl	80053ac <I2C_MasterReceive_RXNE>
 8004cf2:	e011      	b.n	8004d18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 809a 	beq.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	0a5b      	lsrs	r3, r3, #9
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8093 	beq.w	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fc06 	bl	8005522 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d16:	e08e      	b.n	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d18:	e08d      	b.n	8004e36 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e007      	b.n	8004d3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d012      	beq.n	8004d6e <HAL_I2C_EV_IRQHandler+0x20e>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	0a5b      	lsrs	r3, r3, #9
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00c      	beq.n	8004d6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 ffc4 	bl	8005cf4 <I2C_Slave_ADDR>
 8004d6c:	e066      	b.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_I2C_EV_IRQHandler+0x22e>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fffe 	bl	8005d88 <I2C_Slave_STOPF>
 8004d8c:	e056      	b.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	2b21      	cmp	r3, #33	; 0x21
 8004d92:	d002      	beq.n	8004d9a <HAL_I2C_EV_IRQHandler+0x23a>
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	2b29      	cmp	r3, #41	; 0x29
 8004d98:	d125      	bne.n	8004de6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	09db      	lsrs	r3, r3, #7
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00f      	beq.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x266>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	0a9b      	lsrs	r3, r3, #10
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x266>
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 feda 	bl	8005b78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dc4:	e039      	b.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d033      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2da>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d02d      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 ff07 	bl	8005bf2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004de4:	e029      	b.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00f      	beq.n	8004e12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	0a9b      	lsrs	r3, r3, #10
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 ff12 	bl	8005c34 <I2C_SlaveReceive_RXNE>
 8004e10:	e014      	b.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	089b      	lsrs	r3, r3, #2
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00e      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	0a5b      	lsrs	r3, r3, #9
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 ff40 	bl	8005cb0 <I2C_SlaveReceive_BTF>
 8004e30:	e004      	b.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e32:	bf00      	nop
 8004e34:	e002      	b.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e3a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08a      	sub	sp, #40	; 0x28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e64:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00e      	beq.n	8004e90 <HAL_I2C_ER_IRQHandler+0x4e>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	0a5b      	lsrs	r3, r3, #9
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00e      	beq.n	8004eba <HAL_I2C_ER_IRQHandler+0x78>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f043 0302 	orr.w	r3, r3, #2
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004eb8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	0a9b      	lsrs	r3, r3, #10
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03f      	beq.n	8004f46 <HAL_I2C_ER_IRQHandler+0x104>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d039      	beq.n	8004f46 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004ed2:	7efb      	ldrb	r3, [r7, #27]
 8004ed4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004eec:	7ebb      	ldrb	r3, [r7, #26]
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d112      	bne.n	8004f18 <HAL_I2C_ER_IRQHandler+0xd6>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <HAL_I2C_ER_IRQHandler+0xd6>
 8004ef8:	7cfb      	ldrb	r3, [r7, #19]
 8004efa:	2b21      	cmp	r3, #33	; 0x21
 8004efc:	d008      	beq.n	8004f10 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b29      	cmp	r3, #41	; 0x29
 8004f02:	d005      	beq.n	8004f10 <HAL_I2C_ER_IRQHandler+0xce>
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b28      	cmp	r3, #40	; 0x28
 8004f08:	d106      	bne.n	8004f18 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b21      	cmp	r3, #33	; 0x21
 8004f0e:	d103      	bne.n	8004f18 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f869 	bl	8005fe8 <I2C_Slave_AF>
 8004f16:	e016      	b.n	8004f46 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f2a:	7efb      	ldrb	r3, [r7, #27]
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d002      	beq.n	8004f36 <HAL_I2C_ER_IRQHandler+0xf4>
 8004f30:	7efb      	ldrb	r3, [r7, #27]
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d107      	bne.n	8004f46 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	0adb      	lsrs	r3, r3, #11
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <HAL_I2C_ER_IRQHandler+0x12e>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	0a1b      	lsrs	r3, r3, #8
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	f043 0308 	orr.w	r3, r3, #8
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004f6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 f8a0 	bl	80060c8 <I2C_ITError>
  }
}
 8004f88:	bf00      	nop
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
 8004fec:	4613      	mov	r3, r2
 8004fee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005076:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	2b00      	cmp	r3, #0
 8005084:	d150      	bne.n	8005128 <I2C_MasterTransmit_TXE+0xc8>
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b21      	cmp	r3, #33	; 0x21
 800508a:	d14d      	bne.n	8005128 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d01d      	beq.n	80050ce <I2C_MasterTransmit_TXE+0x6e>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b20      	cmp	r3, #32
 8005096:	d01a      	beq.n	80050ce <I2C_MasterTransmit_TXE+0x6e>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800509e:	d016      	beq.n	80050ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2211      	movs	r2, #17
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff ff62 	bl	8004f90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050cc:	e060      	b.n	8005190 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d107      	bne.n	8005118 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff7d 	bl	8005010 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005116:	e03b      	b.n	8005190 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff35 	bl	8004f90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005126:	e033      	b.n	8005190 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b21      	cmp	r3, #33	; 0x21
 800512c:	d005      	beq.n	800513a <I2C_MasterTransmit_TXE+0xda>
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d12d      	bne.n	8005190 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b22      	cmp	r3, #34	; 0x22
 8005138:	d12a      	bne.n	8005190 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005154:	e01c      	b.n	8005190 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d103      	bne.n	800516a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f88e 	bl	8005284 <I2C_MemoryTransmit_TXE_BTF>
}
 8005168:	e012      	b.n	8005190 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800518e:	e7ff      	b.n	8005190 <I2C_MasterTransmit_TXE+0x130>
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b21      	cmp	r3, #33	; 0x21
 80051b0:	d164      	bne.n	800527c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d012      	beq.n	80051e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80051e0:	e04c      	b.n	800527c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d01d      	beq.n	8005224 <I2C_MasterTransmit_BTF+0x8c>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d01a      	beq.n	8005224 <I2C_MasterTransmit_BTF+0x8c>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051f4:	d016      	beq.n	8005224 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005204:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2211      	movs	r2, #17
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff feb7 	bl	8004f90 <HAL_I2C_MasterTxCpltCallback>
}
 8005222:	e02b      	b.n	800527c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005232:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005242:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d107      	bne.n	800526e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fed2 	bl	8005010 <HAL_I2C_MemTxCpltCallback>
}
 800526c:	e006      	b.n	800527c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fe8a 	bl	8004f90 <HAL_I2C_MasterTxCpltCallback>
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005292:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11d      	bne.n	80052d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d10b      	bne.n	80052bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b4:	1c9a      	adds	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80052ba:	e073      	b.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	121b      	asrs	r3, r3, #8
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052d6:	e065      	b.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10b      	bne.n	80052f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052f6:	e055      	b.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d151      	bne.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b22      	cmp	r3, #34	; 0x22
 8005304:	d10d      	bne.n	8005322 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005320:	e040      	b.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b21      	cmp	r3, #33	; 0x21
 8005330:	d112      	bne.n	8005358 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	781a      	ldrb	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005356:	e025      	b.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d120      	bne.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b21      	cmp	r3, #33	; 0x21
 8005366:	d11d      	bne.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005376:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fe36 	bl	8005010 <HAL_I2C_MemTxCpltCallback>
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b22      	cmp	r3, #34	; 0x22
 80053be:	f040 80ac 	bne.w	800551a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d921      	bls.n	8005414 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	f040 808c 	bne.w	800551a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005412:	e082      	b.n	800551a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	2b02      	cmp	r3, #2
 800541a:	d075      	beq.n	8005508 <I2C_MasterReceive_RXNE+0x15c>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d002      	beq.n	8005428 <I2C_MasterReceive_RXNE+0x7c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d16f      	bne.n	8005508 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f001 fafd 	bl	8006a28 <I2C_WaitOnSTOPRequestThroughIT>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d142      	bne.n	80054ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005442:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005452:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d10a      	bne.n	80054a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fdc1 	bl	8005024 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054a2:	e03a      	b.n	800551a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2212      	movs	r2, #18
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fd76 	bl	8004fa4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054b8:	e02f      	b.n	800551a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fd99 	bl	8005038 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005506:	e008      	b.n	800551a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005516:	605a      	str	r2, [r3, #4]
}
 8005518:	e7ff      	b.n	800551a <I2C_MasterReceive_RXNE+0x16e>
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b04      	cmp	r3, #4
 8005538:	d11b      	bne.n	8005572 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005548:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005570:	e0bd      	b.n	80056ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b03      	cmp	r3, #3
 800557a:	d129      	bne.n	80055d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00a      	beq.n	80055a8 <I2C_MasterReceive_BTF+0x86>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d007      	beq.n	80055a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055ce:	e08e      	b.n	80056ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d176      	bne.n	80056c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d002      	beq.n	80055e6 <I2C_MasterReceive_BTF+0xc4>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d108      	bne.n	80055f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e019      	b.n	800562c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d002      	beq.n	8005604 <I2C_MasterReceive_BTF+0xe2>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d108      	bne.n	8005616 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e00a      	b.n	800562c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b10      	cmp	r3, #16
 800561a:	d007      	beq.n	800562c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005686:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d10a      	bne.n	80056b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fcba 	bl	8005024 <HAL_I2C_MemRxCpltCallback>
}
 80056b0:	e01d      	b.n	80056ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2212      	movs	r2, #18
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff fc6f 	bl	8004fa4 <HAL_I2C_MasterRxCpltCallback>
}
 80056c6:	e012      	b.n	80056ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d117      	bne.n	800573a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005722:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005724:	e067      	b.n	80057f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	611a      	str	r2, [r3, #16]
}
 8005738:	e05d      	b.n	80057f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005742:	d133      	bne.n	80057ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b21      	cmp	r3, #33	; 0x21
 800574e:	d109      	bne.n	8005764 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	e008      	b.n	8005776 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <I2C_Master_SB+0x92>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	d032      	beq.n	80057f6 <I2C_Master_SB+0x100>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d02d      	beq.n	80057f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	605a      	str	r2, [r3, #4]
}
 80057aa:	e024      	b.n	80057f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10e      	bne.n	80057d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	11db      	asrs	r3, r3, #7
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0306 	and.w	r3, r3, #6
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f063 030f 	orn	r3, r3, #15
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	611a      	str	r2, [r3, #16]
}
 80057d0:	e011      	b.n	80057f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10d      	bne.n	80057f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	b29b      	uxth	r3, r3
 80057e0:	11db      	asrs	r3, r3, #7
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0306 	and.w	r3, r3, #6
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f063 030e 	orn	r3, r3, #14
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	611a      	str	r2, [r3, #16]
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	b2da      	uxtb	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <I2C_Master_ADD10+0x26>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <I2C_Master_ADD10+0x48>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005848:	605a      	str	r2, [r3, #4]
  }
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005856:	b480      	push	{r7}
 8005858:	b091      	sub	sp, #68	; 0x44
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b22      	cmp	r3, #34	; 0x22
 800587e:	f040 8169 	bne.w	8005b54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <I2C_Master_ADDR+0x54>
 800588a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d10b      	bne.n	80058aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005892:	2300      	movs	r3, #0
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	633b      	str	r3, [r7, #48]	; 0x30
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	e160      	b.n	8005b6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d11d      	bne.n	80058ee <I2C_Master_ADDR+0x98>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058ba:	d118      	bne.n	80058ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058bc:	2300      	movs	r3, #0
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50
 80058ec:	e13e      	b.n	8005b6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d113      	bne.n	8005920 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f8:	2300      	movs	r3, #0
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e115      	b.n	8005b4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	f040 808a 	bne.w	8005a40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005932:	d137      	bne.n	80059a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005942:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005952:	d113      	bne.n	800597c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005962:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005964:	2300      	movs	r3, #0
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	e0e7      	b.n	8005b4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e0d3      	b.n	8005b4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d02e      	beq.n	8005a08 <I2C_Master_ADDR+0x1b2>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d02b      	beq.n	8005a08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	2b12      	cmp	r3, #18
 80059b4:	d102      	bne.n	80059bc <I2C_Master_ADDR+0x166>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d125      	bne.n	8005a08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d00e      	beq.n	80059e0 <I2C_Master_ADDR+0x18a>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d00b      	beq.n	80059e0 <I2C_Master_ADDR+0x18a>
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d008      	beq.n	80059e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e007      	b.n	80059f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	e0a1      	b.n	8005b4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e085      	b.n	8005b4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d14d      	bne.n	8005ae6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d016      	beq.n	8005a7e <I2C_Master_ADDR+0x228>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d013      	beq.n	8005a7e <I2C_Master_ADDR+0x228>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d010      	beq.n	8005a7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e007      	b.n	8005a8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9c:	d117      	bne.n	8005ace <I2C_Master_ADDR+0x278>
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aa4:	d00b      	beq.n	8005abe <I2C_Master_ADDR+0x268>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d008      	beq.n	8005abe <I2C_Master_ADDR+0x268>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d005      	beq.n	8005abe <I2C_Master_ADDR+0x268>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d002      	beq.n	8005abe <I2C_Master_ADDR+0x268>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d107      	bne.n	8005ace <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005acc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	e032      	b.n	8005b4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b04:	d117      	bne.n	8005b36 <I2C_Master_ADDR+0x2e0>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b0c:	d00b      	beq.n	8005b26 <I2C_Master_ADDR+0x2d0>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d008      	beq.n	8005b26 <I2C_Master_ADDR+0x2d0>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d005      	beq.n	8005b26 <I2C_Master_ADDR+0x2d0>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d002      	beq.n	8005b26 <I2C_Master_ADDR+0x2d0>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d107      	bne.n	8005b36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b52:	e00b      	b.n	8005b6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
}
 8005b6a:	e7ff      	b.n	8005b6c <I2C_Master_ADDR+0x316>
 8005b6c:	bf00      	nop
 8005b6e:	3744      	adds	r7, #68	; 0x44
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d02b      	beq.n	8005bea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d114      	bne.n	8005bea <I2C_SlaveTransmit_TXE+0x72>
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b29      	cmp	r3, #41	; 0x29
 8005bc4:	d111      	bne.n	8005bea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2221      	movs	r2, #33	; 0x21
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2228      	movs	r2, #40	; 0x28
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff f9e7 	bl	8004fb8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d011      	beq.n	8005c28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d02c      	beq.n	8005ca8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d114      	bne.n	8005ca8 <I2C_SlaveReceive_RXNE+0x74>
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b2a      	cmp	r3, #42	; 0x2a
 8005c82:	d111      	bne.n	8005ca8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2222      	movs	r2, #34	; 0x22
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2228      	movs	r2, #40	; 0x28
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff f992 	bl	8004fcc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d012      	beq.n	8005ce8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d0e:	2b28      	cmp	r3, #40	; 0x28
 8005d10:	d127      	bne.n	8005d62 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	089b      	lsrs	r3, r3, #2
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	09db      	lsrs	r3, r3, #7
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	81bb      	strh	r3, [r7, #12]
 8005d44:	e002      	b.n	8005d4c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d54:	89ba      	ldrh	r2, [r7, #12]
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff f940 	bl	8004fe0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d60:	e00e      	b.n	8005d80 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005da6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de4:	d172      	bne.n	8005ecc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b22      	cmp	r3, #34	; 0x22
 8005dea:	d002      	beq.n	8005df2 <I2C_Slave_STOPF+0x6a>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b2a      	cmp	r3, #42	; 0x2a
 8005df0:	d135      	bne.n	8005e5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fd ffa8 	bl	8003d80 <HAL_DMA_GetState>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d049      	beq.n	8005eca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	4a69      	ldr	r2, [pc, #420]	; (8005fe0 <I2C_Slave_STOPF+0x258>)
 8005e3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd fdf0 	bl	8003a28 <HAL_DMA_Abort_IT>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d03d      	beq.n	8005eca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e5c:	e035      	b.n	8005eca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f043 0204 	orr.w	r2, r3, #4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd ff72 	bl	8003d80 <HAL_DMA_GetState>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d014      	beq.n	8005ecc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	4a4e      	ldr	r2, [pc, #312]	; (8005fe0 <I2C_Slave_STOPF+0x258>)
 8005ea8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fd fdba 	bl	8003a28 <HAL_DMA_Abort_IT>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	e000      	b.n	8005ecc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005eca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d03e      	beq.n	8005f54 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d112      	bne.n	8005f0a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d112      	bne.n	8005f3e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f043 0204 	orr.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8b3 	bl	80060c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f62:	e039      	b.n	8005fd8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b2a      	cmp	r3, #42	; 0x2a
 8005f68:	d109      	bne.n	8005f7e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2228      	movs	r2, #40	; 0x28
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff f827 	bl	8004fcc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b28      	cmp	r3, #40	; 0x28
 8005f88:	d111      	bne.n	8005fae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <I2C_Slave_STOPF+0x25c>)
 8005f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff f828 	bl	8004ffc <HAL_I2C_ListenCpltCallback>
}
 8005fac:	e014      	b.n	8005fd8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	2b22      	cmp	r3, #34	; 0x22
 8005fb4:	d002      	beq.n	8005fbc <I2C_Slave_STOPF+0x234>
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b22      	cmp	r3, #34	; 0x22
 8005fba:	d10d      	bne.n	8005fd8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fe fffa 	bl	8004fcc <HAL_I2C_SlaveRxCpltCallback>
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	08006629 	.word	0x08006629
 8005fe4:	ffff0000 	.word	0xffff0000

08005fe8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d002      	beq.n	800600a <I2C_Slave_AF+0x22>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b20      	cmp	r3, #32
 8006008:	d129      	bne.n	800605e <I2C_Slave_AF+0x76>
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b28      	cmp	r3, #40	; 0x28
 800600e:	d126      	bne.n	800605e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <I2C_Slave_AF+0xdc>)
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006024:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800602e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fe ffd0 	bl	8004ffc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800605c:	e02e      	b.n	80060bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b21      	cmp	r3, #33	; 0x21
 8006062:	d126      	bne.n	80060b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <I2C_Slave_AF+0xdc>)
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2221      	movs	r2, #33	; 0x21
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800608e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006098:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fe ff84 	bl	8004fb8 <HAL_I2C_SlaveTxCpltCallback>
}
 80060b0:	e004      	b.n	80060bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060ba:	615a      	str	r2, [r3, #20]
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	ffff0000 	.word	0xffff0000

080060c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d002      	beq.n	80060ec <I2C_ITError+0x24>
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d10a      	bne.n	8006102 <I2C_ITError+0x3a>
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b22      	cmp	r3, #34	; 0x22
 80060f0:	d107      	bne.n	8006102 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006100:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006108:	2b28      	cmp	r3, #40	; 0x28
 800610a:	d107      	bne.n	800611c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2228      	movs	r2, #40	; 0x28
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800611a:	e015      	b.n	8006148 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612a:	d00a      	beq.n	8006142 <I2C_ITError+0x7a>
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	2b60      	cmp	r3, #96	; 0x60
 8006130:	d007      	beq.n	8006142 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006156:	d162      	bne.n	800621e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006166:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d020      	beq.n	80061b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	4a6a      	ldr	r2, [pc, #424]	; (8006324 <I2C_ITError+0x25c>)
 800617c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	4618      	mov	r0, r3
 8006184:	f7fd fc50 	bl	8003a28 <HAL_DMA_Abort_IT>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8089 	beq.w	80062a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061b2:	4610      	mov	r0, r2
 80061b4:	4798      	blx	r3
 80061b6:	e074      	b.n	80062a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	4a59      	ldr	r2, [pc, #356]	; (8006324 <I2C_ITError+0x25c>)
 80061be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fd fc2f 	bl	8003a28 <HAL_DMA_Abort_IT>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d068      	beq.n	80062a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d10b      	bne.n	80061f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006218:	4610      	mov	r0, r2
 800621a:	4798      	blx	r3
 800621c:	e041      	b.n	80062a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b60      	cmp	r3, #96	; 0x60
 8006228:	d125      	bne.n	8006276 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d10b      	bne.n	800625e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fe feec 	bl	800504c <HAL_I2C_AbortCpltCallback>
 8006274:	e015      	b.n	80062a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d10b      	bne.n	800629c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7fe fecb 	bl	8005038 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10e      	bne.n	80062d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d113      	bne.n	800631c <I2C_ITError+0x254>
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	2b28      	cmp	r3, #40	; 0x28
 80062f8:	d110      	bne.n	800631c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <I2C_ITError+0x260>)
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fe fe70 	bl	8004ffc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	08006629 	.word	0x08006629
 8006328:	ffff0000 	.word	0xffff0000

0800632c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	461a      	mov	r2, r3
 800633a:	4603      	mov	r3, r0
 800633c:	817b      	strh	r3, [r7, #10]
 800633e:	460b      	mov	r3, r1
 8006340:	813b      	strh	r3, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	2200      	movs	r2, #0
 800635e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fa08 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00d      	beq.n	800638a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637c:	d103      	bne.n	8006386 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e05f      	b.n	800644a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800638a:	897b      	ldrh	r3, [r7, #10]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	492d      	ldr	r1, [pc, #180]	; (8006454 <I2C_RequestMemoryWrite+0x128>)
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fa40 	bl	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e04c      	b.n	800644a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	6a39      	ldr	r1, [r7, #32]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 faaa 	bl	8006924 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00d      	beq.n	80063f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d107      	bne.n	80063ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e02b      	b.n	800644a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d105      	bne.n	8006404 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063f8:	893b      	ldrh	r3, [r7, #8]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	611a      	str	r2, [r3, #16]
 8006402:	e021      	b.n	8006448 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006404:	893b      	ldrh	r3, [r7, #8]
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	b29b      	uxth	r3, r3
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006414:	6a39      	ldr	r1, [r7, #32]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fa84 	bl	8006924 <I2C_WaitOnTXEFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b04      	cmp	r3, #4
 8006428:	d107      	bne.n	800643a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e005      	b.n	800644a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800643e:	893b      	ldrh	r3, [r7, #8]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	00010002 	.word	0x00010002

08006458 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	4603      	mov	r3, r0
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	460b      	mov	r3, r1
 800646c:	813b      	strh	r3, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006480:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2200      	movs	r2, #0
 800649a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f96a 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b8:	d103      	bne.n	80064c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e0aa      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064c6:	897b      	ldrh	r3, [r7, #10]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	4952      	ldr	r1, [pc, #328]	; (8006624 <I2C_RequestMemoryRead+0x1cc>)
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f9a2 	bl	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e097      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fa0c 	bl	8006924 <I2C_WaitOnTXEFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	2b04      	cmp	r3, #4
 8006518:	d107      	bne.n	800652a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e076      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006534:	893b      	ldrh	r3, [r7, #8]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	e021      	b.n	8006584 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006540:	893b      	ldrh	r3, [r7, #8]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	b29b      	uxth	r3, r3
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f9e6 	bl	8006924 <I2C_WaitOnTXEFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b04      	cmp	r3, #4
 8006564:	d107      	bne.n	8006576 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e050      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657a:	893b      	ldrh	r3, [r7, #8]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6a39      	ldr	r1, [r7, #32]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f9cb 	bl	8006924 <I2C_WaitOnTXEFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b04      	cmp	r3, #4
 800659a:	d107      	bne.n	80065ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e035      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f8d3 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00d      	beq.n	80065f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d103      	bne.n	80065f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e013      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065f4:	897b      	ldrh	r3, [r7, #10]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	4906      	ldr	r1, [pc, #24]	; (8006624 <I2C_RequestMemoryRead+0x1cc>)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f90b 	bl	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	00010002 	.word	0x00010002

08006628 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006642:	4b4b      	ldr	r3, [pc, #300]	; (8006770 <I2C_DMAAbort+0x148>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <I2C_DMAAbort+0x14c>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0a1a      	lsrs	r2, r3, #8
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	00da      	lsls	r2, r3, #3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800666e:	e00a      	b.n	8006686 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3b01      	subs	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006684:	d0ea      	beq.n	800665c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006692:	2200      	movs	r2, #0
 8006694:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	2200      	movs	r2, #0
 80066a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	2200      	movs	r2, #0
 80066ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	2200      	movs	r2, #0
 80066da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d10e      	bne.n	8006716 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f7fe fc9c 	bl	800504c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006714:	e027      	b.n	8006766 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006716:	7cfb      	ldrb	r3, [r7, #19]
 8006718:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800671c:	2b28      	cmp	r3, #40	; 0x28
 800671e:	d117      	bne.n	8006750 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800673e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2228      	movs	r2, #40	; 0x28
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800674e:	e007      	b.n	8006760 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	f7fe fc69 	bl	8005038 <HAL_I2C_ErrorCallback>
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000004 	.word	0x20000004
 8006774:	14f8b589 	.word	0x14f8b589

08006778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006788:	e025      	b.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d021      	beq.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006792:	f7fc f9ff 	bl	8002b94 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d116      	bne.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e023      	b.n	800681e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	0c1b      	lsrs	r3, r3, #16
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10d      	bne.n	80067fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	43da      	mvns	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	e00c      	b.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	43da      	mvns	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d0b6      	beq.n	800678a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006834:	e051      	b.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006844:	d123      	bne.n	800688e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006854:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800685e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f043 0204 	orr.w	r2, r3, #4
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e046      	b.n	800691c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d021      	beq.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006896:	f7fc f97d 	bl	8002b94 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d116      	bne.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e020      	b.n	800691c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d10c      	bne.n	80068fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	43da      	mvns	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bf14      	ite	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	2300      	moveq	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	e00b      	b.n	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	43da      	mvns	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d18d      	bne.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006930:	e02d      	b.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f900 	bl	8006b38 <I2C_IsAcknowledgeFailed>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e02d      	b.n	800699e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d021      	beq.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694a:	f7fc f923 	bl	8002b94 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d116      	bne.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e007      	b.n	800699e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d1ca      	bne.n	8006932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069b2:	e02d      	b.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f8bf 	bl	8006b38 <I2C_IsAcknowledgeFailed>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e02d      	b.n	8006a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d021      	beq.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069cc:	f7fc f8e2 	bl	8002b94 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d302      	bcc.n	80069e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d116      	bne.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	f043 0220 	orr.w	r2, r3, #32
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e007      	b.n	8006a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d1ca      	bne.n	80069b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a34:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	08db      	lsrs	r3, r3, #3
 8006a3a:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	0a1a      	lsrs	r2, r3, #8
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e008      	b.n	8006a78 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d0e9      	beq.n	8006a4a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000004 	.word	0x20000004
 8006a88:	14f8b589 	.word	0x14f8b589

08006a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a98:	e042      	b.n	8006b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0310 	and.w	r3, r3, #16
 8006aa4:	2b10      	cmp	r3, #16
 8006aa6:	d119      	bne.n	8006adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0210 	mvn.w	r2, #16
 8006ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e029      	b.n	8006b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006adc:	f7fc f85a 	bl	8002b94 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d116      	bne.n	8006b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	f043 0220 	orr.w	r2, r3, #32
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e007      	b.n	8006b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d1b5      	bne.n	8006a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4e:	d11b      	bne.n	8006b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f043 0204 	orr.w	r2, r3, #4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006ba6:	d103      	bne.n	8006bb0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bae:	e007      	b.n	8006bc0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006bb8:	d102      	bne.n	8006bc0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e267      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d075      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bea:	4b88      	ldr	r3, [pc, #544]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d00c      	beq.n	8006c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf6:	4b85      	ldr	r3, [pc, #532]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d112      	bne.n	8006c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c02:	4b82      	ldr	r3, [pc, #520]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0e:	d10b      	bne.n	8006c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c10:	4b7e      	ldr	r3, [pc, #504]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d05b      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x108>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d157      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e242      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c30:	d106      	bne.n	8006c40 <HAL_RCC_OscConfig+0x74>
 8006c32:	4b76      	ldr	r3, [pc, #472]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a75      	ldr	r2, [pc, #468]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e01d      	b.n	8006c7c <HAL_RCC_OscConfig+0xb0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x98>
 8006c4a:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6f      	ldr	r2, [pc, #444]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a6c      	ldr	r2, [pc, #432]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e00b      	b.n	8006c7c <HAL_RCC_OscConfig+0xb0>
 8006c64:	4b69      	ldr	r3, [pc, #420]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a68      	ldr	r2, [pc, #416]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4b66      	ldr	r3, [pc, #408]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a65      	ldr	r2, [pc, #404]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d013      	beq.n	8006cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fb ff86 	bl	8002b94 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fb ff82 	bl	8002b94 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e207      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	4b5b      	ldr	r3, [pc, #364]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0xc0>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cac:	f7fb ff72 	bl	8002b94 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fb ff6e 	bl	8002b94 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e1f3      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc6:	4b51      	ldr	r3, [pc, #324]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0xe8>
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d063      	beq.n	8006daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ce2:	4b4a      	ldr	r3, [pc, #296]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cee:	4b47      	ldr	r3, [pc, #284]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d11c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cfa:	4b44      	ldr	r3, [pc, #272]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d116      	bne.n	8006d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	4b41      	ldr	r3, [pc, #260]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_RCC_OscConfig+0x152>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d001      	beq.n	8006d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e1c7      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1e:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4937      	ldr	r1, [pc, #220]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d32:	e03a      	b.n	8006daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d020      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d3c:	4b34      	ldr	r3, [pc, #208]	; (8006e10 <HAL_RCC_OscConfig+0x244>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fb ff27 	bl	8002b94 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4a:	f7fb ff23 	bl	8002b94 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e1a8      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f0      	beq.n	8006d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d68:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4925      	ldr	r1, [pc, #148]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	600b      	str	r3, [r1, #0]
 8006d7c:	e015      	b.n	8006daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d7e:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <HAL_RCC_OscConfig+0x244>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fb ff06 	bl	8002b94 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d8c:	f7fb ff02 	bl	8002b94 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e187      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9e:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d036      	beq.n	8006e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <HAL_RCC_OscConfig+0x248>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fb fee6 	bl	8002b94 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dcc:	f7fb fee2 	bl	8002b94 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e167      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x200>
 8006dea:	e01b      	b.n	8006e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <HAL_RCC_OscConfig+0x248>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df2:	f7fb fecf 	bl	8002b94 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df8:	e00e      	b.n	8006e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dfa:	f7fb fecb 	bl	8002b94 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d907      	bls.n	8006e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e150      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	42470000 	.word	0x42470000
 8006e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e18:	4b88      	ldr	r3, [pc, #544]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ea      	bne.n	8006dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8097 	beq.w	8006f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e36:	4b81      	ldr	r3, [pc, #516]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10f      	bne.n	8006e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	4b7d      	ldr	r3, [pc, #500]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	4a7c      	ldr	r2, [pc, #496]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6413      	str	r3, [r2, #64]	; 0x40
 8006e52:	4b7a      	ldr	r3, [pc, #488]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e62:	4b77      	ldr	r3, [pc, #476]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d118      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e6e:	4b74      	ldr	r3, [pc, #464]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a73      	ldr	r2, [pc, #460]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7a:	f7fb fe8b 	bl	8002b94 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e82:	f7fb fe87 	bl	8002b94 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e10c      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e94:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x2ea>
 8006ea8:	4b64      	ldr	r3, [pc, #400]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb4:	e01c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x324>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x30c>
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	4a5e      	ldr	r2, [pc, #376]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eca:	4b5c      	ldr	r3, [pc, #368]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	4a5b      	ldr	r2, [pc, #364]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed6:	e00b      	b.n	8006ef0 <HAL_RCC_OscConfig+0x324>
 8006ed8:	4b58      	ldr	r3, [pc, #352]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	4a57      	ldr	r2, [pc, #348]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee4:	4b55      	ldr	r3, [pc, #340]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	4a54      	ldr	r2, [pc, #336]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eea:	f023 0304 	bic.w	r3, r3, #4
 8006eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef8:	f7fb fe4c 	bl	8002b94 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f00:	f7fb fe48 	bl	8002b94 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e0cb      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f16:	4b49      	ldr	r3, [pc, #292]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ee      	beq.n	8006f00 <HAL_RCC_OscConfig+0x334>
 8006f22:	e014      	b.n	8006f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f24:	f7fb fe36 	bl	8002b94 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fb fe32 	bl	8002b94 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e0b5      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f42:	4b3e      	ldr	r3, [pc, #248]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ee      	bne.n	8006f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d105      	bne.n	8006f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	4a38      	ldr	r2, [pc, #224]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80a1 	beq.w	80070ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f6a:	4b34      	ldr	r3, [pc, #208]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d05c      	beq.n	8007030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d141      	bne.n	8007002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fb fe06 	bl	8002b94 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fb fe02 	bl	8002b94 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e087      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	491b      	ldr	r1, [pc, #108]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fb fddb 	bl	8002b94 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe2:	f7fb fdd7 	bl	8002b94 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e05c      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x416>
 8007000:	e054      	b.n	80070ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007008:	f7fb fdc4 	bl	8002b94 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007010:	f7fb fdc0 	bl	8002b94 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e045      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <HAL_RCC_OscConfig+0x444>
 800702e:	e03d      	b.n	80070ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d107      	bne.n	8007048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e038      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
 800703c:	40023800 	.word	0x40023800
 8007040:	40007000 	.word	0x40007000
 8007044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007048:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_RCC_OscConfig+0x4ec>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d028      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d121      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d11a      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800707e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007080:	4293      	cmp	r3, r2
 8007082:	d111      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	3b01      	subs	r3, #1
 8007092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007094:	429a      	cmp	r2, r3
 8007096:	d107      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023800 	.word	0x40023800

080070bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0cc      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070d0:	4b68      	ldr	r3, [pc, #416]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d90c      	bls.n	80070f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b65      	ldr	r3, [pc, #404]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b63      	ldr	r3, [pc, #396]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0b8      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d020      	beq.n	8007146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007110:	4b59      	ldr	r3, [pc, #356]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	4a58      	ldr	r2, [pc, #352]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800711a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007128:	4b53      	ldr	r3, [pc, #332]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	4a52      	ldr	r2, [pc, #328]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007134:	4b50      	ldr	r3, [pc, #320]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	494d      	ldr	r1, [pc, #308]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d044      	beq.n	80071dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d107      	bne.n	800716a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	4b47      	ldr	r3, [pc, #284]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d119      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e07f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d003      	beq.n	800717a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007176:	2b03      	cmp	r3, #3
 8007178:	d107      	bne.n	800718a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717a:	4b3f      	ldr	r3, [pc, #252]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e06f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718a:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e067      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f023 0203 	bic.w	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4934      	ldr	r1, [pc, #208]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071ac:	f7fb fcf2 	bl	8002b94 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b2:	e00a      	b.n	80071ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b4:	f7fb fcee 	bl	8002b94 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e04f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ca:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 020c 	and.w	r2, r3, #12
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	429a      	cmp	r2, r3
 80071da:	d1eb      	bne.n	80071b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d20c      	bcs.n	8007204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ea:	4b22      	ldr	r3, [pc, #136]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d001      	beq.n	8007204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e032      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007210:	4b19      	ldr	r3, [pc, #100]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4916      	ldr	r1, [pc, #88]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	4313      	orrs	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	490e      	ldr	r1, [pc, #56]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007242:	f000 f821 	bl	8007288 <HAL_RCC_GetSysClockFreq>
 8007246:	4602      	mov	r2, r0
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	490a      	ldr	r1, [pc, #40]	; (800727c <HAL_RCC_ClockConfig+0x1c0>)
 8007254:	5ccb      	ldrb	r3, [r1, r3]
 8007256:	fa22 f303 	lsr.w	r3, r2, r3
 800725a:	4a09      	ldr	r2, [pc, #36]	; (8007280 <HAL_RCC_ClockConfig+0x1c4>)
 800725c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_RCC_ClockConfig+0x1c8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7fb fc52 	bl	8002b0c <HAL_InitTick>

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023c00 	.word	0x40023c00
 8007278:	40023800 	.word	0x40023800
 800727c:	08008300 	.word	0x08008300
 8007280:	20000004 	.word	0x20000004
 8007284:	20000008 	.word	0x20000008

08007288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800728c:	b090      	sub	sp, #64	; 0x40
 800728e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
 8007294:	2300      	movs	r3, #0
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007298:	2300      	movs	r3, #0
 800729a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072a0:	4b59      	ldr	r3, [pc, #356]	; (8007408 <HAL_RCC_GetSysClockFreq+0x180>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d00d      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x40>
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	f200 80a1 	bhi.w	80073f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_RCC_GetSysClockFreq+0x34>
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d003      	beq.n	80072c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80072ba:	e09b      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072bc:	4b53      	ldr	r3, [pc, #332]	; (800740c <HAL_RCC_GetSysClockFreq+0x184>)
 80072be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072c0:	e09b      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072c2:	4b53      	ldr	r3, [pc, #332]	; (8007410 <HAL_RCC_GetSysClockFreq+0x188>)
 80072c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072c6:	e098      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c8:	4b4f      	ldr	r3, [pc, #316]	; (8007408 <HAL_RCC_GetSysClockFreq+0x180>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072d2:	4b4d      	ldr	r3, [pc, #308]	; (8007408 <HAL_RCC_GetSysClockFreq+0x180>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d028      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072de:	4b4a      	ldr	r3, [pc, #296]	; (8007408 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	099b      	lsrs	r3, r3, #6
 80072e4:	2200      	movs	r2, #0
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	627a      	str	r2, [r7, #36]	; 0x24
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072f0:	2100      	movs	r1, #0
 80072f2:	4b47      	ldr	r3, [pc, #284]	; (8007410 <HAL_RCC_GetSysClockFreq+0x188>)
 80072f4:	fb03 f201 	mul.w	r2, r3, r1
 80072f8:	2300      	movs	r3, #0
 80072fa:	fb00 f303 	mul.w	r3, r0, r3
 80072fe:	4413      	add	r3, r2
 8007300:	4a43      	ldr	r2, [pc, #268]	; (8007410 <HAL_RCC_GetSysClockFreq+0x188>)
 8007302:	fba0 1202 	umull	r1, r2, r0, r2
 8007306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007308:	460a      	mov	r2, r1
 800730a:	62ba      	str	r2, [r7, #40]	; 0x28
 800730c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730e:	4413      	add	r3, r2
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007314:	2200      	movs	r2, #0
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	61fa      	str	r2, [r7, #28]
 800731a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800731e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007322:	f7f9 fbcf 	bl	8000ac4 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4613      	mov	r3, r2
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732e:	e053      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007330:	4b35      	ldr	r3, [pc, #212]	; (8007408 <HAL_RCC_GetSysClockFreq+0x180>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	099b      	lsrs	r3, r3, #6
 8007336:	2200      	movs	r2, #0
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	617a      	str	r2, [r7, #20]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007342:	f04f 0b00 	mov.w	fp, #0
 8007346:	4652      	mov	r2, sl
 8007348:	465b      	mov	r3, fp
 800734a:	f04f 0000 	mov.w	r0, #0
 800734e:	f04f 0100 	mov.w	r1, #0
 8007352:	0159      	lsls	r1, r3, #5
 8007354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007358:	0150      	lsls	r0, r2, #5
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	ebb2 080a 	subs.w	r8, r2, sl
 8007362:	eb63 090b 	sbc.w	r9, r3, fp
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007372:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007376:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800737a:	ebb2 0408 	subs.w	r4, r2, r8
 800737e:	eb63 0509 	sbc.w	r5, r3, r9
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	00eb      	lsls	r3, r5, #3
 800738c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007390:	00e2      	lsls	r2, r4, #3
 8007392:	4614      	mov	r4, r2
 8007394:	461d      	mov	r5, r3
 8007396:	eb14 030a 	adds.w	r3, r4, sl
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	eb45 030b 	adc.w	r3, r5, fp
 80073a0:	607b      	str	r3, [r7, #4]
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073ae:	4629      	mov	r1, r5
 80073b0:	028b      	lsls	r3, r1, #10
 80073b2:	4621      	mov	r1, r4
 80073b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073b8:	4621      	mov	r1, r4
 80073ba:	028a      	lsls	r2, r1, #10
 80073bc:	4610      	mov	r0, r2
 80073be:	4619      	mov	r1, r3
 80073c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c2:	2200      	movs	r2, #0
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	60fa      	str	r2, [r7, #12]
 80073c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073cc:	f7f9 fb7a 	bl	8000ac4 <__aeabi_uldivmod>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4613      	mov	r3, r2
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <HAL_RCC_GetSysClockFreq+0x180>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	0c1b      	lsrs	r3, r3, #16
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	3301      	adds	r3, #1
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80073e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073f2:	e002      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <HAL_RCC_GetSysClockFreq+0x184>)
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3740      	adds	r7, #64	; 0x40
 8007400:	46bd      	mov	sp, r7
 8007402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007406:	bf00      	nop
 8007408:	40023800 	.word	0x40023800
 800740c:	00f42400 	.word	0x00f42400
 8007410:	017d7840 	.word	0x017d7840

08007414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007418:	4b03      	ldr	r3, [pc, #12]	; (8007428 <HAL_RCC_GetHCLKFreq+0x14>)
 800741a:	681b      	ldr	r3, [r3, #0]
}
 800741c:	4618      	mov	r0, r3
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000004 	.word	0x20000004

0800742c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007430:	f7ff fff0 	bl	8007414 <HAL_RCC_GetHCLKFreq>
 8007434:	4602      	mov	r2, r0
 8007436:	4b05      	ldr	r3, [pc, #20]	; (800744c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	0a9b      	lsrs	r3, r3, #10
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	4903      	ldr	r1, [pc, #12]	; (8007450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007442:	5ccb      	ldrb	r3, [r1, r3]
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007448:	4618      	mov	r0, r3
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40023800 	.word	0x40023800
 8007450:	08008310 	.word	0x08008310

08007454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07b      	b.n	800755e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d108      	bne.n	8007480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007476:	d009      	beq.n	800748c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	61da      	str	r2, [r3, #28]
 800747e:	e005      	b.n	800748c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb f82a 	bl	8002500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	ea42 0103 	orr.w	r1, r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0104 	and.w	r1, r3, #4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	f003 0210 	and.w	r2, r3, #16
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	099b      	lsrs	r3, r3, #6
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10f      	bne.n	80075ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	099b      	lsrs	r3, r3, #6
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
    return;
 80075aa:	e0d7      	b.n	800775c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_SPI_IRQHandler+0x66>
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	09db      	lsrs	r3, r3, #7
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
    return;
 80075cc:	e0c6      	b.n	800775c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10c      	bne.n	80075f4 <HAL_SPI_IRQHandler+0x8c>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	0a1b      	lsrs	r3, r3, #8
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 80b4 	beq.w	800775c <HAL_SPI_IRQHandler+0x1f4>
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80ad 	beq.w	800775c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	099b      	lsrs	r3, r3, #6
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d023      	beq.n	8007656 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b03      	cmp	r3, #3
 8007618:	d011      	beq.n	800763e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	f043 0204 	orr.w	r2, r3, #4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	e00b      	b.n	8007656 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763e:	2300      	movs	r3, #0
 8007640:	613b      	str	r3, [r7, #16]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	693b      	ldr	r3, [r7, #16]
        return;
 8007654:	e082      	b.n	800775c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d014      	beq.n	800768c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f043 0201 	orr.w	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00c      	beq.n	80076b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769c:	f043 0208 	orr.w	r2, r3, #8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076a4:	2300      	movs	r3, #0
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60bb      	str	r3, [r7, #8]
 80076b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d04f      	beq.n	800775a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d104      	bne.n	80076e6 <HAL_SPI_IRQHandler+0x17e>
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d034      	beq.n	8007750 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0203 	bic.w	r2, r2, #3
 80076f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d011      	beq.n	8007722 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007702:	4a18      	ldr	r2, [pc, #96]	; (8007764 <HAL_SPI_IRQHandler+0x1fc>)
 8007704:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	4618      	mov	r0, r3
 800770c:	f7fc f98c 	bl	8003a28 <HAL_DMA_Abort_IT>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772e:	4a0d      	ldr	r2, [pc, #52]	; (8007764 <HAL_SPI_IRQHandler+0x1fc>)
 8007730:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc f976 	bl	8003a28 <HAL_DMA_Abort_IT>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800774e:	e003      	b.n	8007758 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f809 	bl	8007768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007756:	e000      	b.n	800775a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007758:	bf00      	nop
    return;
 800775a:	bf00      	nop
  }
}
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	0800777d 	.word	0x0800777d

08007768 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff ffe6 	bl	8007768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e041      	b.n	800783a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fb f900 	bl	80029d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f000 fae2 	bl	8007dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e03c      	b.n	80078d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <HAL_TIM_Base_Start+0xa0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1a      	ldr	r2, [pc, #104]	; (80078e8 <HAL_TIM_Base_Start+0xa4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a19      	ldr	r2, [pc, #100]	; (80078ec <HAL_TIM_Base_Start+0xa8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <HAL_TIM_Base_Start+0xac>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <HAL_TIM_Base_Start+0xb0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d111      	bne.n	80078c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d010      	beq.n	80078d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	e007      	b.n	80078d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40000400 	.word	0x40000400
 80078ec:	40000800 	.word	0x40000800
 80078f0:	40000c00 	.word	0x40000c00
 80078f4:	40014000 	.word	0x40014000

080078f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d001      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e044      	b.n	800799a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d018      	beq.n	8007964 <HAL_TIM_Base_Start_IT+0x6c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793a:	d013      	beq.n	8007964 <HAL_TIM_Base_Start_IT+0x6c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1a      	ldr	r2, [pc, #104]	; (80079ac <HAL_TIM_Base_Start_IT+0xb4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00e      	beq.n	8007964 <HAL_TIM_Base_Start_IT+0x6c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a19      	ldr	r2, [pc, #100]	; (80079b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d009      	beq.n	8007964 <HAL_TIM_Base_Start_IT+0x6c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a17      	ldr	r2, [pc, #92]	; (80079b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_TIM_Base_Start_IT+0x6c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a16      	ldr	r2, [pc, #88]	; (80079b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d111      	bne.n	8007988 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b06      	cmp	r3, #6
 8007974:	d010      	beq.n	8007998 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	e007      	b.n	8007998 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40010000 	.word	0x40010000
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40000c00 	.word	0x40000c00
 80079b8:	40014000 	.word	0x40014000

080079bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d122      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d11b      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0202 	mvn.w	r2, #2
 80079e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f9b5 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007a04:	e005      	b.n	8007a12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f9a7 	bl	8007d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f9b8 	bl	8007d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d122      	bne.n	8007a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d11b      	bne.n	8007a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0204 	mvn.w	r2, #4
 8007a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2202      	movs	r2, #2
 8007a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f98b 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007a58:	e005      	b.n	8007a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f97d 	bl	8007d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f98e 	bl	8007d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d122      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d11b      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0208 	mvn.w	r2, #8
 8007a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2204      	movs	r2, #4
 8007a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f961 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007aac:	e005      	b.n	8007aba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f953 	bl	8007d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f964 	bl	8007d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b10      	cmp	r3, #16
 8007acc:	d122      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b10      	cmp	r3, #16
 8007ada:	d11b      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0210 	mvn.w	r2, #16
 8007ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f937 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007b00:	e005      	b.n	8007b0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f929 	bl	8007d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f93a 	bl	8007d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d10e      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d107      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0201 	mvn.w	r2, #1
 8007b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7f9 ffd0 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b80      	cmp	r3, #128	; 0x80
 8007b4c:	d10e      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b58:	2b80      	cmp	r3, #128	; 0x80
 8007b5a:	d107      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fab2 	bl	80080d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d10e      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d107      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8ff 	bl	8007d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f003 0320 	and.w	r3, r3, #32
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d10e      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d107      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f06f 0220 	mvn.w	r2, #32
 8007bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa7c 	bl	80080bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_TIM_ConfigClockSource+0x1c>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e0b4      	b.n	8007d52 <HAL_TIM_ConfigClockSource+0x186>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c20:	d03e      	beq.n	8007ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8007c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c26:	f200 8087 	bhi.w	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	f000 8086 	beq.w	8007d3e <HAL_TIM_ConfigClockSource+0x172>
 8007c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c36:	d87f      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c38:	2b70      	cmp	r3, #112	; 0x70
 8007c3a:	d01a      	beq.n	8007c72 <HAL_TIM_ConfigClockSource+0xa6>
 8007c3c:	2b70      	cmp	r3, #112	; 0x70
 8007c3e:	d87b      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c40:	2b60      	cmp	r3, #96	; 0x60
 8007c42:	d050      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8007c44:	2b60      	cmp	r3, #96	; 0x60
 8007c46:	d877      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c48:	2b50      	cmp	r3, #80	; 0x50
 8007c4a:	d03c      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8007c4c:	2b50      	cmp	r3, #80	; 0x50
 8007c4e:	d873      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d058      	beq.n	8007d06 <HAL_TIM_ConfigClockSource+0x13a>
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	d86f      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c58:	2b30      	cmp	r3, #48	; 0x30
 8007c5a:	d064      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0x15a>
 8007c5c:	2b30      	cmp	r3, #48	; 0x30
 8007c5e:	d86b      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d060      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0x15a>
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d867      	bhi.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d05c      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0x15a>
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d05a      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0x15a>
 8007c70:	e062      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6899      	ldr	r1, [r3, #8]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f000 f98d 	bl	8007fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	609a      	str	r2, [r3, #8]
      break;
 8007c9e:	e04f      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	6899      	ldr	r1, [r3, #8]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f000 f976 	bl	8007fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cc2:	609a      	str	r2, [r3, #8]
      break;
 8007cc4:	e03c      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6859      	ldr	r1, [r3, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f000 f8ea 	bl	8007eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2150      	movs	r1, #80	; 0x50
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 f943 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007ce4:	e02c      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6859      	ldr	r1, [r3, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f000 f909 	bl	8007f0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2160      	movs	r1, #96	; 0x60
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f933 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007d04:	e01c      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	6859      	ldr	r1, [r3, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f000 f8ca 	bl	8007eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2140      	movs	r1, #64	; 0x40
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f923 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007d24:	e00c      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4610      	mov	r0, r2
 8007d32:	f000 f91a 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007d36:	e003      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3c:	e000      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
	...

08007dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a34      	ldr	r2, [pc, #208]	; (8007e90 <TIM_Base_SetConfig+0xe4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00f      	beq.n	8007de4 <TIM_Base_SetConfig+0x38>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dca:	d00b      	beq.n	8007de4 <TIM_Base_SetConfig+0x38>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a31      	ldr	r2, [pc, #196]	; (8007e94 <TIM_Base_SetConfig+0xe8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_Base_SetConfig+0x38>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a30      	ldr	r2, [pc, #192]	; (8007e98 <TIM_Base_SetConfig+0xec>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_Base_SetConfig+0x38>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a2f      	ldr	r2, [pc, #188]	; (8007e9c <TIM_Base_SetConfig+0xf0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d108      	bne.n	8007df6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a25      	ldr	r2, [pc, #148]	; (8007e90 <TIM_Base_SetConfig+0xe4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01b      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e04:	d017      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a22      	ldr	r2, [pc, #136]	; (8007e94 <TIM_Base_SetConfig+0xe8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a21      	ldr	r2, [pc, #132]	; (8007e98 <TIM_Base_SetConfig+0xec>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00f      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <TIM_Base_SetConfig+0xf0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00b      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <TIM_Base_SetConfig+0xf4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d007      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <TIM_Base_SetConfig+0xf8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d003      	beq.n	8007e36 <TIM_Base_SetConfig+0x8a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <TIM_Base_SetConfig+0xfc>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d108      	bne.n	8007e48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <TIM_Base_SetConfig+0xe4>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d103      	bne.n	8007e7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	615a      	str	r2, [r3, #20]
}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800
 8007e9c:	40000c00 	.word	0x40000c00
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40014400 	.word	0x40014400
 8007ea8:	40014800 	.word	0x40014800

08007eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f023 030a 	bic.w	r3, r3, #10
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f023 0210 	bic.w	r2, r3, #16
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	031b      	lsls	r3, r3, #12
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f043 0307 	orr.w	r3, r3, #7
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e050      	b.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1c      	ldr	r2, [pc, #112]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d018      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008044:	d013      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00e      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a16      	ldr	r2, [pc, #88]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d009      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d004      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10c      	bne.n	8008088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	4313      	orrs	r3, r2
 800807e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40014000 	.word	0x40014000

080080bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <calloc>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <calloc+0xc>)
 80080e6:	460a      	mov	r2, r1
 80080e8:	4601      	mov	r1, r0
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	f000 b834 	b.w	8008158 <_calloc_r>
 80080f0:	20000010 	.word	0x20000010

080080f4 <__errno>:
 80080f4:	4b01      	ldr	r3, [pc, #4]	; (80080fc <__errno+0x8>)
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20000010 	.word	0x20000010

08008100 <__libc_init_array>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4d0d      	ldr	r5, [pc, #52]	; (8008138 <__libc_init_array+0x38>)
 8008104:	4c0d      	ldr	r4, [pc, #52]	; (800813c <__libc_init_array+0x3c>)
 8008106:	1b64      	subs	r4, r4, r5
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	2600      	movs	r6, #0
 800810c:	42a6      	cmp	r6, r4
 800810e:	d109      	bne.n	8008124 <__libc_init_array+0x24>
 8008110:	4d0b      	ldr	r5, [pc, #44]	; (8008140 <__libc_init_array+0x40>)
 8008112:	4c0c      	ldr	r4, [pc, #48]	; (8008144 <__libc_init_array+0x44>)
 8008114:	f000 f8e8 	bl	80082e8 <_init>
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	2600      	movs	r6, #0
 800811e:	42a6      	cmp	r6, r4
 8008120:	d105      	bne.n	800812e <__libc_init_array+0x2e>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f855 3b04 	ldr.w	r3, [r5], #4
 8008128:	4798      	blx	r3
 800812a:	3601      	adds	r6, #1
 800812c:	e7ee      	b.n	800810c <__libc_init_array+0xc>
 800812e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008132:	4798      	blx	r3
 8008134:	3601      	adds	r6, #1
 8008136:	e7f2      	b.n	800811e <__libc_init_array+0x1e>
 8008138:	08008328 	.word	0x08008328
 800813c:	08008328 	.word	0x08008328
 8008140:	08008328 	.word	0x08008328
 8008144:	0800832c 	.word	0x0800832c

08008148 <memset>:
 8008148:	4402      	add	r2, r0
 800814a:	4603      	mov	r3, r0
 800814c:	4293      	cmp	r3, r2
 800814e:	d100      	bne.n	8008152 <memset+0xa>
 8008150:	4770      	bx	lr
 8008152:	f803 1b01 	strb.w	r1, [r3], #1
 8008156:	e7f9      	b.n	800814c <memset+0x4>

08008158 <_calloc_r>:
 8008158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800815a:	fba1 2402 	umull	r2, r4, r1, r2
 800815e:	b94c      	cbnz	r4, 8008174 <_calloc_r+0x1c>
 8008160:	4611      	mov	r1, r2
 8008162:	9201      	str	r2, [sp, #4]
 8008164:	f000 f82e 	bl	80081c4 <_malloc_r>
 8008168:	9a01      	ldr	r2, [sp, #4]
 800816a:	4605      	mov	r5, r0
 800816c:	b930      	cbnz	r0, 800817c <_calloc_r+0x24>
 800816e:	4628      	mov	r0, r5
 8008170:	b003      	add	sp, #12
 8008172:	bd30      	pop	{r4, r5, pc}
 8008174:	220c      	movs	r2, #12
 8008176:	6002      	str	r2, [r0, #0]
 8008178:	2500      	movs	r5, #0
 800817a:	e7f8      	b.n	800816e <_calloc_r+0x16>
 800817c:	4621      	mov	r1, r4
 800817e:	f7ff ffe3 	bl	8008148 <memset>
 8008182:	e7f4      	b.n	800816e <_calloc_r+0x16>

08008184 <sbrk_aligned>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4e0e      	ldr	r6, [pc, #56]	; (80081c0 <sbrk_aligned+0x3c>)
 8008188:	460c      	mov	r4, r1
 800818a:	6831      	ldr	r1, [r6, #0]
 800818c:	4605      	mov	r5, r0
 800818e:	b911      	cbnz	r1, 8008196 <sbrk_aligned+0x12>
 8008190:	f000 f88c 	bl	80082ac <_sbrk_r>
 8008194:	6030      	str	r0, [r6, #0]
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f000 f887 	bl	80082ac <_sbrk_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d00a      	beq.n	80081b8 <sbrk_aligned+0x34>
 80081a2:	1cc4      	adds	r4, r0, #3
 80081a4:	f024 0403 	bic.w	r4, r4, #3
 80081a8:	42a0      	cmp	r0, r4
 80081aa:	d007      	beq.n	80081bc <sbrk_aligned+0x38>
 80081ac:	1a21      	subs	r1, r4, r0
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 f87c 	bl	80082ac <_sbrk_r>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d101      	bne.n	80081bc <sbrk_aligned+0x38>
 80081b8:	f04f 34ff 	mov.w	r4, #4294967295
 80081bc:	4620      	mov	r0, r4
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	200003bc 	.word	0x200003bc

080081c4 <_malloc_r>:
 80081c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	1ccd      	adds	r5, r1, #3
 80081ca:	f025 0503 	bic.w	r5, r5, #3
 80081ce:	3508      	adds	r5, #8
 80081d0:	2d0c      	cmp	r5, #12
 80081d2:	bf38      	it	cc
 80081d4:	250c      	movcc	r5, #12
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	4607      	mov	r7, r0
 80081da:	db01      	blt.n	80081e0 <_malloc_r+0x1c>
 80081dc:	42a9      	cmp	r1, r5
 80081de:	d905      	bls.n	80081ec <_malloc_r+0x28>
 80081e0:	230c      	movs	r3, #12
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	2600      	movs	r6, #0
 80081e6:	4630      	mov	r0, r6
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	4e2e      	ldr	r6, [pc, #184]	; (80082a8 <_malloc_r+0xe4>)
 80081ee:	f000 f86d 	bl	80082cc <__malloc_lock>
 80081f2:	6833      	ldr	r3, [r6, #0]
 80081f4:	461c      	mov	r4, r3
 80081f6:	bb34      	cbnz	r4, 8008246 <_malloc_r+0x82>
 80081f8:	4629      	mov	r1, r5
 80081fa:	4638      	mov	r0, r7
 80081fc:	f7ff ffc2 	bl	8008184 <sbrk_aligned>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	4604      	mov	r4, r0
 8008204:	d14d      	bne.n	80082a2 <_malloc_r+0xde>
 8008206:	6834      	ldr	r4, [r6, #0]
 8008208:	4626      	mov	r6, r4
 800820a:	2e00      	cmp	r6, #0
 800820c:	d140      	bne.n	8008290 <_malloc_r+0xcc>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	4631      	mov	r1, r6
 8008212:	4638      	mov	r0, r7
 8008214:	eb04 0803 	add.w	r8, r4, r3
 8008218:	f000 f848 	bl	80082ac <_sbrk_r>
 800821c:	4580      	cmp	r8, r0
 800821e:	d13a      	bne.n	8008296 <_malloc_r+0xd2>
 8008220:	6821      	ldr	r1, [r4, #0]
 8008222:	3503      	adds	r5, #3
 8008224:	1a6d      	subs	r5, r5, r1
 8008226:	f025 0503 	bic.w	r5, r5, #3
 800822a:	3508      	adds	r5, #8
 800822c:	2d0c      	cmp	r5, #12
 800822e:	bf38      	it	cc
 8008230:	250c      	movcc	r5, #12
 8008232:	4629      	mov	r1, r5
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff ffa5 	bl	8008184 <sbrk_aligned>
 800823a:	3001      	adds	r0, #1
 800823c:	d02b      	beq.n	8008296 <_malloc_r+0xd2>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	442b      	add	r3, r5
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	e00e      	b.n	8008264 <_malloc_r+0xa0>
 8008246:	6822      	ldr	r2, [r4, #0]
 8008248:	1b52      	subs	r2, r2, r5
 800824a:	d41e      	bmi.n	800828a <_malloc_r+0xc6>
 800824c:	2a0b      	cmp	r2, #11
 800824e:	d916      	bls.n	800827e <_malloc_r+0xba>
 8008250:	1961      	adds	r1, r4, r5
 8008252:	42a3      	cmp	r3, r4
 8008254:	6025      	str	r5, [r4, #0]
 8008256:	bf18      	it	ne
 8008258:	6059      	strne	r1, [r3, #4]
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	bf08      	it	eq
 800825e:	6031      	streq	r1, [r6, #0]
 8008260:	5162      	str	r2, [r4, r5]
 8008262:	604b      	str	r3, [r1, #4]
 8008264:	4638      	mov	r0, r7
 8008266:	f104 060b 	add.w	r6, r4, #11
 800826a:	f000 f835 	bl	80082d8 <__malloc_unlock>
 800826e:	f026 0607 	bic.w	r6, r6, #7
 8008272:	1d23      	adds	r3, r4, #4
 8008274:	1af2      	subs	r2, r6, r3
 8008276:	d0b6      	beq.n	80081e6 <_malloc_r+0x22>
 8008278:	1b9b      	subs	r3, r3, r6
 800827a:	50a3      	str	r3, [r4, r2]
 800827c:	e7b3      	b.n	80081e6 <_malloc_r+0x22>
 800827e:	6862      	ldr	r2, [r4, #4]
 8008280:	42a3      	cmp	r3, r4
 8008282:	bf0c      	ite	eq
 8008284:	6032      	streq	r2, [r6, #0]
 8008286:	605a      	strne	r2, [r3, #4]
 8008288:	e7ec      	b.n	8008264 <_malloc_r+0xa0>
 800828a:	4623      	mov	r3, r4
 800828c:	6864      	ldr	r4, [r4, #4]
 800828e:	e7b2      	b.n	80081f6 <_malloc_r+0x32>
 8008290:	4634      	mov	r4, r6
 8008292:	6876      	ldr	r6, [r6, #4]
 8008294:	e7b9      	b.n	800820a <_malloc_r+0x46>
 8008296:	230c      	movs	r3, #12
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4638      	mov	r0, r7
 800829c:	f000 f81c 	bl	80082d8 <__malloc_unlock>
 80082a0:	e7a1      	b.n	80081e6 <_malloc_r+0x22>
 80082a2:	6025      	str	r5, [r4, #0]
 80082a4:	e7de      	b.n	8008264 <_malloc_r+0xa0>
 80082a6:	bf00      	nop
 80082a8:	200003b8 	.word	0x200003b8

080082ac <_sbrk_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d06      	ldr	r5, [pc, #24]	; (80082c8 <_sbrk_r+0x1c>)
 80082b0:	2300      	movs	r3, #0
 80082b2:	4604      	mov	r4, r0
 80082b4:	4608      	mov	r0, r1
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f7fa fa86 	bl	80027c8 <_sbrk>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_sbrk_r+0x1a>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_sbrk_r+0x1a>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	200003c0 	.word	0x200003c0

080082cc <__malloc_lock>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__malloc_lock+0x8>)
 80082ce:	f000 b809 	b.w	80082e4 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	200003c4 	.word	0x200003c4

080082d8 <__malloc_unlock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__malloc_unlock+0x8>)
 80082da:	f000 b804 	b.w	80082e6 <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	200003c4 	.word	0x200003c4

080082e4 <__retarget_lock_acquire_recursive>:
 80082e4:	4770      	bx	lr

080082e6 <__retarget_lock_release_recursive>:
 80082e6:	4770      	bx	lr

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
